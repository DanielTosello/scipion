# **************************************************************************
# *
# * Authors:     I. Foche Perez (ifoche@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'ifoche@cnb.csic.es'
# *
# **************************************************************************

#
# Brief summary: This file is intended to be the main skeleton which will guide all the installation process using a SCons python-based system.
#

import os
import sys
import platform


#############
# VARIABLES #
#############

# OS boolean vars
MACOSX = platform.system() == 'Darwin'
WINDOWS = platform.system() == 'Windows'
LINUX = platform.system() == 'Linux'
MANDATORY_PYVERSION = '2.7.7' #python version that is obligatory for executing Scipion
PYVERSION = platform.python_version() #python version present in the machine

# Big scipion structure dictionary and associated vars
# indexes
DEF = 0 # is built by default?
INCS = 1 # includes
LIBS = 2 # libraries to create
SRC = 3 # source pattern
DIR = 4 # folder name in temporal directory
DEPS = 5 # explicit dependencies
URL = 6 # URL to download from

SCIPION = {
    'FOLDERS': {'CONFIG_FOLDER': [os.path.join('software', 'cfg')],
                'INSTALL_FOLDER': [os.path.join('software', 'install')],
                'BIN_FOLDER': [os.path.join('software', 'bin')],
                'PACKAGES_FOLDER': [os.path.join('software', 'em')],
                'LIB_FOLDER': [os.path.join('software', 'lib')],
                'MAN_FOLDER': [os.path.join('software', 'man')],
                'TMP_FOLDER': [os.path.join('software', 'tmp')],
                'INCLUDE_FOLDER': [os.path.join('software', 'include')]
                }
    'LIBS': {'tcl': {DEF: True,
                     INCS: [],
                     LIBS: [],
                     SRC: [],
                     DIR: [],
                     DEPS: [],
                     URL: ['http://scipionwiki.cnb.csic.es/downloads/software/external/tcl8.6.1-src.tar.gz']},
             'tk': {DEF: True,
                    INCS: [],
                    LIBS: [],
                    SRC: [],
                    DIR: [],
                    DEPS: [],
                    URL: ['http://scipionwiki.cnb.csic.es/downloads/software/external/tk8.6.1-src.tar.gz']},
             'python': {DEF: True,
                        INCS: [],
                        LIBS: [],
                        SRC: [],
                        DIR: [],
                        DEPS: [],
                        URL: ['http://scipionwiki.cnb.csic.es/downloads/software/external/Python-2.7.7.tgz']},
             },
    'PACKAGES': {
                 }
    }


#########################
# ENVIRONMENT AND TOOLS #
#########################

# We create the environment the whole build will use
env = None
env = Environment(tools=['URLDownload',
                         'disttar',
                         'Make',
                         'Unpack'
                         'AutoConfig',
                         'ConfigureJNI',
                         'install',
                         'cuda'],
                  toolpath=[os.path.join('software', 'install', 'scons-tools')])
# To decide if a target must be rebuilt, both md5 and timestamp will be used together
env.Decider('MD5-timestamp')
# For certain files or folders which change could affect the compilation, here there could exist also a user-defined decider function. At this moment MD5-timestamp will be enough 

# To avoid the scanning of new dependencies for every file each time you rebuild, we set an implicit cache. So once a file has been scanned (its #includes pointers) then it won't be scanned again unless the file is changed
SetOption('implicit_cache', 1)

#Depending on the system, we have to add to the environment, the path to where dynamic libraries are, so linker can find them 
if LINUX:
    env.AppendUnique(LIBPATH=os.environ['LD_LIBRARY_PATH'])
elif MACOSX:
    print "OS not tested yet"
    env.AppendUnique(LIBPATH=os.environ['DYLD_FALLBACK_LIBRARY_PATH'])
elif WINDOWS:
    print "OS not tested yet"


#################
# PREREQUISITES #
#################

# Python is needed. Any kind of python, to be able to execute this, but 2.7.6 version os python will be the one to execute Scipion. If the person doesn't have 2.7.6, SCons will compile it. Otherwise, a virtual environment will be used on top of system one, just if the user selects it. By default, python will be built
COMPILE_PYTHON = (PYVERSION != MANDATORY_PYVERSION) and not USER_COMMANDS
# If python is not needed to be compiled, then a virtual environment is needed on top of the system python
BUILD_VIRTUALENV = not COMPILE_PYTHON

#Already compiled scons (using install.sh)
#Python at any version (if 2.7.6, this will be used, otherwise, a new one will be compiled)


############################
# FIRST LEVEL DEPENDENCIES #
############################

# Tcl/Tk
env.SConscript()
# sqlite


#############################
# SECOND LEVEL DEPENDENCIES #
#############################

# python 2.7.6


############################
# THIRD LEVEL DEPENDENCIES #
############################

# numpy

# matplotlib

# psutils

# mpi4py

# scipy

# bibtex

# django

# paramiko


######################
# AUXILIAR FUNCTIONS #
######################

def addLibrary():
    print "This method is for adding a library to the main dict"

def scipionLogo():
    print ""
    print "QQQQQQQQQT!^'::\"\"?$QQQQQQ" + "  S   S   S"
    print "QQQQQQQY`          ]4QQQQ"   + "  C   C   C"
    print "QQQQQD'              \"$QQ"  + "  I   I   I"
    print "QQQQP                 \"4Q"  + "  P   P   P"
    print "QQQP        :.,        -$"   + "  I   I   I"
    print "QQD       awQQQQwp      )"   + "  O   O   O"
    print "QQ'     qmQQQWQQQQg,   jm"   + "  N   N   N"
    print "Qf     QQQD^   -?$QQp jQQ"   + " ################################################"
    print "Q`    qQQ!        4WQmQQQ"   + " # Integrating image processing packages for EM #"
    print "F     QQ[          ~)WQQQ"   + " ################################################"
    print "[    ]QP             4WQQ"   + ""
    print "f    dQ(             -$QQ"   + " Installation SCons system"
    print "'    QQ              qQQQ"
    print ".   )QW            _jQQQQ"
    print "-   =QQ           jmQQQQQ"
    print "/   -QQ           QQQQQQQ"
    print "f    4Qr    jQk   )WQQQQQ"
    print "[    ]Qm    ]QW    \"QQQQQ"
    print "h     $Qc   jQQ     ]$QQQ"
    print "Q,  :aQQf qyQQQL    _yQQQ"
    print "QL jmQQQgmQQQQQQmaaaQWQQQ"
    print ""



/***************************************************************************
 *
 * Authors:     Carlos Oscar S. Sorzano (coss@cnb.csic.es)
 *              Alvaro Capell
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307  USA
 *
 *  All comments concerning this program package may be sent to the
 *  e-mail address 'xmipp@cnb.csic.es'
 ***************************************************************************/

#include "resolution_ibw.h"
#include <data/filters.h>

/* Read parameters --------------------------------------------------------- */
void ProgResolutionIBW::readParams()
{
    fnVol = getParam("-i");
}

/* Usage ------------------------------------------------------------------- */
void ProgResolutionIBW::defineParams()
{
    addUsageLine("Evaluate the resolution of a volume through the inverse border widths");
    addParamsLine("   -i <volume>              : Volume to evaluate");
}

/* Show -------------------------------------------------------------------- */
void ProgResolutionIBW::show() const
{
    std::cout << "Volume:      " << fnVol << std::endl
    ;
}

/* Run --------------------------------------------------------------------- */
void ProgResolutionIBW::run()
{
	V.read(fnVol);

	//Mask generation
	Image<double> aux;
    double bg_mean;
    MultidimArray<double> Vmask;
    detect_background(V(),aux(),0.1,bg_mean);
    aux.write("mascara_no_ero_03.vol");

    //Mask volume erosion to expand the mask boundaries
    Vmask.initZeros(V());
	erode3D(aux(),Vmask, 18,0,2);

	//Correction of some flaws produced in the edges of the mask volume
    FOR_ALL_DIRECT_ELEMENTS_IN_ARRAY3D(Vmask)
    if (k<=4 || i<=4 || j<=4 ||
    	k>=FINISHINGZ(Vmask)-4 || i>=FINISHINGY(Vmask)-4 || j>=FINISHINGX(Vmask)-4)
        DIRECT_A3D_ELEM(Vmask,k,i,j)=1;

    aux()=Vmask;
	aux.write("mascara_si_ero_03.vol");

	//Sobel edge detection applied to original volume
	Image<double> Vedge;
	compute_edges(V(),Vedge());
	Vedge.write("volumen_sobel_unmask_03.vol");

	//Masked volume generation
	const MultidimArray<double> &mVedge=Vedge();
	FOR_ALL_DIRECT_ELEMENTS_IN_MULTIDIMARRAY(mVedge)
	if (DIRECT_MULTIDIM_ELEM(Vmask,n)==1)
		DIRECT_MULTIDIM_ELEM(mVedge,n)=0;
	Vedge.write("volumen_sobel_mask_03.vol");

	//Calculate threshhold accounting all positions in the volume
	//double thresh;
	//thresh=3*mVedge.computeStddev();

	//Calculate threshold accounting only unmasked positions
	double minval, maxval, avg, stddev;

	//Invert the mask to meet computeStats_within_binary_mask requirements
	FOR_ALL_DIRECT_ELEMENTS_IN_MULTIDIMARRAY(Vmask)
		if (DIRECT_MULTIDIM_ELEM(Vmask,n)==1)
			DIRECT_MULTIDIM_ELEM(Vmask,n)=0;
		else
			DIRECT_MULTIDIM_ELEM(Vmask,n)=1;
	double thresh;
	computeStats_within_binary_mask(Vmask,mVedge,minval, maxval, avg, stddev);
	thresh=3*stddev;

	//Final edge volume generated by setting to 1 positions with values > threshold
	Image<double> Vaux;
	Vaux().initZeros(mVedge);
	FOR_ALL_DIRECT_ELEMENTS_IN_MULTIDIMARRAY(mVedge)
	if (DIRECT_MULTIDIM_ELEM(mVedge,n)>=thresh)
		DIRECT_MULTIDIM_ELEM(Vaux(),n)=1;

	Vaux.write("volumen_bordes_definitivo_03.vol");
}

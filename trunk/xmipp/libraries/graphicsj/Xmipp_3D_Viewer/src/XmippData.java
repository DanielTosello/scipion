/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class XmippData implements XmippDataConstants {
  public static int solve_2nd_degree_eq(double a, double b, double c, SWIGTYPE_p_double x1, SWIGTYPE_p_double x2, double prec) {
    return XmippDataJNI.solve_2nd_degree_eq__SWIG_0(a, b, c, SWIGTYPE_p_double.getCPtr(x1), SWIGTYPE_p_double.getCPtr(x2), prec);
  }

  public static int solve_2nd_degree_eq(double a, double b, double c, SWIGTYPE_p_double x1, SWIGTYPE_p_double x2) {
    return XmippDataJNI.solve_2nd_degree_eq__SWIG_1(a, b, c, SWIGTYPE_p_double.getCPtr(x1), SWIGTYPE_p_double.getCPtr(x2));
  }

  public static double gaussian1D(double x, double sigma, double mu) {
    return XmippDataJNI.gaussian1D__SWIG_0(x, sigma, mu);
  }

  public static double gaussian1D(double x, double sigma) {
    return XmippDataJNI.gaussian1D__SWIG_1(x, sigma);
  }

  public static double tstudent1D(double x, double df, double sigma, double mu) {
    return XmippDataJNI.tstudent1D__SWIG_0(x, df, sigma, mu);
  }

  public static double tstudent1D(double x, double df, double sigma) {
    return XmippDataJNI.tstudent1D__SWIG_1(x, df, sigma);
  }

  public static double icdf_gauss(double p) {
    return XmippDataJNI.icdf_gauss(p);
  }

  public static double cdf_gauss(double x) {
    return XmippDataJNI.cdf_gauss(x);
  }

  public static double cdf_tstudent(int k, double t) {
    return XmippDataJNI.cdf_tstudent(k, t);
  }

  public static double cdf_FSnedecor(int d1, int d2, double x) {
    return XmippDataJNI.cdf_FSnedecor(d1, d2, x);
  }

  public static double icdf_FSnedecor(int d1, int d2, double p) {
    return XmippDataJNI.icdf_FSnedecor(d1, d2, p);
  }

  public static double gaussian2D(double x, double y, double sigmaX, double sigmaY, double ang, double muX, double muY) {
    return XmippDataJNI.gaussian2D__SWIG_0(x, y, sigmaX, sigmaY, ang, muX, muY);
  }

  public static double gaussian2D(double x, double y, double sigmaX, double sigmaY, double ang, double muX) {
    return XmippDataJNI.gaussian2D__SWIG_1(x, y, sigmaX, sigmaY, ang, muX);
  }

  public static double gaussian2D(double x, double y, double sigmaX, double sigmaY, double ang) {
    return XmippDataJNI.gaussian2D__SWIG_2(x, y, sigmaX, sigmaY, ang);
  }

  public static double log2(double value) {
    return XmippDataJNI.log2(value);
  }

  public static void init_random_generator(int seed) {
    XmippDataJNI.init_random_generator__SWIG_0(seed);
  }

  public static void init_random_generator() {
    XmippDataJNI.init_random_generator__SWIG_1();
  }

  public static void randomize_random_generator() {
    XmippDataJNI.randomize_random_generator();
  }

  public static float rnd_unif() {
    return XmippDataJNI.rnd_unif__SWIG_0();
  }

  public static float rnd_unif(float a, float b) {
    return XmippDataJNI.rnd_unif__SWIG_1(a, b);
  }

  public static float rnd_student_t(double nu) {
    return XmippDataJNI.rnd_student_t__SWIG_0(nu);
  }

  public static float rnd_student_t(double nu, float a, float b) {
    return XmippDataJNI.rnd_student_t__SWIG_1(nu, a, b);
  }

  public static float rnd_gaus() {
    return XmippDataJNI.rnd_gaus__SWIG_0();
  }

  public static float rnd_gaus(float a, float b) {
    return XmippDataJNI.rnd_gaus__SWIG_1(a, b);
  }

  public static float gaus_within_x0(float x0, float mean, float stddev) {
    return XmippDataJNI.gaus_within_x0__SWIG_0(x0, mean, stddev);
  }

  public static float gaus_within_x0(float x0, float mean) {
    return XmippDataJNI.gaus_within_x0__SWIG_1(x0, mean);
  }

  public static float gaus_within_x0(float x0) {
    return XmippDataJNI.gaus_within_x0__SWIG_2(x0);
  }

  public static float gaus_outside_x0(float x0, float mean, float stddev) {
    return XmippDataJNI.gaus_outside_x0__SWIG_0(x0, mean, stddev);
  }

  public static float gaus_outside_x0(float x0, float mean) {
    return XmippDataJNI.gaus_outside_x0__SWIG_1(x0, mean);
  }

  public static float gaus_outside_x0(float x0) {
    return XmippDataJNI.gaus_outside_x0__SWIG_2(x0);
  }

  public static float gaus_up_to_x0(float x0, float mean, float stddev) {
    return XmippDataJNI.gaus_up_to_x0__SWIG_0(x0, mean, stddev);
  }

  public static float gaus_up_to_x0(float x0, float mean) {
    return XmippDataJNI.gaus_up_to_x0__SWIG_1(x0, mean);
  }

  public static float gaus_up_to_x0(float x0) {
    return XmippDataJNI.gaus_up_to_x0__SWIG_2(x0);
  }

  public static float gaus_from_x0(float x0, float mean, float stddev) {
    return XmippDataJNI.gaus_from_x0__SWIG_0(x0, mean, stddev);
  }

  public static float gaus_from_x0(float x0, float mean) {
    return XmippDataJNI.gaus_from_x0__SWIG_1(x0, mean);
  }

  public static float gaus_from_x0(float x0) {
    return XmippDataJNI.gaus_from_x0__SWIG_2(x0);
  }

  public static float student_outside_probb(float p, float degrees_of_freedom) {
    return XmippDataJNI.student_outside_probb(p, degrees_of_freedom);
  }

  public static float student_within_t0(float t0, float degrees_of_freedom) {
    return XmippDataJNI.student_within_t0(t0, degrees_of_freedom);
  }

  public static float student_outside_t0(float t0, float degrees_of_freedom) {
    return XmippDataJNI.student_outside_t0(t0, degrees_of_freedom);
  }

  public static float student_up_to_t0(float t0, float degrees_of_freedom) {
    return XmippDataJNI.student_up_to_t0(t0, degrees_of_freedom);
  }

  public static float student_from_t0(float t0, float degrees_of_freedom) {
    return XmippDataJNI.student_from_t0(t0, degrees_of_freedom);
  }

  public static float chi2_up_to_t0(float t0, float degrees_of_freedom) {
    return XmippDataJNI.chi2_up_to_t0(t0, degrees_of_freedom);
  }

  public static float chi2_from_t0(float t0, float degrees_of_freedom) {
    return XmippDataJNI.chi2_from_t0(t0, degrees_of_freedom);
  }

  public static float rnd_log(float a, float b) {
    return XmippDataJNI.rnd_log(a, b);
  }

  public static int exists(FileName fn) {
    return XmippDataJNI.exists(FileName.getCPtr(fn), fn);
  }

  public static int existsTrim(FileName fn) {
    return XmippDataJNI.existsTrim(FileName.getCPtr(fn), fn);
  }

  public static void exit_if_not_exists(FileName fn) {
    XmippDataJNI.exit_if_not_exists(FileName.getCPtr(fn), fn);
  }

  public static void wait_until_stable_size(FileName fn, long time_step) {
    XmippDataJNI.wait_until_stable_size__SWIG_0(FileName.getCPtr(fn), fn, time_step);
  }

  public static void wait_until_stable_size(FileName fn) {
    XmippDataJNI.wait_until_stable_size__SWIG_1(FileName.getCPtr(fn), fn);
  }

  public static void create_empty_file(FileName fn, java.math.BigInteger size, java.math.BigInteger block_size) {
    XmippDataJNI.create_empty_file__SWIG_0(FileName.getCPtr(fn), fn, size, block_size);
  }

  public static void create_empty_file(FileName fn, java.math.BigInteger size) {
    XmippDataJNI.create_empty_file__SWIG_1(FileName.getCPtr(fn), fn, size);
  }

  public static FileName xmippBaseDir() {
    return new FileName(XmippDataJNI.xmippBaseDir(), true);
  }

  public static void time_config() {
    XmippDataJNI.time_config();
  }

  public static void annotate_time(SWIGTYPE_p_tms time) {
    XmippDataJNI.annotate_time(SWIGTYPE_p_tms.getCPtr(time));
  }

  public static void acum_time(SWIGTYPE_p_tms orig, SWIGTYPE_p_tms dest) {
    XmippDataJNI.acum_time(SWIGTYPE_p_tms.getCPtr(orig), SWIGTYPE_p_tms.getCPtr(dest));
  }

  public static float elapsed_time(SWIGTYPE_p_tms time, boolean _IN_SECS) {
    return XmippDataJNI.elapsed_time__SWIG_0(SWIGTYPE_p_tms.getCPtr(time), _IN_SECS);
  }

  public static float elapsed_time(SWIGTYPE_p_tms time) {
    return XmippDataJNI.elapsed_time__SWIG_1(SWIGTYPE_p_tms.getCPtr(time));
  }

  public static void print_elapsed_time(SWIGTYPE_p_tms time, boolean _IN_SECS) {
    XmippDataJNI.print_elapsed_time__SWIG_0(SWIGTYPE_p_tms.getCPtr(time), _IN_SECS);
  }

  public static void print_elapsed_time(SWIGTYPE_p_tms time) {
    XmippDataJNI.print_elapsed_time__SWIG_1(SWIGTYPE_p_tms.getCPtr(time));
  }

  public static float time_to_go(SWIGTYPE_p_tms time, float fraction_done) {
    return XmippDataJNI.time_to_go(SWIGTYPE_p_tms.getCPtr(time), fraction_done);
  }

  public static void init_progress_bar(int total) {
    XmippDataJNI.init_progress_bar(total);
  }

  public static void progress_bar(int act_time) {
    XmippDataJNI.progress_bar(act_time);
  }

  public static void TimeMessage(String message) {
    XmippDataJNI.TimeMessage(message);
  }

  public static long xmippFREAD(SWIGTYPE_p_void dest, long size, long nitems, SWIGTYPE_p_FILE fp, boolean reverse) {
    return XmippDataJNI.xmippFREAD__SWIG_0(SWIGTYPE_p_void.getCPtr(dest), size, nitems, SWIGTYPE_p_FILE.getCPtr(fp), reverse);
  }

  public static long xmippFREAD(SWIGTYPE_p_void dest, long size, long nitems, SWIGTYPE_p_FILE fp) {
    return XmippDataJNI.xmippFREAD__SWIG_1(SWIGTYPE_p_void.getCPtr(dest), size, nitems, SWIGTYPE_p_FILE.getCPtr(fp));
  }

  public static long xmippFWRITE(SWIGTYPE_p_void src, long size, long nitems, SWIGTYPE_p_FILE fp, boolean reverse) {
    return XmippDataJNI.xmippFWRITE__SWIG_0(SWIGTYPE_p_void.getCPtr(src), size, nitems, SWIGTYPE_p_FILE.getCPtr(fp), reverse);
  }

  public static long xmippFWRITE(SWIGTYPE_p_void src, long size, long nitems, SWIGTYPE_p_FILE fp) {
    return XmippDataJNI.xmippFWRITE__SWIG_1(SWIGTYPE_p_void.getCPtr(src), size, nitems, SWIGTYPE_p_FILE.getCPtr(fp));
  }

  public static void ByteSwap(SWIGTYPE_p_unsigned_char b, int n) {
    XmippDataJNI.ByteSwap(SWIGTYPE_p_unsigned_char.getCPtr(b), n);
  }

  public static void swapbytes(String v, long n) {
    XmippDataJNI.swapbytes(v, n);
  }

  public static boolean IsBigEndian() {
    return XmippDataJNI.IsBigEndian();
  }

  public static boolean IsLittleEndian() {
    return XmippDataJNI.IsLittleEndian();
  }

  public static int divide_equally(int N, int size, int rank, SWIGTYPE_p_int first, SWIGTYPE_p_int last) {
    return XmippDataJNI.divide_equally(N, size, rank, SWIGTYPE_p_int.getCPtr(first), SWIGTYPE_p_int.getCPtr(last));
  }

  public static int divide_equally_group(int N, int size, int myself) {
    return XmippDataJNI.divide_equally_group(N, size, myself);
  }

  public static int bestPrecision(float F, int _width) {
    return XmippDataJNI.bestPrecision(F, _width);
  }

  public static String floatToString(float F, int _width, int _prec) {
    return XmippDataJNI.floatToString(F, _width, _prec);
  }

  public static long gettypesize(DataType type) {
    return XmippDataJNI.gettypesize(type.swigValue());
  }

  public static void setProject_barrier(SWIGTYPE_p_barrier_t value) {
    XmippDataJNI.project_barrier_set(SWIGTYPE_p_barrier_t.getCPtr(value));
  }

  public static SWIGTYPE_p_barrier_t getProject_barrier() {
    return new SWIGTYPE_p_barrier_t(XmippDataJNI.project_barrier_get(), true);
  }

  public static void setProject_mutex(SWIGTYPE_p_pthread_mutex_t value) {
    XmippDataJNI.project_mutex_set(SWIGTYPE_p_pthread_mutex_t.getCPtr(value));
  }

  public static SWIGTYPE_p_pthread_mutex_t getProject_mutex() {
    return new SWIGTYPE_p_pthread_mutex_t(XmippDataJNI.project_mutex_get(), true);
  }

  public static void setProject_threads(project_thread_params value) {
    XmippDataJNI.project_threads_set(project_thread_params.getCPtr(value), value);
  }

  public static project_thread_params getProject_threads() {
    long cPtr = XmippDataJNI.project_threads_get();
    return (cPtr == 0) ? null : new project_thread_params(cPtr, false);
  }

  public static void project_Volume(MultidimArrayd V, Projection P, int Ydim, int Xdim, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t roffset) {
    XmippDataJNI.project_Volume__SWIG_0(MultidimArrayd.getCPtr(V), V, Projection.getCPtr(P), P, Ydim, Xdim, rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(roffset));
  }

  public static void project_Volume(MultidimArrayd V, Projection P, int Ydim, int Xdim, double rot, double tilt, double psi) {
    XmippDataJNI.project_Volume__SWIG_1(MultidimArrayd.getCPtr(V), V, Projection.getCPtr(P), P, Ydim, Xdim, rot, tilt, psi);
  }

  public static void project_Volume_offCentered(MultidimArrayd V, Projection P, int Ydim, int Xdim, double axisRot, double axisTilt, SWIGTYPE_p_Matrix1DT_double_t raxis, double angle, double inplaneRot, SWIGTYPE_p_Matrix1DT_double_t rinplane) {
    XmippDataJNI.project_Volume_offCentered(MultidimArrayd.getCPtr(V), V, Projection.getCPtr(P), P, Ydim, Xdim, axisRot, axisTilt, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(raxis), angle, inplaneRot, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(rinplane));
  }

  public static void singleWBP(MultidimArrayd V, Projection P) {
    XmippDataJNI.singleWBP(MultidimArrayd.getCPtr(V), V, Projection.getCPtr(P), P);
  }

  public static void count_eqs_in_projection(SWIGTYPE_p_GridVolumeTT_int_t GVNeq, SWIGTYPE_p_Basis basis, Projection read_proj) {
    XmippDataJNI.count_eqs_in_projection(SWIGTYPE_p_GridVolumeTT_int_t.getCPtr(GVNeq), SWIGTYPE_p_Basis.getCPtr(basis), Projection.getCPtr(read_proj), read_proj);
  }

  public static void project_Crystal_Volume(SWIGTYPE_p_GridVolume vol, SWIGTYPE_p_Basis basis, Projection proj, Projection norm_proj, int Ydim, int Xdim, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t shift, SWIGTYPE_p_Matrix1DT_double_t aint, SWIGTYPE_p_Matrix1DT_double_t bint, SWIGTYPE_p_Matrix2DT_double_t D, SWIGTYPE_p_Matrix2DT_double_t Dinv, SWIGTYPE_p_MultidimArrayT_int_t mask, int FORW, int eq_mode) {
    XmippDataJNI.project_Crystal_Volume__SWIG_0(SWIGTYPE_p_GridVolume.getCPtr(vol), SWIGTYPE_p_Basis.getCPtr(basis), Projection.getCPtr(proj), proj, Projection.getCPtr(norm_proj), norm_proj, Ydim, Xdim, rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(shift), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(aint), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(bint), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(D), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(Dinv), SWIGTYPE_p_MultidimArrayT_int_t.getCPtr(mask), FORW, eq_mode);
  }

  public static void project_Crystal_Volume(SWIGTYPE_p_GridVolume vol, SWIGTYPE_p_Basis basis, Projection proj, Projection norm_proj, int Ydim, int Xdim, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t shift, SWIGTYPE_p_Matrix1DT_double_t aint, SWIGTYPE_p_Matrix1DT_double_t bint, SWIGTYPE_p_Matrix2DT_double_t D, SWIGTYPE_p_Matrix2DT_double_t Dinv, SWIGTYPE_p_MultidimArrayT_int_t mask, int FORW) {
    XmippDataJNI.project_Crystal_Volume__SWIG_1(SWIGTYPE_p_GridVolume.getCPtr(vol), SWIGTYPE_p_Basis.getCPtr(basis), Projection.getCPtr(proj), proj, Projection.getCPtr(norm_proj), norm_proj, Ydim, Xdim, rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(shift), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(aint), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(bint), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(D), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(Dinv), SWIGTYPE_p_MultidimArrayT_int_t.getCPtr(mask), FORW);
  }

  public static int getART_PIXEL_SUBSAMPLING() {
    return XmippDataJNI.ART_PIXEL_SUBSAMPLING_get();
  }

  public static void Uproject_to_plane(SWIGTYPE_p_Matrix1DT_double_t point, SWIGTYPE_p_Matrix1DT_double_t direction, double distance, SWIGTYPE_p_Matrix1DT_double_t result) {
    XmippDataJNI.Uproject_to_plane__SWIG_0(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(point), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(direction), distance, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(result));
  }

  public static void Uproject_to_plane(SWIGTYPE_p_Matrix1DT_double_t r, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t result) {
    XmippDataJNI.Uproject_to_plane__SWIG_1(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r), rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(result));
  }

  public static void Uproject_to_plane(SWIGTYPE_p_Matrix1DT_double_t r, SWIGTYPE_p_Matrix2DT_double_t euler, SWIGTYPE_p_Matrix1DT_double_t result) {
    XmippDataJNI.Uproject_to_plane__SWIG_2(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(euler), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(result));
  }

  public static double spherical_distance(SWIGTYPE_p_Matrix1DT_double_t r1, SWIGTYPE_p_Matrix1DT_double_t r2) {
    return XmippDataJNI.spherical_distance(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r1), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r2));
  }

  public static double point_line_distance_3D(SWIGTYPE_p_Matrix1DT_double_t p, SWIGTYPE_p_Matrix1DT_double_t a, SWIGTYPE_p_Matrix1DT_double_t v) {
    return XmippDataJNI.point_line_distance_3D(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(p), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(a), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(v));
  }

  public static double point_plane_distance_3D(SWIGTYPE_p_Matrix1DT_double_t p, SWIGTYPE_p_Matrix1DT_double_t a, SWIGTYPE_p_Matrix1DT_double_t v) {
    return XmippDataJNI.point_plane_distance_3D(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(p), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(a), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(v));
  }

  public static void least_squares_plane_fit(SWIGTYPE_p_std__vectorT_fit_point_t IN_points, SWIGTYPE_p_double plane_A, SWIGTYPE_p_double plane_B, SWIGTYPE_p_double plane_C) {
    XmippDataJNI.least_squares_plane_fit(SWIGTYPE_p_std__vectorT_fit_point_t.getCPtr(IN_points), SWIGTYPE_p_double.getCPtr(plane_A), SWIGTYPE_p_double.getCPtr(plane_B), SWIGTYPE_p_double.getCPtr(plane_C));
  }

  public static void least_squares_line_fit(SWIGTYPE_p_std__vectorT_fit_point2D_t IN_points, SWIGTYPE_p_double line_A, SWIGTYPE_p_double line_B) {
    XmippDataJNI.least_squares_line_fit(SWIGTYPE_p_std__vectorT_fit_point2D_t.getCPtr(IN_points), SWIGTYPE_p_double.getCPtr(line_A), SWIGTYPE_p_double.getCPtr(line_B));
  }

  public static void Bspline_model_fitting(SWIGTYPE_p_std__vectorT_fit_point_t IN_points, int SplineDegree, int l0, int lF, int m0, int mF, double h_x, double h_y, double x0, double y0, Bspline_model result) {
    XmippDataJNI.Bspline_model_fitting(SWIGTYPE_p_std__vectorT_fit_point_t.getCPtr(IN_points), SplineDegree, l0, lF, m0, mF, h_x, h_y, x0, y0, Bspline_model.getCPtr(result), result);
  }

  public static void rectangle_enclosing(SWIGTYPE_p_Matrix1DT_double_t v0, SWIGTYPE_p_Matrix1DT_double_t vF, SWIGTYPE_p_Matrix2DT_double_t V, SWIGTYPE_p_Matrix1DT_double_t corner1, SWIGTYPE_p_Matrix1DT_double_t corner2) {
    XmippDataJNI.rectangle_enclosing(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(v0), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(vF), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(V), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(corner1), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(corner2));
  }

  public static void box_enclosing(SWIGTYPE_p_Matrix1DT_double_t v0, SWIGTYPE_p_Matrix1DT_double_t vF, SWIGTYPE_p_Matrix2DT_double_t V, SWIGTYPE_p_Matrix1DT_double_t corner1, SWIGTYPE_p_Matrix1DT_double_t corner2) {
    XmippDataJNI.box_enclosing(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(v0), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(vF), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(V), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(corner1), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(corner2));
  }

  public static boolean point_inside_polygon(SWIGTYPE_p_std__vectorT_Matrix1DT_double_t_t polygon, SWIGTYPE_p_Matrix1DT_double_t point) {
    return XmippDataJNI.point_inside_polygon(SWIGTYPE_p_std__vectorT_Matrix1DT_double_t_t.getCPtr(polygon), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(point));
  }

  public static int line_plane_intersection(SWIGTYPE_p_Matrix1DT_double_t normal_plane, SWIGTYPE_p_Matrix1DT_double_t vector_line, SWIGTYPE_p_Matrix1DT_double_t intersection_point, SWIGTYPE_p_Matrix1DT_double_t point_line, double point_plane_at_x_y_zero) {
    return XmippDataJNI.line_plane_intersection__SWIG_0(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(normal_plane), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(vector_line), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(intersection_point), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(point_line), point_plane_at_x_y_zero);
  }

  public static int line_plane_intersection(SWIGTYPE_p_Matrix1DT_double_t normal_plane, SWIGTYPE_p_Matrix1DT_double_t vector_line, SWIGTYPE_p_Matrix1DT_double_t intersection_point, SWIGTYPE_p_Matrix1DT_double_t point_line) {
    return XmippDataJNI.line_plane_intersection__SWIG_1(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(normal_plane), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(vector_line), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(intersection_point), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(point_line));
  }

  public static void Euler_angles2matrix(double a, double b, double g, SWIGTYPE_p_Matrix2DT_double_t A) {
    XmippDataJNI.Euler_angles2matrix(a, b, g, SWIGTYPE_p_Matrix2DT_double_t.getCPtr(A));
  }

  public static double Euler_distanceBetweenMatrices(SWIGTYPE_p_Matrix2DT_double_t E1, SWIGTYPE_p_Matrix2DT_double_t E2) {
    return XmippDataJNI.Euler_distanceBetweenMatrices(SWIGTYPE_p_Matrix2DT_double_t.getCPtr(E1), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(E2));
  }

  public static void Euler_Angles_after_compresion(double rot, double tilt, double psi, SWIGTYPE_p_double new_rot, SWIGTYPE_p_double new_tilt, SWIGTYPE_p_double new_psi, SWIGTYPE_p_Matrix2DT_double_t D) {
    XmippDataJNI.Euler_Angles_after_compresion(rot, tilt, psi, SWIGTYPE_p_double.getCPtr(new_rot), SWIGTYPE_p_double.getCPtr(new_tilt), SWIGTYPE_p_double.getCPtr(new_psi), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(D));
  }

  public static void Euler_direction(double alpha, double beta, double gamma, SWIGTYPE_p_Matrix1DT_double_t v) {
    XmippDataJNI.Euler_direction(alpha, beta, gamma, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(v));
  }

  public static void Euler_direction2angles(SWIGTYPE_p_Matrix1DT_double_t v, SWIGTYPE_p_double alpha, SWIGTYPE_p_double beta, SWIGTYPE_p_double gamma) {
    XmippDataJNI.Euler_direction2angles(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(v), SWIGTYPE_p_double.getCPtr(alpha), SWIGTYPE_p_double.getCPtr(beta), SWIGTYPE_p_double.getCPtr(gamma));
  }

  public static void Euler_matrix2angles(SWIGTYPE_p_Matrix2DT_double_t A, SWIGTYPE_p_double alpha, SWIGTYPE_p_double beta, SWIGTYPE_p_double gamma) {
    XmippDataJNI.Euler_matrix2angles(SWIGTYPE_p_Matrix2DT_double_t.getCPtr(A), SWIGTYPE_p_double.getCPtr(alpha), SWIGTYPE_p_double.getCPtr(beta), SWIGTYPE_p_double.getCPtr(gamma));
  }

  public static void Euler_up_down(double rot, double tilt, double psi, SWIGTYPE_p_double newrot, SWIGTYPE_p_double newtilt, SWIGTYPE_p_double newpsi) {
    XmippDataJNI.Euler_up_down(rot, tilt, psi, SWIGTYPE_p_double.getCPtr(newrot), SWIGTYPE_p_double.getCPtr(newtilt), SWIGTYPE_p_double.getCPtr(newpsi));
  }

  public static void Euler_another_set(double rot, double tilt, double psi, SWIGTYPE_p_double newrot, SWIGTYPE_p_double newtilt, SWIGTYPE_p_double newpsi) {
    XmippDataJNI.Euler_another_set(rot, tilt, psi, SWIGTYPE_p_double.getCPtr(newrot), SWIGTYPE_p_double.getCPtr(newtilt), SWIGTYPE_p_double.getCPtr(newpsi));
  }

  public static void Euler_mirrorY(double rot, double tilt, double psi, SWIGTYPE_p_double newrot, SWIGTYPE_p_double newtilt, SWIGTYPE_p_double newpsi) {
    XmippDataJNI.Euler_mirrorY(rot, tilt, psi, SWIGTYPE_p_double.getCPtr(newrot), SWIGTYPE_p_double.getCPtr(newtilt), SWIGTYPE_p_double.getCPtr(newpsi));
  }

  public static void Euler_mirrorX(double rot, double tilt, double psi, SWIGTYPE_p_double newrot, SWIGTYPE_p_double newtilt, SWIGTYPE_p_double newpsi) {
    XmippDataJNI.Euler_mirrorX(rot, tilt, psi, SWIGTYPE_p_double.getCPtr(newrot), SWIGTYPE_p_double.getCPtr(newtilt), SWIGTYPE_p_double.getCPtr(newpsi));
  }

  public static void Euler_mirrorXY(double rot, double tilt, double psi, SWIGTYPE_p_double newrot, SWIGTYPE_p_double newtilt, SWIGTYPE_p_double newpsi) {
    XmippDataJNI.Euler_mirrorXY(rot, tilt, psi, SWIGTYPE_p_double.getCPtr(newrot), SWIGTYPE_p_double.getCPtr(newtilt), SWIGTYPE_p_double.getCPtr(newpsi));
  }

  public static void Euler_apply_transf(SWIGTYPE_p_Matrix2DT_double_t L, SWIGTYPE_p_Matrix2DT_double_t R, double rot, double tilt, double psi, SWIGTYPE_p_double newrot, SWIGTYPE_p_double newtilt, SWIGTYPE_p_double newpsi) {
    XmippDataJNI.Euler_apply_transf(SWIGTYPE_p_Matrix2DT_double_t.getCPtr(L), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(R), rot, tilt, psi, SWIGTYPE_p_double.getCPtr(newrot), SWIGTYPE_p_double.getCPtr(newtilt), SWIGTYPE_p_double.getCPtr(newpsi));
  }

  public static SWIGTYPE_p_Matrix2DT_double_t Euler_rotation3DMatrix(double rot, double tilt, double psi) {
    return new SWIGTYPE_p_Matrix2DT_double_t(XmippDataJNI.Euler_rotation3DMatrix(rot, tilt, psi), true);
  }

  public static void Euler_rotate(MultidimArrayd V, double rot, double tilt, double psi, MultidimArrayd result) {
    XmippDataJNI.Euler_rotate(MultidimArrayd.getCPtr(V), V, rot, tilt, psi, MultidimArrayd.getCPtr(result), result);
  }

  public static void computeCircleAroundE(SWIGTYPE_p_Matrix2DT_double_t E, double angCircle, double angStep, SWIGTYPE_p_std__vectorT_double_t outputEulerAngles) {
    XmippDataJNI.computeCircleAroundE(SWIGTYPE_p_Matrix2DT_double_t.getCPtr(E), angCircle, angStep, SWIGTYPE_p_std__vectorT_double_t.getCPtr(outputEulerAngles));
  }

  public static double intersection_unit_sphere(SWIGTYPE_p_Matrix1DT_double_t u, SWIGTYPE_p_Matrix1DT_double_t r) {
    return XmippDataJNI.intersection_unit_sphere(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(u), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r));
  }

  public static double intersection_unit_cylinder(SWIGTYPE_p_Matrix1DT_double_t u, SWIGTYPE_p_Matrix1DT_double_t r) {
    return XmippDataJNI.intersection_unit_cylinder(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(u), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r));
  }

  public static double intersection_unit_cube(SWIGTYPE_p_Matrix1DT_double_t u, SWIGTYPE_p_Matrix1DT_double_t r) {
    return XmippDataJNI.intersection_unit_cube(SWIGTYPE_p_Matrix1DT_double_t.getCPtr(u), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(r));
  }

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

public class ImageDouble {

    protected long swigCPtr;
    protected boolean swigCMemOwn;

    protected ImageDouble(long cPtr, boolean cMemoryOwn) {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = cPtr;
    }

    protected static long getCPtr(ImageDouble obj) {
        return (obj == null) ? 0 : obj.swigCPtr;
    }

    protected void finalize() {
        delete();
    }

    public synchronized void delete() {
        if (swigCPtr != 0) {
            if (swigCMemOwn) {
                swigCMemOwn = false;
                XmippDataJNI.delete_ImageDouble(swigCPtr);
            }
            swigCPtr = 0;
        }
    }

    public void setData(MultidimArrayd value) {
        XmippDataJNI.ImageDouble_data_set(swigCPtr, this, MultidimArrayd.getCPtr(value), value);
    }

    public MultidimArrayd getData() {
        long cPtr = XmippDataJNI.ImageDouble_data_get(swigCPtr, this);
        return (cPtr == 0) ? null : new MultidimArrayd(cPtr, false);
    }

    public void setMD(SWIGTYPE_p_MetaData value) {
        XmippDataJNI.ImageDouble_MD_set(swigCPtr, this, SWIGTYPE_p_MetaData.getCPtr(value));
    }

    public SWIGTYPE_p_MetaData getMD() {
        return new SWIGTYPE_p_MetaData(XmippDataJNI.ImageDouble_MD_get(swigCPtr, this), true);
    }

    public void setMDMainHeader(SWIGTYPE_p_MetaData value) {
        XmippDataJNI.ImageDouble_MDMainHeader_set(swigCPtr, this, SWIGTYPE_p_MetaData.getCPtr(value));
    }

    public SWIGTYPE_p_MetaData getMDMainHeader() {
        return new SWIGTYPE_p_MetaData(XmippDataJNI.ImageDouble_MDMainHeader_get(swigCPtr, this), true);
    }

    public ImageDouble() {
        this(XmippDataJNI.new_ImageDouble__SWIG_0(), true);
    }

    public ImageDouble(int Xdim, int Ydim, int Zdim, int Ndim) {
        this(XmippDataJNI.new_ImageDouble__SWIG_1(Xdim, Ydim, Zdim, Ndim), true);
    }

    public ImageDouble(int Xdim, int Ydim, int Zdim) {
        this(XmippDataJNI.new_ImageDouble__SWIG_2(Xdim, Ydim, Zdim), true);
    }

    public ImageDouble(int Xdim, int Ydim) {
        this(XmippDataJNI.new_ImageDouble__SWIG_3(Xdim, Ydim), true);
    }

    public void clear() {
        XmippDataJNI.ImageDouble_clear(swigCPtr, this);
    }

    public void clearHeader() {
        XmippDataJNI.ImageDouble_clearHeader(swigCPtr, this);
    }

    public boolean isComplexT() {
        return XmippDataJNI.ImageDouble_isComplexT(swigCPtr, this);
    }

    public boolean isComplex() {
        return XmippDataJNI.ImageDouble_isComplex(swigCPtr, this);
    }

    public void setPixel(int i, int j, double v) {
        XmippDataJNI.ImageDouble_setPixel(swigCPtr, this, i, j, v);
    }

    public double getPixel(int i, int j) {
        return XmippDataJNI.ImageDouble_getPixel(swigCPtr, this, i, j);
    }

    public boolean isImage(FileName name) {
        return XmippDataJNI.ImageDouble_isImage(swigCPtr, this, FileName.getCPtr(name), name);
    }

    public boolean isRealImage(FileName name) {
        return XmippDataJNI.ImageDouble_isRealImage(swigCPtr, this, FileName.getCPtr(name), name);
    }

    public boolean isComplexImage(FileName name) {
        return XmippDataJNI.ImageDouble_isComplexImage(swigCPtr, this, FileName.getCPtr(name), name);
    }

    public void rename(FileName name) {
        XmippDataJNI.ImageDouble_rename(swigCPtr, this, FileName.getCPtr(name), name);
    }

    public int read(FileName name, boolean readdata, int select_img, boolean apply_geo, boolean only_apply_shifts, SWIGTYPE_p_MetaData docFilePtr, SWIGTYPE_p_std__vectorT_MDLabel_t activeLabelsPtr, boolean mapData) {
        return XmippDataJNI.ImageDouble_read__SWIG_0(swigCPtr, this, FileName.getCPtr(name), name, readdata, select_img, apply_geo, only_apply_shifts, SWIGTYPE_p_MetaData.getCPtr(docFilePtr), SWIGTYPE_p_std__vectorT_MDLabel_t.getCPtr(activeLabelsPtr), mapData);
    }

    public int read(FileName name, boolean readdata, int select_img, boolean apply_geo, boolean only_apply_shifts, SWIGTYPE_p_MetaData docFilePtr, SWIGTYPE_p_std__vectorT_MDLabel_t activeLabelsPtr) {
        return XmippDataJNI.ImageDouble_read__SWIG_1(swigCPtr, this, FileName.getCPtr(name), name, readdata, select_img, apply_geo, only_apply_shifts, SWIGTYPE_p_MetaData.getCPtr(docFilePtr), SWIGTYPE_p_std__vectorT_MDLabel_t.getCPtr(activeLabelsPtr));
    }

    public int read(FileName name, boolean readdata, int select_img, boolean apply_geo, boolean only_apply_shifts, SWIGTYPE_p_MetaData docFilePtr) {
        return XmippDataJNI.ImageDouble_read__SWIG_2(swigCPtr, this, FileName.getCPtr(name), name, readdata, select_img, apply_geo, only_apply_shifts, SWIGTYPE_p_MetaData.getCPtr(docFilePtr));
    }

    public int read(FileName name, boolean readdata, int select_img, boolean apply_geo, boolean only_apply_shifts) {
        return XmippDataJNI.ImageDouble_read__SWIG_3(swigCPtr, this, FileName.getCPtr(name), name, readdata, select_img, apply_geo, only_apply_shifts);
    }

    public int read(FileName name, boolean readdata, int select_img, boolean apply_geo) {
        return XmippDataJNI.ImageDouble_read__SWIG_4(swigCPtr, this, FileName.getCPtr(name), name, readdata, select_img, apply_geo);
    }

    public int read(FileName name, boolean readdata, int select_img) {
        return XmippDataJNI.ImageDouble_read__SWIG_5(swigCPtr, this, FileName.getCPtr(name), name, readdata, select_img);
    }

    public int read(FileName name, boolean readdata) {
        return XmippDataJNI.ImageDouble_read__SWIG_6(swigCPtr, this, FileName.getCPtr(name), name, readdata);
    }

    public int read(FileName name) {
        return XmippDataJNI.ImageDouble_read__SWIG_7(swigCPtr, this, FileName.getCPtr(name), name);
    }

    public void write(FileName name, int select_img, boolean isStack, int mode) {
        XmippDataJNI.ImageDouble_write__SWIG_0(swigCPtr, this, FileName.getCPtr(name), name, select_img, isStack, mode);
    }

    public void write(FileName name, int select_img, boolean isStack) {
        XmippDataJNI.ImageDouble_write__SWIG_1(swigCPtr, this, FileName.getCPtr(name), name, select_img, isStack);
    }

    public void write(FileName name, int select_img) {
        XmippDataJNI.ImageDouble_write__SWIG_2(swigCPtr, this, FileName.getCPtr(name), name, select_img);
    }

    public void write(FileName name) {
        XmippDataJNI.ImageDouble_write__SWIG_3(swigCPtr, this, FileName.getCPtr(name), name);
    }

    public void write() {
        XmippDataJNI.ImageDouble_write__SWIG_4(swigCPtr, this);
    }

    public void castPage2T(String page, SWIGTYPE_p_double ptrDest, DataType datatype, long pageSize) {
        XmippDataJNI.ImageDouble_castPage2T(swigCPtr, this, page, SWIGTYPE_p_double.getCPtr(ptrDest), datatype.swigValue(), pageSize);
    }

    public void castPage2Datatype(SWIGTYPE_p_double srcPtr, String page, DataType datatype, long pageSize) {
        XmippDataJNI.ImageDouble_castPage2Datatype(swigCPtr, this, SWIGTYPE_p_double.getCPtr(srcPtr), page, datatype.swigValue(), pageSize);
    }

    public boolean castMmap2T(DataType datatype) {
        return XmippDataJNI.ImageDouble_castMmap2T(swigCPtr, this, datatype.swigValue());
    }

    public void writePageAsDatatype(SWIGTYPE_p_FILE fimg, DataType datatype, long datasize_n) {
        XmippDataJNI.ImageDouble_writePageAsDatatype(swigCPtr, this, SWIGTYPE_p_FILE.getCPtr(fimg), datatype.swigValue(), datasize_n);
    }

    public void swapPage(String page, long pageNrElements, DataType datatype) {
        XmippDataJNI.ImageDouble_swapPage(swigCPtr, this, page, pageNrElements, datatype.swigValue());
    }

    public void readData(SWIGTYPE_p_FILE fimg, int select_img, DataType datatype, long pad) {
        XmippDataJNI.ImageDouble_readData(swigCPtr, this, SWIGTYPE_p_FILE.getCPtr(fimg), select_img, datatype.swigValue(), pad);
    }

    public FileName name() {
        return new FileName(XmippDataJNI.ImageDouble_name(swigCPtr, this), false);
    }

    public void getDimensions(SWIGTYPE_p_int Xdim, SWIGTYPE_p_int Ydim, SWIGTYPE_p_int Zdim, SWIGTYPE_p_int Ndim) {
        XmippDataJNI.ImageDouble_getDimensions(swigCPtr, this, SWIGTYPE_p_int.getCPtr(Xdim), SWIGTYPE_p_int.getCPtr(Ydim), SWIGTYPE_p_int.getCPtr(Zdim), SWIGTYPE_p_int.getCPtr(Ndim));
    }

    public long getSize() {
        return XmippDataJNI.ImageDouble_getSize(swigCPtr, this);
    }

    public void getHeaderInfo(SWIGTYPE_p_unsigned_long _offset, SWIGTYPE_p_int _swap) {
        XmippDataJNI.ImageDouble_getHeaderInfo(swigCPtr, this, SWIGTYPE_p_unsigned_long.getCPtr(_offset), SWIGTYPE_p_int.getCPtr(_swap));
    }

    public boolean individualContainsLabel(SWIGTYPE_p_MDLabel label) {
        return XmippDataJNI.ImageDouble_individualContainsLabel(swigCPtr, this, SWIGTYPE_p_MDLabel.getCPtr(label));
    }

    public boolean mainContainsLabel(SWIGTYPE_p_MDLabel label) {
        return XmippDataJNI.ImageDouble_mainContainsLabel(swigCPtr, this, SWIGTYPE_p_MDLabel.getCPtr(label));
    }

    public double rot(int n) {
        return XmippDataJNI.ImageDouble_rot__SWIG_0(swigCPtr, this, n);
    }

    public double rot() {
        return XmippDataJNI.ImageDouble_rot__SWIG_1(swigCPtr, this);
    }

    public double tilt(int n) {
        return XmippDataJNI.ImageDouble_tilt__SWIG_0(swigCPtr, this, n);
    }

    public double tilt() {
        return XmippDataJNI.ImageDouble_tilt__SWIG_1(swigCPtr, this);
    }

    public double psi(int n) {
        return XmippDataJNI.ImageDouble_psi__SWIG_0(swigCPtr, this, n);
    }

    public double psi() {
        return XmippDataJNI.ImageDouble_psi__SWIG_1(swigCPtr, this);
    }

    public double Xoff(int n) {
        return XmippDataJNI.ImageDouble_Xoff__SWIG_0(swigCPtr, this, n);
    }

    public double Xoff() {
        return XmippDataJNI.ImageDouble_Xoff__SWIG_1(swigCPtr, this);
    }

    public double Yoff(int n) {
        return XmippDataJNI.ImageDouble_Yoff__SWIG_0(swigCPtr, this, n);
    }

    public double Yoff() {
        return XmippDataJNI.ImageDouble_Yoff__SWIG_1(swigCPtr, this);
    }

    public double Zoff(int n) {
        return XmippDataJNI.ImageDouble_Zoff__SWIG_0(swigCPtr, this, n);
    }

    public double Zoff() {
        return XmippDataJNI.ImageDouble_Zoff__SWIG_1(swigCPtr, this);
    }

    public double weight(int n) {
        return XmippDataJNI.ImageDouble_weight__SWIG_0(swigCPtr, this, n);
    }

    public double weight() {
        return XmippDataJNI.ImageDouble_weight__SWIG_1(swigCPtr, this);
    }

    public boolean flip(int n) {
        return XmippDataJNI.ImageDouble_flip__SWIG_0(swigCPtr, this, n);
    }

    public boolean flip() {
        return XmippDataJNI.ImageDouble_flip__SWIG_1(swigCPtr, this);
    }

    public boolean samplingRateX(int n) {
        return XmippDataJNI.ImageDouble_samplingRateX__SWIG_0(swigCPtr, this, n);
    }

    public boolean samplingRateX() {
        return XmippDataJNI.ImageDouble_samplingRateX__SWIG_1(swigCPtr, this);
    }

    public void setName(FileName _filename) {
        XmippDataJNI.ImageDouble_setName(swigCPtr, this, FileName.getCPtr(_filename), _filename);
    }

    public void setEulerAngles(double rot, double tilt, double psi, int n) {
        XmippDataJNI.ImageDouble_setEulerAngles__SWIG_0(swigCPtr, this, rot, tilt, psi, n);
    }

    public void setEulerAngles(double rot, double tilt, double psi) {
        XmippDataJNI.ImageDouble_setEulerAngles__SWIG_1(swigCPtr, this, rot, tilt, psi);
    }

    public void getEulerAngles(SWIGTYPE_p_double rot, SWIGTYPE_p_double tilt, SWIGTYPE_p_double psi, int n) {
        XmippDataJNI.ImageDouble_getEulerAngles__SWIG_0(swigCPtr, this, SWIGTYPE_p_double.getCPtr(rot), SWIGTYPE_p_double.getCPtr(tilt), SWIGTYPE_p_double.getCPtr(psi), n);
    }

    public void getEulerAngles(SWIGTYPE_p_double rot, SWIGTYPE_p_double tilt, SWIGTYPE_p_double psi) {
        XmippDataJNI.ImageDouble_getEulerAngles__SWIG_1(swigCPtr, this, SWIGTYPE_p_double.getCPtr(rot), SWIGTYPE_p_double.getCPtr(tilt), SWIGTYPE_p_double.getCPtr(psi));
    }

    public void setRot(double rot, int n) {
        XmippDataJNI.ImageDouble_setRot__SWIG_0(swigCPtr, this, rot, n);
    }

    public void setRot(double rot) {
        XmippDataJNI.ImageDouble_setRot__SWIG_1(swigCPtr, this, rot);
    }

    public void setTilt(double tilt, int n) {
        XmippDataJNI.ImageDouble_setTilt__SWIG_0(swigCPtr, this, tilt, n);
    }

    public void setTilt(double tilt) {
        XmippDataJNI.ImageDouble_setTilt__SWIG_1(swigCPtr, this, tilt);
    }

    public void setPsi(double psi, int n) {
        XmippDataJNI.ImageDouble_setPsi__SWIG_0(swigCPtr, this, psi, n);
    }

    public void setPsi(double psi) {
        XmippDataJNI.ImageDouble_setPsi__SWIG_1(swigCPtr, this, psi);
    }

    public void setShifts(double xoff, double yoff, double zoff, int n) {
        XmippDataJNI.ImageDouble_setShifts__SWIG_0(swigCPtr, this, xoff, yoff, zoff, n);
    }

    public void setShifts(double xoff, double yoff, double zoff) {
        XmippDataJNI.ImageDouble_setShifts__SWIG_1(swigCPtr, this, xoff, yoff, zoff);
    }

    public void setShifts(double xoff, double yoff) {
        XmippDataJNI.ImageDouble_setShifts__SWIG_2(swigCPtr, this, xoff, yoff);
    }

    public void setXoff(double xoff, int n) {
        XmippDataJNI.ImageDouble_setXoff__SWIG_0(swigCPtr, this, xoff, n);
    }

    public void setXoff(double xoff) {
        XmippDataJNI.ImageDouble_setXoff__SWIG_1(swigCPtr, this, xoff);
    }

    public void setYoff(double yoff, int n) {
        XmippDataJNI.ImageDouble_setYoff__SWIG_0(swigCPtr, this, yoff, n);
    }

    public void setYoff(double yoff) {
        XmippDataJNI.ImageDouble_setYoff__SWIG_1(swigCPtr, this, yoff);
    }

    public void setZoff(double zoff, int n) {
        XmippDataJNI.ImageDouble_setZoff__SWIG_0(swigCPtr, this, zoff, n);
    }

    public void setZoff(double zoff) {
        XmippDataJNI.ImageDouble_setZoff__SWIG_1(swigCPtr, this, zoff);
    }

    public void setFlip(boolean flip, int n) {
        XmippDataJNI.ImageDouble_setFlip__SWIG_0(swigCPtr, this, flip, n);
    }

    public void setFlip(boolean flip) {
        XmippDataJNI.ImageDouble_setFlip__SWIG_1(swigCPtr, this, flip);
    }

    public void setWeight(double weight, int n) {
        XmippDataJNI.ImageDouble_setWeight__SWIG_0(swigCPtr, this, weight, n);
    }

    public void setWeight(double weight) {
        XmippDataJNI.ImageDouble_setWeight__SWIG_1(swigCPtr, this, weight);
    }

    public SWIGTYPE_p_Matrix2DT_double_t getTransformationMatrix(boolean only_apply_shifts, int n) {
        return new SWIGTYPE_p_Matrix2DT_double_t(XmippDataJNI.ImageDouble_getTransformationMatrix__SWIG_0(swigCPtr, this, only_apply_shifts, n), true);
    }

    public SWIGTYPE_p_Matrix2DT_double_t getTransformationMatrix(boolean only_apply_shifts) {
        return new SWIGTYPE_p_Matrix2DT_double_t(XmippDataJNI.ImageDouble_getTransformationMatrix__SWIG_1(swigCPtr, this, only_apply_shifts), true);
    }

    public SWIGTYPE_p_Matrix2DT_double_t getTransformationMatrix() {
        return new SWIGTYPE_p_Matrix2DT_double_t(XmippDataJNI.ImageDouble_getTransformationMatrix__SWIG_2(swigCPtr, this), true);
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelImageOperations.java
 *
 * Created on 26-abr-2010, 11:05:08
 */
package browser.windows;

import browser.LABELS;
import ij.IJ;
import ij.ImagePlus;
import ij.gui.Roi;
import ij.gui.Toolbar;
import java.awt.Panel;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

/**
 *
 * @author Juanjo Vega
 */
public class PanelImageOperations extends Panel implements ItemListener {

    protected ImagePlus ip;

    /** Creates new form PanelImageOperations */
    public PanelImageOperations(ImagePlus ip) {
        this.ip = ip;

        initComponents();

        cFlip.add(LABELS.OPERATION_SELECT_OPERATION);
        cFlip.add(LABELS.OPERATION_FLIP_VERTICAL);
        cFlip.add(LABELS.OPERATION_FLIP_HORIZONTAL);

        cRotate.add(LABELS.OPERATION_SELECT_OPERATION);
        cRotate.add(LABELS.OPERATION_ROTATE_LEFT);
        cRotate.add(LABELS.OPERATION_ROTATE_RIGHT);

        cInfo.add(LABELS.OPERATION_SELECT_OPERATION);
        cInfo.add(LABELS.OPERATION_HISTOGRAM);
        cInfo.add(LABELS.OPERATION_PLOT_PROFILE);
        cInfo.add(LABELS.OPERATION_MEASUREMENTS);

        cProcess.add(LABELS.OPERATION_SELECT_OPERATION);
        cProcess.add(LABELS.OPERATION_BC);
        cProcess.add(LABELS.OPERATION_THRESHOLD);
        cProcess.add(LABELS.OPERATION_SUBTRACTBG);
        cProcess.add(LABELS.OPERATION_GAUSSIAN_BLUR);
        cProcess.add(LABELS.OPERATION_FFT);
        cProcess.add(LABELS.OPERATION_FFT_BAND_PASS_FILTER);

        cFlip.addItemListener(this);
        cRotate.addItemListener(this);
        cInfo.addItemListener(this);
        cProcess.addItemListener(this);
    }

    public void itemStateChanged(ItemEvent e) {
        try {
            if (e.getSource() == cFlip) {
                switch (cFlip.getSelectedIndex()) {
                    case 1:
                        ip.getProcessor().flipVertical();
                        break;
                    case 2:
                        ip.getProcessor().flipHorizontal();
                }
            } else if (e.getSource() == cRotate) {
                switch (cRotate.getSelectedIndex()) {
                    case 1:
                        IJ.run("Rotate 90 Degrees Left");
                        break;
                    case 2:
                        IJ.run("Rotate 90 Degrees Right");
                }
            } else if (e.getSource() == cInfo) {
                switch (cInfo.getSelectedIndex()) {
                    case 1:
                        IJ.run("Histogram");
                        break;
                    case 2:
                        // Check if there is a line selected, so , if not, it
                        // selects the right tool for the next time.
                        Roi roi = ip.getRoi();
                        if (roi == null || !roi.isLine()) {
                            IJ.setTool(Toolbar.LINE);
                        }

                        IJ.run("Plot Profile");
                        break;
                    case 3:
                        IJ.run("Set Measurements...");
                        IJ.run("Measure");
                }
            } else if (e.getSource() == cProcess) {
                switch (cProcess.getSelectedIndex()) {
                    case 1:
                        IJ.run("Brightness/Contrast...");
                        break;

                    case 2:
                        IJ.run("Threshold...");
                        break;
                    case 3:
                        IJ.run("Subtract Background...");
                        break;
                    case 4:
                        IJ.run("Gaussian Blur...");
                        break;
                    case 5:
                        IJ.run("FFT");
                        break;
                    case 6:
                        IJ.run("Bandpass Filter...");//, "filter_large=40 filter_small=3 suppress=None tolerance=5 autoscale saturate");
                }
            }
        } catch (Exception ex) {
        } finally {
            cFlip.select(0);
            cRotate.select(0);
            cInfo.select(0);
            cProcess.select(0);

            ip.updateAndDraw();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lFlip = new java.awt.Label();
        cFlip = new java.awt.Choice();
        lRotate = new java.awt.Label();
        cRotate = new java.awt.Choice();
        lInfo = new java.awt.Label();
        cInfo = new java.awt.Choice();
        lProcess = new java.awt.Label();
        cProcess = new java.awt.Choice();

        setLayout(new java.awt.GridBagLayout());

        lFlip.setText(LABELS.LABEL_FLIP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lFlip, gridBagConstraints);
        add(cFlip, new java.awt.GridBagConstraints());

        lRotate.setText(LABELS.LABEL_ROTATE);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lRotate, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(cRotate, gridBagConstraints);

        lInfo.setText(LABELS.LABEL_INFO);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lInfo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        add(cInfo, gridBagConstraints);

        lProcess.setText(LABELS.LABEL_PROCESS);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(lProcess, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        add(cProcess, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice cFlip;
    private java.awt.Choice cInfo;
    private java.awt.Choice cProcess;
    private java.awt.Choice cRotate;
    private java.awt.Label lFlip;
    private java.awt.Label lInfo;
    private java.awt.Label lProcess;
    private java.awt.Label lRotate;
    // End of variables declaration//GEN-END:variables
}

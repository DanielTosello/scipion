/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogXmippFilesList.java
 *
 * Created on Aug 2, 2011, 5:56:47 PM
 */
package browser.filebrowsers;

import browser.DEBUG;
import browser.LABELS;
import browser.commandline.Parameters;
import browser.commandline.COMMAND_PARAMETERS;
import browser.imageitems.listitems.FileItem;
import browser.windows.ImagesWindowFactory;
import java.awt.BorderLayout;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;

/**
 *
 * @author Juanjo Vega
 */
public class JDialogXmippFilesList extends javax.swing.JFrame {

    final static String SOT = "__STARTED__";
    final static String EOT = "__END__";
    protected Parameters parameters;
    protected JPanelXmippBrowser panelXmippBrowser;

    public JDialogXmippFilesList(String directory, Parameters parameters) {
        super();

        this.parameters = parameters;

        // Tells listener that it has been started.
        send(new Object[]{SOT}, false);

        if (parameters.selectionType.compareTo(COMMAND_PARAMETERS.SELECTION_TYPE_FILE) == 0) {
            setTitle(LABELS.TITLE_XMIPP_FILE_SELECTOR_FILE);
        } else if (parameters.selectionType.compareTo(COMMAND_PARAMETERS.SELECTION_TYPE_DIR) == 0) {
            setTitle(LABELS.TITLE_XMIPP_FILE_SELECTOR_DIR);
        } else {
            setTitle(LABELS.TITLE_XMIPP_FILE_SELECTOR_ANY);
        }

        initComponents();

        ImagesWindowFactory.setConvenientSize(this);
        this.setLocationRelativeTo(null);

        setPanel(directory, parameters);
    }

    protected void setPanel(final String directory, final Parameters parameters) {
        ImagesWindowFactory.blockGUI(getRootPane(), "Building list...");

        Thread t = new Thread(new Runnable() {

            public void run() {
                panelXmippBrowser = createPanel(parameters);

                add(panelXmippBrowser, BorderLayout.CENTER);

                pack();

                ImagesWindowFactory.releaseGUI(getRootPane());
            }
        });

        t.start();
    }

    protected JPanelXmippBrowser createPanel(Parameters parameters) {
        panelXmippBrowser = new JPanelXmippBrowser(parameters.directory, parameters.filter);
        panelXmippBrowser.setSingleSelection(parameters.singleSelection);

        return panelXmippBrowser;
    }

    protected void button1Clicked() {
        if (sendSelectedFiles()) {
            dispose();
        }

//        DEBUG.printMessage("Exiting...");
        System.exit(0);
    }

    protected void button2Clicked() {
        cancel();
    }

    protected void cancel() {
        send(null, true);
        dispose();

//        DEBUG.printMessage("Exiting...");
        System.exit(0);
    }

    protected boolean sendSelectedFiles() {
        Object objs[] = panelXmippBrowser.getSelectedValues();
        ArrayList<FileItem> list = new ArrayList<FileItem>();

        for (int i = 0; i < objs.length; i++) {
            FileItem item = (FileItem) objs[i];

            if (acceptFile(item)) {
                list.add(item);
            }
        }

        return send(list.toArray(), true);
    }

    boolean acceptFile(FileItem item) {
        if (parameters.selectionType.compareTo(COMMAND_PARAMETERS.SELECTION_TYPE_ANY) == 0) {
            return true;
        } else if (item.isDirectory()) {
            return parameters.selectionType.compareTo(COMMAND_PARAMETERS.SELECTION_TYPE_DIR) == 0;
        } else {
            return parameters.selectionType.compareTo(COMMAND_PARAMETERS.SELECTION_TYPE_FILE) == 0;
        }
    }

    final protected boolean send(Object items[], boolean end) {
        try {
            Socket socket = new Socket(InetAddress.getByName("127.0.0.1"), parameters.port);

            // Get streams.
            OutputStreamWriter output = new OutputStreamWriter(socket.getOutputStream());
            output.flush();

            if (items != null) {
                for (int i = 0; i < items.length; i++) {
                    output.write(items[i].toString() + "\n");
                }
            }

            if (end) {
                output.write(EOT + "\n");
            }

            output.flush();

            // Closes connection.
            output.close();
            socket.close();

            return true;
        } catch (Exception ex) {
            DEBUG.printMessage("SEND Exception: " + ex.getMessage());
        }

        return false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpButtons = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jbOk.setText(LABELS.BUTTON_OK);
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jpButtons.add(jbOk);

        jbCancel.setText(LABELS.BUTTON_CANCEL);
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jpButtons.add(jbCancel);

        getContentPane().add(jpButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        button1Clicked();
}//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        button2Clicked();
}//GEN-LAST:event_jbCancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cancel();
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton jbCancel;
    protected javax.swing.JButton jbOk;
    protected javax.swing.JPanel jpButtons;
    // End of variables declaration//GEN-END:variables
}

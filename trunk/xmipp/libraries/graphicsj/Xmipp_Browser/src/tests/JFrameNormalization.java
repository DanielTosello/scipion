/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrameNormalization.java
 *
 * Created on Aug 4, 2010, 3:19:02 PM
 */
package tests;

import browser.table.normalization.JPanelNormalization;
import browser.table.normalization.iNormalizeListener;
import ij.IJ;
import ij.ImagePlus;
import ij.process.FloatStatistics;
import ij.process.ShortProcessor;
import java.awt.BorderLayout;
import java.util.Vector;
import javax.swing.JFrame;

/**
 *
 * @author Juanjo Vega
 */
public class JFrameNormalization extends JFrame implements iNormalizeListener {

    /** Creates new form JFrameNormalization */
    public JFrameNormalization() {
        super();

        initComponents();

        add(new JPanelNormalization(this), BorderLayout.CENTER);
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Normalization");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        String dir = "/home/juanjo/Desktop/selfiles/images";
        String fileNames[] = {
            /*            "12205_000001.xmp",
            "12205_000002.xmp",
            "12205_000003.xmp",*/
            "12205_000004.xmp",
            "12205_000005.xmp"};

        final Vector<ImagePlus> images = new Vector<ImagePlus>();
        for (int i = 0; i < fileNames.length; i++) {
            images.add(IJ.openImage(dir + "/" + fileNames[i]));
            images.lastElement().show();
        }

        // Gets histograms
        Vector<int[]> histograms = new Vector<int[]>();
        for (int i = 0; i < images.size(); i++) {
            FloatStatistics statistics = new FloatStatistics(images.elementAt(i).getProcessor());

            int[] histogram = statistics.histogram;
            histograms.add(histogram);
            //images.elementAt(i).setProcessor("", converter.convertToFloat(ctable));

            short[] pixels = new short[histogram.length];
            for (int j = 0; j < histogram.length; j++) {
                pixels[j] = (short) histogram[j];
            }

            ShortProcessor processor = new ShortProcessor(256, 1);
            processor.setPixels(pixels);
            ImagePlus histogram_ = new ImagePlus();
            histogram_.setProcessor(i + "-Histogram", processor);
            histogram_.show();
        }

        //IJ.run("Brightness/Contrast...");

        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
        
        public void run() {
        new JFrameNormalization().setVisible(true);
        }
        });*/
    }

    public void normalize(double min, double max) {
        System.out.println(" *** Normalizing: m=" + min + ", M=" + max);
    }

    public void normalizeAuto() {
        System.out.println(" *** Normalizing AUTO");
    }

    public void disableNormalization() {
        System.out.println(" *** Disabling Normalization ");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

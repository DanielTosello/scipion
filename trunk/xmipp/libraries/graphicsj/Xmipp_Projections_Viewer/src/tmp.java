/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class tmp implements tmpConstants {
  public static long gettypesize(DataType type) {
    return tmpJNI.gettypesize(type.swigValue());
  }

  public static void setProject_barrier(SWIGTYPE_p_barrier_t value) {
    tmpJNI.project_barrier_set(SWIGTYPE_p_barrier_t.getCPtr(value));
  }

  public static SWIGTYPE_p_barrier_t getProject_barrier() {
    return new SWIGTYPE_p_barrier_t(tmpJNI.project_barrier_get(), true);
  }

  public static void setProject_mutex(SWIGTYPE_p_pthread_mutex_t value) {
    tmpJNI.project_mutex_set(SWIGTYPE_p_pthread_mutex_t.getCPtr(value));
  }

  public static SWIGTYPE_p_pthread_mutex_t getProject_mutex() {
    return new SWIGTYPE_p_pthread_mutex_t(tmpJNI.project_mutex_get(), true);
  }

  public static void setProject_threads(project_thread_params value) {
    tmpJNI.project_threads_set(project_thread_params.getCPtr(value), value);
  }

  public static project_thread_params getProject_threads() {
    long cPtr = tmpJNI.project_threads_get();
    return (cPtr == 0) ? null : new project_thread_params(cPtr, false);
  }

  public static void project_Volume(SWIGTYPE_p_MultidimArrayT_double_t V, Projection P, int Ydim, int Xdim, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t roffset) {
    tmpJNI.project_Volume__SWIG_0(SWIGTYPE_p_MultidimArrayT_double_t.getCPtr(V), Projection.getCPtr(P), P, Ydim, Xdim, rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(roffset));
  }

  public static void project_Volume(SWIGTYPE_p_MultidimArrayT_double_t V, Projection P, int Ydim, int Xdim, double rot, double tilt, double psi) {
    tmpJNI.project_Volume__SWIG_1(SWIGTYPE_p_MultidimArrayT_double_t.getCPtr(V), Projection.getCPtr(P), P, Ydim, Xdim, rot, tilt, psi);
  }

  public static void project_Volume_offCentered(SWIGTYPE_p_MultidimArrayT_double_t V, Projection P, int Ydim, int Xdim, double axisRot, double axisTilt, SWIGTYPE_p_Matrix1DT_double_t raxis, double angle, double inplaneRot, SWIGTYPE_p_Matrix1DT_double_t rinplane) {
    tmpJNI.project_Volume_offCentered(SWIGTYPE_p_MultidimArrayT_double_t.getCPtr(V), Projection.getCPtr(P), P, Ydim, Xdim, axisRot, axisTilt, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(raxis), angle, inplaneRot, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(rinplane));
  }

  public static void singleWBP(SWIGTYPE_p_MultidimArrayT_double_t V, Projection P) {
    tmpJNI.singleWBP(SWIGTYPE_p_MultidimArrayT_double_t.getCPtr(V), Projection.getCPtr(P), P);
  }

  public static void count_eqs_in_projection(SWIGTYPE_p_GridVolumeTT_int_t GVNeq, SWIGTYPE_p_Basis basis, Projection read_proj) {
    tmpJNI.count_eqs_in_projection(SWIGTYPE_p_GridVolumeTT_int_t.getCPtr(GVNeq), SWIGTYPE_p_Basis.getCPtr(basis), Projection.getCPtr(read_proj), read_proj);
  }

  public static void project_Crystal_Volume(SWIGTYPE_p_GridVolume vol, SWIGTYPE_p_Basis basis, Projection proj, Projection norm_proj, int Ydim, int Xdim, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t shift, SWIGTYPE_p_Matrix1DT_double_t aint, SWIGTYPE_p_Matrix1DT_double_t bint, SWIGTYPE_p_Matrix2DT_double_t D, SWIGTYPE_p_Matrix2DT_double_t Dinv, SWIGTYPE_p_MultidimArrayT_int_t mask, int FORW, int eq_mode) {
    tmpJNI.project_Crystal_Volume__SWIG_0(SWIGTYPE_p_GridVolume.getCPtr(vol), SWIGTYPE_p_Basis.getCPtr(basis), Projection.getCPtr(proj), proj, Projection.getCPtr(norm_proj), norm_proj, Ydim, Xdim, rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(shift), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(aint), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(bint), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(D), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(Dinv), SWIGTYPE_p_MultidimArrayT_int_t.getCPtr(mask), FORW, eq_mode);
  }

  public static void project_Crystal_Volume(SWIGTYPE_p_GridVolume vol, SWIGTYPE_p_Basis basis, Projection proj, Projection norm_proj, int Ydim, int Xdim, double rot, double tilt, double psi, SWIGTYPE_p_Matrix1DT_double_t shift, SWIGTYPE_p_Matrix1DT_double_t aint, SWIGTYPE_p_Matrix1DT_double_t bint, SWIGTYPE_p_Matrix2DT_double_t D, SWIGTYPE_p_Matrix2DT_double_t Dinv, SWIGTYPE_p_MultidimArrayT_int_t mask, int FORW) {
    tmpJNI.project_Crystal_Volume__SWIG_1(SWIGTYPE_p_GridVolume.getCPtr(vol), SWIGTYPE_p_Basis.getCPtr(basis), Projection.getCPtr(proj), proj, Projection.getCPtr(norm_proj), norm_proj, Ydim, Xdim, rot, tilt, psi, SWIGTYPE_p_Matrix1DT_double_t.getCPtr(shift), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(aint), SWIGTYPE_p_Matrix1DT_double_t.getCPtr(bint), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(D), SWIGTYPE_p_Matrix2DT_double_t.getCPtr(Dinv), SWIGTYPE_p_MultidimArrayT_int_t.getCPtr(mask), FORW);
  }

  public static int getART_PIXEL_SUBSAMPLING() {
    return tmpJNI.ART_PIXEL_SUBSAMPLING_get();
  }

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class project_thread_params {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected project_thread_params(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(project_thread_params obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        XmippDataJNI.delete_project_thread_params(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setThread_id(int value) {
    XmippDataJNI.project_thread_params_thread_id_set(swigCPtr, this, value);
  }

  public int getThread_id() {
    return XmippDataJNI.project_thread_params_thread_id_get(swigCPtr, this);
  }

  public void setThreads_count(int value) {
    XmippDataJNI.project_thread_params_threads_count_set(swigCPtr, this, value);
  }

  public int getThreads_count() {
    return XmippDataJNI.project_thread_params_threads_count_get(swigCPtr, this);
  }

  public void setVol(ImageDouble value) {
    XmippDataJNI.project_thread_params_vol_set(swigCPtr, this, ImageDouble.getCPtr(value), value);
  }

  public ImageDouble getVol() {
    long cPtr = XmippDataJNI.project_thread_params_vol_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ImageDouble(cPtr, false);
  }

  public void setGrid(SWIGTYPE_p_SimpleGrid value) {
    XmippDataJNI.project_thread_params_grid_set(swigCPtr, this, SWIGTYPE_p_SimpleGrid.getCPtr(value));
  }

  public SWIGTYPE_p_SimpleGrid getGrid() {
    long cPtr = XmippDataJNI.project_thread_params_grid_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SimpleGrid(cPtr, false);
  }

  public void setBasis(SWIGTYPE_p_Basis value) {
    XmippDataJNI.project_thread_params_basis_set(swigCPtr, this, SWIGTYPE_p_Basis.getCPtr(value));
  }

  public SWIGTYPE_p_Basis getBasis() {
    long cPtr = XmippDataJNI.project_thread_params_basis_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Basis(cPtr, false);
  }

  public void setGlobal_proj(Projection value) {
    XmippDataJNI.project_thread_params_global_proj_set(swigCPtr, this, Projection.getCPtr(value), value);
  }

  public Projection getGlobal_proj() {
    long cPtr = XmippDataJNI.project_thread_params_global_proj_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Projection(cPtr, false);
  }

  public void setGlobal_norm_proj(Projection value) {
    XmippDataJNI.project_thread_params_global_norm_proj_set(swigCPtr, this, Projection.getCPtr(value), value);
  }

  public Projection getGlobal_norm_proj() {
    long cPtr = XmippDataJNI.project_thread_params_global_norm_proj_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Projection(cPtr, false);
  }

  public void setFORW(int value) {
    XmippDataJNI.project_thread_params_FORW_set(swigCPtr, this, value);
  }

  public int getFORW() {
    return XmippDataJNI.project_thread_params_FORW_get(swigCPtr, this);
  }

  public void setEq_mode(int value) {
    XmippDataJNI.project_thread_params_eq_mode_set(swigCPtr, this, value);
  }

  public int getEq_mode() {
    return XmippDataJNI.project_thread_params_eq_mode_get(swigCPtr, this);
  }

  public void setVNeq(SWIGTYPE_p_ImageT_int_t value) {
    XmippDataJNI.project_thread_params_VNeq_set(swigCPtr, this, SWIGTYPE_p_ImageT_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_ImageT_int_t getVNeq() {
    long cPtr = XmippDataJNI.project_thread_params_VNeq_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ImageT_int_t(cPtr, false);
  }

  public void setM(SWIGTYPE_p_Matrix2DT_double_t value) {
    XmippDataJNI.project_thread_params_M_set(swigCPtr, this, SWIGTYPE_p_Matrix2DT_double_t.getCPtr(value));
  }

  public SWIGTYPE_p_Matrix2DT_double_t getM() {
    long cPtr = XmippDataJNI.project_thread_params_M_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Matrix2DT_double_t(cPtr, false);
  }

  public void setMask(SWIGTYPE_p_MultidimArrayT_int_t value) {
    XmippDataJNI.project_thread_params_mask_set(swigCPtr, this, SWIGTYPE_p_MultidimArrayT_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_MultidimArrayT_int_t getMask() {
    long cPtr = XmippDataJNI.project_thread_params_mask_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_MultidimArrayT_int_t(cPtr, false);
  }

  public void setRay_length(double value) {
    XmippDataJNI.project_thread_params_ray_length_set(swigCPtr, this, value);
  }

  public double getRay_length() {
    return XmippDataJNI.project_thread_params_ray_length_get(swigCPtr, this);
  }

  public void setRot(double value) {
    XmippDataJNI.project_thread_params_rot_set(swigCPtr, this, value);
  }

  public double getRot() {
    return XmippDataJNI.project_thread_params_rot_get(swigCPtr, this);
  }

  public void setTilt(double value) {
    XmippDataJNI.project_thread_params_tilt_set(swigCPtr, this, value);
  }

  public double getTilt() {
    return XmippDataJNI.project_thread_params_tilt_get(swigCPtr, this);
  }

  public void setPsi(double value) {
    XmippDataJNI.project_thread_params_psi_set(swigCPtr, this, value);
  }

  public double getPsi() {
    return XmippDataJNI.project_thread_params_psi_get(swigCPtr, this);
  }

  public void setDestroy(boolean value) {
    XmippDataJNI.project_thread_params_destroy_set(swigCPtr, this, value);
  }

  public boolean getDestroy() {
    return XmippDataJNI.project_thread_params_destroy_get(swigCPtr, this);
  }

  public project_thread_params() {
    this(XmippDataJNI.new_project_thread_params(), true);
  }

}

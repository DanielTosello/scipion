package xmipp; 
public class MDLabel {
   public static final int MDL_UNDEFINED = -1; ///
   public static final int MDL_FIRST_LABEL = 0;  ///< The label MDL_OBJID is special and should not be used
   public static final int MDL_OBJID = MDL_FIRST_LABEL;  ///< object id (int), NOTE: This label is special and shouldn't be used
   public static final int MDL_ANGLE_COMPARISON = 1;  ///< Angular comparison (see angular_distance.cpp)
   public static final int MDL_ANGLEPSI2 = 2;  ///< Psi angle of an image (double,degrees)
   public static final int MDL_ANGLEPSI = 3;  ///< Psi angle of an image (double,degrees)
   public static final int MDL_ANGLEROT2 = 4;  ///< Rotation angle of an image (double,degrees)
   public static final int MDL_ANGLEROT = 5;  ///< Rotation angle of an image (double,degrees)
   public static final int MDL_ANGLETILT2 = 6;  ///< Tilting angle of an image (double,degrees)
   public static final int MDL_ANGLETILT = 7;  ///< Tilting angle of an image (double,degrees)
   public static final int MDL_ASSOCIATED_IMAGE1 = 8;  ///< Image associated to this object (std::string)
   public static final int MDL_ASSOCIATED_IMAGE2 = 9;  ///< Image associated to this object (std::string)
   public static final int MDL_ASSOCIATED_IMAGE3 = 10;  ///< Image associated to this object (std::string)
   public static final int MDL_ASSOCIATED_IMAGE4 = 11;  ///< Image associated to this object (std::string)
   public static final int MDL_ASSOCIATED_IMAGE5 = 12;  ///< Image associated to this object (std::string)
   public static final int MDL_AVG = 13;  ///< average value (double)
   public static final int MDL_AZIMUTALANGLE = 14;  ///< ctf definition azimutal angle
   public static final int MDL_BGMEAN = 15;  ///< Mean background value for an image
   public static final int MDL_BLOCK = 16;  ///< Current block number (for incremental EM)
   public static final int MDL_CELLX = 17;  ///< Cell location for crystals
   public static final int MDL_CELLY = 18;  ///< Cell location for crystals
   public static final int MDL_CL2D_CHANGES = 19;  ///< Number of changes between iterations
   public static final int MDL_CL2D_SIMILARITY = 20;  ///< Average cross-correlation for the image (double)
   public static final int MDL_CLASSIFICATION_DATA = 21;  ///< Data vector for classification (vector double)
   public static final int MDL_CLASSIFICATION_DATA_SIZE = 22;  ///< Size of data vectors for classification (int)
   public static final int MDL_CLASSIFICATION_DPR_05 = 23;  ///< Differential Phase Residual evaluated at FRC=0.5
   public static final int MDL_CLASSIFICATION_INTRACLASS_DISTANCE = 24;  ///< Average intraclass distance (double)
   public static final int MDL_CLASSIFICATION_FRC_05 = 25;  ///< Digital frequency at which the FRC drops below 0.5 (double)
   public static final int MDL_COMMENT = 26;  ///< A comment for this object /*** NOTE THIS IS A SPECIAL CASE AND SO IS TREATED ***/
   public static final int MDL_COST = 27;  ///< Cost for the image (double)
   public static final int MDL_COUNT = 28;  ///< Number of elements of a type (int) [this is a genereic type do not use to transfer information to another program]
   public static final int MDL_CTFINPUTPARAMS = 29;  ///< Parameters file for the CTF Model (std::string)
   public static final int MDL_CTFMODEL = 30;  ///< Name for the CTF Model (std::string)
   public static final int MDL_CTFMODEL2 = 31;  ///< Name for another CTF model (std::string)
   public static final int MDL_CTF_SAMPLING_RATE = 32;  ///< Sampling rate
   public static final int MDL_CTF_SAMPLING_RATE_Z = 33;  ///< Sampling rate in Z direction
   public static final int MDL_CTF_VOLTAGE = 34;  ///< Microscope voltage (kV)
   public static final int MDL_CTF_DEFOCUSA = 35;  ///< aver (Angage defocusstroms)
   public static final int MDL_CTF_DEFOCUSU = 36;  ///< Defocus U (Angstroms)
   public static final int MDL_CTF_DEFOCUSV = 37;  ///< Defocus V (Angstroms)
   public static final int MDL_CTF_DEFOCUS_ANGLE = 38;  ///< Defocus angle (degrees)
   public static final int MDL_CTF_CS = 39;  ///< Spherical aberration
   public static final int MDL_CTF_CA = 40;  ///< Chromatic aberration
   public static final int MDL_CTF_GROUP = 41;  ///< group images by defocus
   public static final int MDL_CTF_ENERGY_LOSS = 42;  ///< Energy loss
   public static final int MDL_CTF_LENS_STABILITY = 43;  ///< Lens stability
   public static final int MDL_CTF_CONVERGENCE_CONE = 44;  ///< Convergence cone
   public static final int MDL_CTF_LONGITUDINAL_DISPLACEMENT = 45;  ///< Longitudinal displacement
   public static final int MDL_CTF_TRANSVERSAL_DISPLACEMENT = 46;  ///< Transversal displacemente
   public static final int MDL_CTF_Q0 = 47;  ///< Inelastic absorption
   public static final int MDL_CTF_K = 48;  ///< CTF gain
   public static final int MDL_CTFBG_GAUSSIAN_K = 49;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN_SIGMAU = 50;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN_SIGMAV = 51;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN_CU = 52;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN_CV = 53;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN_ANGLE = 54;  ///< CTF Background parameter
   public static final int MDL_CTFBG_SQRT_K = 55;  ///< CTF Background parameter
   public static final int MDL_CTFBG_SQRT_U = 56;  ///< CTF Background parameter
   public static final int MDL_CTFBG_SQRT_V = 57;  ///< CTF Background parameter
   public static final int MDL_CTFBG_SQRT_ANGLE = 58;  ///< CTF Background parameter
   public static final int MDL_CTFBG_BASELINE = 59;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN2_K = 60;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN2_SIGMAU = 61;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN2_SIGMAV = 62;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN2_CU = 63;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN2_CV = 64;  ///< CTF Background parameter
   public static final int MDL_CTFBG_GAUSSIAN2_ANGLE = 65;  ///< CTF Background parameter
   public static final int MDL_CTF_CRITERION_PSDCORRELATION90 = 66;  ///< PSD correlation at 90 degrees
   public static final int MDL_CTF_CRITERION_FIRSTZERORATIO = 67;  ///< First zero ratio
   public static final int MDL_CTF_CRITERION_FIRSTZEROAVG = 68;  ///< First zero average (in Angstroms)
   public static final int MDL_CTF_CRITERION_FIRSTZERODISAGREEMENT = 69;  ///< First zero disagreement with second model (in Angstroms)
   public static final int MDL_CTF_CRITERION_DAMPING = 70;  ///< Minimum damping at border
   public static final int MDL_CTF_CRITERION_PSDRADIALINTEGRAL = 71;  ///< Integral of the radial PSD
   public static final int MDL_CTF_CRITERION_FITTINGSCORE = 72;  ///< Score of the fitting
   public static final int MDL_CTF_CRITERION_FITTINGCORR13 = 73;  ///< Correlation between the 1st and 3rd ring of the CTF
   public static final int MDL_CTF_CRITERION_PSDVARIANCE = 74;  ///< PSD variance
   public static final int MDL_CTF_CRITERION_PSDPCA1VARIANCE = 75;  ///< Variance in the first principal component of the PSDs
   public static final int MDL_CTF_CRITERION_PSDPCARUNSTEST = 76;  ///< Runs test on the projection of the PSD on the first principal component
   public static final int MDL_CTF_CRITERION_NORMALITY = 77;  ///< Normality test between histogram of micrography and gaussian distribution
   public static final int MDL_CTF_XRAY_DIMENSIONS = 78; // Size in pixels of the 3D PSF to be created (Xdim = 78; Ydim = 78; Zdim) ///
   public static final int MDL_CTF_XRAY_LAMBDA = 79;  /// X-ray wavelength (nm)
   public static final int MDL_CTF_XRAY_LENS_TYPE = 80;  ///Algorithm used to generate Xray PSF
   public static final int MDL_MAGNIFICATION = 81;  /// Magnification of the X-ray microscope
   public static final int MDL_CTF_XRAY_OUTER_ZONE_WIDTH = 82;  /// Outermost zone width of the X-ray Fresnel lens (nm)
   public static final int MDL_CTF_XRAY_ZONES_NUMBER = 83; // Number of zones of the X-ray Fresnel lens ///
   public static final int MDL_DATATYPE = 84;  ///< if read from file original image datatype, this is an struct defined in image
   public static final int MDL_DEFGROUP = 85;  ///< Defocus group
   public static final int MDL_DIRECTION = 86;  ///< Direction in 3D
   public static final int MDL_DM3_IDTAG = 87; ///
   public static final int MDL_DM3_NODEID = 88; ///
   public static final int MDL_DM3_NUMBER_TYPE = 89; ///
   public static final int MDL_DM3_PARENTID = 90; ///
   public static final int MDL_DM3_TAGCLASS = 91; ///
   public static final int MDL_DM3_TAGNAME = 92; ///
   public static final int MDL_DM3_SIZE = 93; ///
   public static final int MDL_DM3_VALUE = 94; ///
   public static final int MDL_ENABLED = 95;  ///< Is this image enabled? (int [-1 or 1])
   public static final int MDL_FLIP = 96;  ///< Flip the image? (bool)
   public static final int MDL_IDX = 97;  ///< Index within a list (size_t)
   public static final int MDL_IMAGE_CLASS_COUNT = 98;  ///< Number of images assigned to the same class as this image
   public static final int MDL_IMAGE_CLASS_GROUP = 99;  ///< Name of the class group for this image (metadata with all the images assigned to that class)
   public static final int MDL_IMAGE_CLASS = 100;  ///< Name of the class representative for this image
   public static final int MDL_IMAGE = 101;  ///< Name of an image (std::string)
   public static final int MDL_IMAGE_ORIGINAL = 102;  ///< Name of an image from which MDL_IMAGE is coming from
   public static final int MDL_IMAGE_TILTED = 103;  ///< Name of the tilted images associated to MDL_IMAGE
   public static final int MDL_IMGMD = 104;  ///< Name of Metadata file for all images (string)
   public static final int MDL_INTSCALE = 105;  ///< Intensity scale for an image
   public static final int MDL_ITER = 106;  ///< Current iteration number (int)
   public static final int MDL_K = 107;  ///< //ctf definition K
   public static final int MDL_KERDENSOM_FUNCTIONAL = 108;  ///< Functional value (double)
   public static final int MDL_KERDENSOM_REGULARIZATION = 109;  ///< Regularization value (double)
   public static final int MDL_KERDENSOM_SIGMA = 110;  ///< Sigma value (double)
   public static final int MDL_KSTEST = 111;  ///<KS-test statistics
   public static final int MDL_LL = 112;  ///< contribution of an image to log-likelihood value
   public static final int MDL_MAPTOPOLOGY = 113;  ///< Map topology (KerDenSOM, ...)
   public static final int MDL_MASK = 114;  ///< Name of a mask associated to image
   public static final int MDL_MAXCC = 115;  ///< Maximum cross-correlation for the image (double)
   public static final int MDL_MAX = 116;  ///<maximum value (double)
   public static final int MDL_MICROGRAPH = 117;  ///< Name of a micrograph (std::string)
   public static final int MDL_MICROGRAPH_TILTED = 118;  ///< Name of the corresponding tilted micrograph (std::string)
   public static final int MDL_MIN = 119;  ///<minimum value (double)
   public static final int MDL_MIRRORFRAC = 120;  ///< Mirror fraction for a Maximum Likelihood model
   public static final int MDL_MISSINGREGION_NR = 121;  ///< Number of missing region in subtomogram
   public static final int MDL_MISSINGREGION_TYPE = 122;  ///< Type of missing region in subtomogram
   public static final int MDL_MISSINGREGION_THY0 = 123;  ///< Initial tilt angle in Y for missing region in subtomogram
   public static final int MDL_MISSINGREGION_THYF = 124;  ///< Final tilt angle in Y for missing region in subtomogram
   public static final int MDL_MISSINGREGION_THX0 = 125;  ///< Initial tilt angle in X for missing region in subtomogram
   public static final int MDL_MISSINGREGION_THXF = 126;  ///< Final tilt angle in X for missing region in subtomogram
   public static final int MDL_MODELFRAC = 127;  ///< Model fraction (alpha_k) for a Maximum Likelihood model
   public static final int MDL_NEIGHBORS = 128;  ///< Vector of indexes to points some "neighbors"
   public static final int MDL_NEIGHBORHOOD_RADIUS = 129;  ///< Radius of the neigborhood (radians)
   public static final int MDL_NMA = 130;  ///< Normal mode displacements (vector double)
   public static final int MDL_NMA_MODEFILE = 131;  ///< File with an NMA mode
   public static final int MDL_NOISE_ANGLES = 132;  ///< Noise description for projected angles
   public static final int MDL_NOISE_PARTICLE_COORD = 133;  ///< Noise description for particle's center coordenates (when projecting)
   public static final int MDL_NOISE_PIXEL_LEVEL = 134;  ///< Noise description for pixels' gray level (when projecting)
   public static final int MDL_ORDER = 135;  /// auxiliary label to be used as an index (long)
   public static final int MDL_ORIGINX = 136;  ///< Origin for the image in the X axis (double)
   public static final int MDL_ORIGINY = 137;  ///< Origin for the image in the Y axis (double)
   public static final int MDL_ORIGINZ = 138;  ///< Origin for the image in the Z axis (double)
   public static final int MDL_PICKING_COLOR = 139;  ///< Color for particle picking
   public static final int MDL_PICKING_FAMILY = 140;  ///< Family for particle picking
   public static final int MDL_PICKING_FAMILY_STATE = 141;  ///< Family state for particle picking
   public static final int MDL_PICKING_MICROGRAPH_FAMILY_STATE = 142;  ///< Micrograph family state for particle picking
   public static final int MDL_PICKING_PARTICLE_SIZE = 143;  ///< Particle size for particle picking
   public static final int MDL_PMAX = 144;  ///< Maximum value of normalized probability function (now called "Pmax/sumP") (double)
   public static final int MDL_PRJ_DIMENSIONS = 145; // X = 145;Y dimensions for the generated projections ///
   public static final int MDL_PRJ_TILT_RANGE = 146; // Vector with the initial and final tilt angle values = 146; and step size ///
   public static final int MDL_PRJ_VOL = 147;        // Volume file name to generate projections from ///
   public static final int MDL_PSD = 148;  ///< A Power Spectrum Density file name (std::string)
   public static final int MDL_PSD_ENHANCED = 149;  ///< A enhanced Power Spectrum Density file name (std::string)
   public static final int MDL_RANDOMSEED = 150;  ///< Seed for random number generator
   public static final int MDL_REF3D = 151;  ///< 3D Class to which the image belongs (int)
   public static final int MDL_REF = 152;  ///< Class to which the image belongs (int)
   public static final int MDL_REFMD = 153;  ///< Name of Metadata file for all references(string)
   public static final int MDL_RESOLUTION_DPR = 154;  ///<differential phase residual (double)
   public static final int MDL_RESOLUTION_ERRORL2 = 155;  ///<Error in l2 (double)
   public static final int MDL_RESOLUTION_FRC = 156;  ///<Fourier shell correlation (double)
   public static final int MDL_RESOLUTION_FRCRANDOMNOISE = 157;  ///<Fourier shell correlation noise (double)
   public static final int MDL_RESOLUTION_FREQ = 158;  ///<Frequency in 1/A (double)
   public static final int MDL_RESOLUTION_FREQREAL = 159;  ///< Frequency in A (double)
   public static final int MDL_SAMPLINGRATE = 160;  ///< sampling rate in A/pixel (double)
   public static final int MDL_SAMPLINGRATEX = 161;  ///< sampling rate in A/pixel (double)
   public static final int MDL_SAMPLINGRATEY = 162;  ///< sampling rate in A/pixel (double)
   public static final int MDL_SAMPLINGRATEZ = 163;  ///< sampling rate in A/pixel (double)
   public static final int MDL_SCALE = 164;  ///< scaling factor for an image or volume (double)
   public static final int MDL_SELFILE = 165;  ///< Name of an image (std::string)
   public static final int MDL_SERIE = 166;  ///< A collection of micrographs, e.g. a tilt serie (std::string)
   public static final int MDL_SHIFTX = 167;  ///< Shift for the image in the X axis (double)
   public static final int MDL_SHIFTY = 168;  ///< Shift for the image in the Y axis (double)
   public static final int MDL_SHIFTZ = 169;  ///< Shift for the image in the Z axis (double)
   public static final int MDL_SHIFT_CRYSTALX = 170;  ///< Shift for the image in the X axis (double) for crystals
   public static final int MDL_SHIFT_CRYSTALY = 171;  ///< Shift for the image in the Y axis (double) for crystals
   public static final int MDL_SHIFT_CRYSTALZ = 172;  ///< Shift for the image in the Z axis (double) for crystals
   public static final int MDL_SIGMANOISE = 173;  ///< Standard deviation of the noise in ML model
   public static final int MDL_SIGMAOFFSET = 174;  ///< Standard deviation of the offsets in ML model
   public static final int MDL_SIGNALCHANGE = 175;  ///< Signal change for an image
   public static final int MDL_SPHERICALABERRATION = 176;  ///<ctf definition azimutal angle
   public static final int MDL_STDDEV = 177;  ///<stdandard deviation value (double)
   public static final int MDL_SUM = 178;  ///< Sum of elements of a given type (double) [this is a genereic type do not use to transfer information to another program]
   public static final int MDL_SUMWEIGHT = 179;  ///< Sum of all weights in ML model
   public static final int MDL_SYMNO = 180;  ///< Symmetry number for a projection (used in ART)
   public static final int MDL_TRANSFORMATIONMTRIX = 181;  ///< transformation matrix(vector double)
   public static final int MDL_VOLTAGE = 182;  ///< microscope voltage (double)
   public static final int MDL_WEIGHT = 183;  ///< Weight assigned to the image (double)
   public static final int MDL_WROBUST = 184;  ///< Weight of t-student distribution in robust Maximum likelihood
   public static final int MDL_X = 185;  ///< X component (double)
   public static final int MDL_XINT = 186;  ///< X component (int)
   public static final int MDL_XINTTILT = 187;  ///< X component in tilted micrograph (int)
   public static final int MDL_XSIZE = 188;  ///< X size (int)
   public static final int MDL_Y = 189;  ///< Y component (double)
   public static final int MDL_YINT = 190;  ///< Y component (int)
   public static final int MDL_YINTTILT = 191;  ///< Y component in tilted micrograph (int)
   public static final int MDL_YSIZE = 192;  ///< Y size (int)
   public static final int MDL_Z = 193;  ///< Z component (double)
   public static final int MDL_ZINT = 194;  ///< Z component (int)
   public static final int MDL_ZSCORE = 195;  ///< Z Score (double)
   public static final int MDL_ZSIZE = 196;  ///< Z size (int)
   public static final int MDL_LAST_LABEL = 197;  // **** NOTE ****: Do keep this label always at the end;it is here for looping purposes ///
}

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "xmipp_MetaData.h"
#include <data/metadata.h>

static jfieldID MetaData_peerId;
static jfieldID MetaData_filenameId;

#define peerId MetaData_peerId
#define GET_INTERNAL_METADATA() ((MetaData*)(env->GetLongField(obj, peerId)))

JNIEXPORT void JNICALL Java_xmipp_MetaData_storeIds
(JNIEnv *env, jclass cls)
{
    peerId = env->GetFieldID(cls, "peer", "J");
}

JNIEXPORT void JNICALL Java_xmipp_MetaData_create
(JNIEnv *env, jobject obj)
{
    MetaData * md = new MetaData();
    env->SetLongField(obj, peerId, (long)md);
}

JNIEXPORT void JNICALL Java_xmipp_MetaData_destroy
(JNIEnv *env, jobject obj)
{
    MetaData * md = GET_INTERNAL_METADATA();
    delete md;
    md = NULL;
    env->SetLongField(obj, peerId, (long)md);
}

JNIEXPORT void JNICALL Java_xmipp_MetaData_read
(JNIEnv *env, jobject obj, jstring filename)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        const char * fnStr = env->GetStringUTFChars(filename, false);
        md->read(fnStr);
    }
}

JNIEXPORT void JNICALL Java_xmipp_MetaData_write
(JNIEnv *env, jobject obj, jstring filename)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        const char * fnStr = env->GetStringUTFChars(filename, false);
        md->write(fnStr);
    }
}

JNIEXPORT void JNICALL Java_xmipp_MetaData_print
(JNIEnv *env, jobject obj)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        md->write(std::cout);
    }
}

JNIEXPORT jboolean JNICALL Java_xmipp_MetaData_containsLabel
(JNIEnv *env, jobject obj, jint label)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        return md->containsLabel((MDLabel)label);
    }
    return false;
}


JNIEXPORT jint JNICALL Java_xmipp_MetaData_getValueInt
(JNIEnv *env, jobject obj, jint label, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        int value;
        if (md->getValue((MDLabel)label, value, objId))
            return value;
    }
    return 0;
}

JNIEXPORT jdouble JNICALL Java_xmipp_MetaData_getValueDouble
(JNIEnv *env, jobject obj, jint label, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        double value;
        if (md->getValue((MDLabel)label, value, objId))
            return value;
    }
    return 0;
}

JNIEXPORT jstring JNICALL Java_xmipp_MetaData_getValueString
(JNIEnv *env, jobject obj, jint label, jlong objId)
{
  MetaData * md = GET_INTERNAL_METADATA();
  if (md != NULL)
  {
      String str;
      if (md->getValue((MDLabel)label, str, objId))
        return env->NewStringUTF(str.data());
  }
  return NULL;

}

JNIEXPORT jboolean JNICALL Java_xmipp_MetaData_getValueBoolean
(JNIEnv *env, jobject obj, jint label, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
        bool value;
        if (md->getValue((MDLabel)label, value, objId))
            return value;
    }
    return 0;
}

JNIEXPORT jboolean JNICALL Java_xmipp_MetaData_setValueInt
(JNIEnv *env, jobject obj, jint label, jint value, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
      return md->setValue((MDLabel)label, value, objId);
    return false;
}

JNIEXPORT jboolean JNICALL Java_xmipp_MetaData_setValueDouble
(JNIEnv *env, jobject obj, jint label, jdouble value, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
      return md->setValue((MDLabel)label, value, objId);
    return false;
}
JNIEXPORT jboolean JNICALL Java_xmipp_MetaData_setValueString
(JNIEnv *env, jobject obj, jint label, jstring value, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
    {
      String str(env->GetStringUTFChars(value, false));
      return md->setValue((MDLabel)label, str, objId);
    }
    return false;
}

JNIEXPORT jboolean JNICALL Java_xmipp_MetaData_setValueBoolean
(JNIEnv *env, jobject obj, jint label, jboolean value, jlong objId)
{
    MetaData * md = GET_INTERNAL_METADATA();
    if (md != NULL)
      return md->setValue((MDLabel)label, value, objId);
    return false;
}

JNIEXPORT jlongArray JNICALL Java_xmipp_MetaData_findObjects
(JNIEnv *env, jobject obj)
{
  MetaData * md = GET_INTERNAL_METADATA();
  if (md != NULL)
  {
      std::vector<size_t> ids;
      md->findObjects(ids);
      jlongArray array = env->NewLongArray(ids.size());
      env->SetLongArrayRegion(array, 0, ids.size(), (jlong*)ids.data());
      return array;
  }
  return NULL;
}


# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmippData', [dirname(__file__)])
        except ImportError:
            import _XmippData
            return _XmippData
        if fp is not None:
            try:
                _mod = imp.load_module('_XmippData', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _XmippData = swig_import_helper()
    del swig_import_helper
else:
    import _XmippData
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmippData.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _XmippData.SwigPyIterator_value(self)
    def incr(self, n = 1): return _XmippData.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _XmippData.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _XmippData.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _XmippData.SwigPyIterator_equal(self, *args)
    def copy(self): return _XmippData.SwigPyIterator_copy(self)
    def next(self): return _XmippData.SwigPyIterator_next(self)
    def __next__(self): return _XmippData.SwigPyIterator___next__(self)
    def previous(self): return _XmippData.SwigPyIterator_previous(self)
    def advance(self, *args): return _XmippData.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _XmippData.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _XmippData.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _XmippData.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _XmippData.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _XmippData.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _XmippData.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _XmippData.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _XmippData.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XmippData.vectori___nonzero__(self)
    def __bool__(self): return _XmippData.vectori___bool__(self)
    def __len__(self): return _XmippData.vectori___len__(self)
    def pop(self): return _XmippData.vectori_pop(self)
    def __getslice__(self, *args): return _XmippData.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _XmippData.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _XmippData.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _XmippData.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _XmippData.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _XmippData.vectori___setitem__(self, *args)
    def append(self, *args): return _XmippData.vectori_append(self, *args)
    def empty(self): return _XmippData.vectori_empty(self)
    def size(self): return _XmippData.vectori_size(self)
    def clear(self): return _XmippData.vectori_clear(self)
    def swap(self, *args): return _XmippData.vectori_swap(self, *args)
    def get_allocator(self): return _XmippData.vectori_get_allocator(self)
    def begin(self): return _XmippData.vectori_begin(self)
    def end(self): return _XmippData.vectori_end(self)
    def rbegin(self): return _XmippData.vectori_rbegin(self)
    def rend(self): return _XmippData.vectori_rend(self)
    def pop_back(self): return _XmippData.vectori_pop_back(self)
    def erase(self, *args): return _XmippData.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _XmippData.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XmippData.vectori_push_back(self, *args)
    def front(self): return _XmippData.vectori_front(self)
    def back(self): return _XmippData.vectori_back(self)
    def assign(self, *args): return _XmippData.vectori_assign(self, *args)
    def resize(self, *args): return _XmippData.vectori_resize(self, *args)
    def insert(self, *args): return _XmippData.vectori_insert(self, *args)
    def reserve(self, *args): return _XmippData.vectori_reserve(self, *args)
    def capacity(self): return _XmippData.vectori_capacity(self)
    __swig_destroy__ = _XmippData.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _XmippData.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _XmippData.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XmippData.vectord___nonzero__(self)
    def __bool__(self): return _XmippData.vectord___bool__(self)
    def __len__(self): return _XmippData.vectord___len__(self)
    def pop(self): return _XmippData.vectord_pop(self)
    def __getslice__(self, *args): return _XmippData.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _XmippData.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _XmippData.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _XmippData.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _XmippData.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _XmippData.vectord___setitem__(self, *args)
    def append(self, *args): return _XmippData.vectord_append(self, *args)
    def empty(self): return _XmippData.vectord_empty(self)
    def size(self): return _XmippData.vectord_size(self)
    def clear(self): return _XmippData.vectord_clear(self)
    def swap(self, *args): return _XmippData.vectord_swap(self, *args)
    def get_allocator(self): return _XmippData.vectord_get_allocator(self)
    def begin(self): return _XmippData.vectord_begin(self)
    def end(self): return _XmippData.vectord_end(self)
    def rbegin(self): return _XmippData.vectord_rbegin(self)
    def rend(self): return _XmippData.vectord_rend(self)
    def pop_back(self): return _XmippData.vectord_pop_back(self)
    def erase(self, *args): return _XmippData.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _XmippData.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XmippData.vectord_push_back(self, *args)
    def front(self): return _XmippData.vectord_front(self)
    def back(self): return _XmippData.vectord_back(self)
    def assign(self, *args): return _XmippData.vectord_assign(self, *args)
    def resize(self, *args): return _XmippData.vectord_resize(self, *args)
    def insert(self, *args): return _XmippData.vectord_insert(self, *args)
    def reserve(self, *args): return _XmippData.vectord_reserve(self, *args)
    def capacity(self): return _XmippData.vectord_capacity(self)
    __swig_destroy__ = _XmippData.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _XmippData.vectord_swigregister
vectord_swigregister(vectord)

class vectorli(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorli, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorli, name)
    __repr__ = _swig_repr
    def iterator(self): return _XmippData.vectorli_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XmippData.vectorli___nonzero__(self)
    def __bool__(self): return _XmippData.vectorli___bool__(self)
    def __len__(self): return _XmippData.vectorli___len__(self)
    def pop(self): return _XmippData.vectorli_pop(self)
    def __getslice__(self, *args): return _XmippData.vectorli___getslice__(self, *args)
    def __setslice__(self, *args): return _XmippData.vectorli___setslice__(self, *args)
    def __delslice__(self, *args): return _XmippData.vectorli___delslice__(self, *args)
    def __delitem__(self, *args): return _XmippData.vectorli___delitem__(self, *args)
    def __getitem__(self, *args): return _XmippData.vectorli___getitem__(self, *args)
    def __setitem__(self, *args): return _XmippData.vectorli___setitem__(self, *args)
    def append(self, *args): return _XmippData.vectorli_append(self, *args)
    def empty(self): return _XmippData.vectorli_empty(self)
    def size(self): return _XmippData.vectorli_size(self)
    def clear(self): return _XmippData.vectorli_clear(self)
    def swap(self, *args): return _XmippData.vectorli_swap(self, *args)
    def get_allocator(self): return _XmippData.vectorli_get_allocator(self)
    def begin(self): return _XmippData.vectorli_begin(self)
    def end(self): return _XmippData.vectorli_end(self)
    def rbegin(self): return _XmippData.vectorli_rbegin(self)
    def rend(self): return _XmippData.vectorli_rend(self)
    def pop_back(self): return _XmippData.vectorli_pop_back(self)
    def erase(self, *args): return _XmippData.vectorli_erase(self, *args)
    def __init__(self, *args): 
        this = _XmippData.new_vectorli(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XmippData.vectorli_push_back(self, *args)
    def front(self): return _XmippData.vectorli_front(self)
    def back(self): return _XmippData.vectorli_back(self)
    def assign(self, *args): return _XmippData.vectorli_assign(self, *args)
    def resize(self, *args): return _XmippData.vectorli_resize(self, *args)
    def insert(self, *args): return _XmippData.vectorli_insert(self, *args)
    def reserve(self, *args): return _XmippData.vectorli_reserve(self, *args)
    def capacity(self): return _XmippData.vectorli_capacity(self)
    __swig_destroy__ = _XmippData.delete_vectorli
    __del__ = lambda self : None;
vectorli_swigregister = _XmippData.vectorli_swigregister
vectorli_swigregister(vectorli)

class intP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_intP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_intP
    __del__ = lambda self : None;
    def assign(self, *args): return _XmippData.intP_assign(self, *args)
    def value(self): return _XmippData.intP_value(self)
    def cast(self): return _XmippData.intP_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.intP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.intP_frompointer)
intP_swigregister = _XmippData.intP_swigregister
intP_swigregister(intP)

def intP_frompointer(*args):
  return _XmippData.intP_frompointer(*args)
intP_frompointer = _XmippData.intP_frompointer

class charP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_charP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_charP
    __del__ = lambda self : None;
    def assign(self, *args): return _XmippData.charP_assign(self, *args)
    def value(self): return _XmippData.charP_value(self)
    def cast(self): return _XmippData.charP_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.charP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.charP_frompointer)
charP_swigregister = _XmippData.charP_swigregister
charP_swigregister(charP)

def charP_frompointer(*args):
  return _XmippData.charP_frompointer(*args)
charP_frompointer = _XmippData.charP_frompointer

class doubleP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_doubleP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_doubleP
    __del__ = lambda self : None;
    def assign(self, *args): return _XmippData.doubleP_assign(self, *args)
    def value(self): return _XmippData.doubleP_value(self)
    def cast(self): return _XmippData.doubleP_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.doubleP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.doubleP_frompointer)
doubleP_swigregister = _XmippData.doubleP_swigregister
doubleP_swigregister(doubleP)

def doubleP_frompointer(*args):
  return _XmippData.doubleP_frompointer(*args)
doubleP_frompointer = _XmippData.doubleP_frompointer

class floatP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_floatP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_floatP
    __del__ = lambda self : None;
    def assign(self, *args): return _XmippData.floatP_assign(self, *args)
    def value(self): return _XmippData.floatP_value(self)
    def cast(self): return _XmippData.floatP_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.floatP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.floatP_frompointer)
floatP_swigregister = _XmippData.floatP_swigregister
floatP_swigregister(floatP)

def floatP_frompointer(*args):
  return _XmippData.floatP_frompointer(*args)
floatP_frompointer = _XmippData.floatP_frompointer

class stringP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_stringP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_stringP
    __del__ = lambda self : None;
    def assign(self, *args): return _XmippData.stringP_assign(self, *args)
    def value(self): return _XmippData.stringP_value(self)
    def cast(self): return _XmippData.stringP_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.stringP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.stringP_frompointer)
stringP_swigregister = _XmippData.stringP_swigregister
stringP_swigregister(stringP)

def stringP_frompointer(*args):
  return _XmippData.stringP_frompointer(*args)
stringP_frompointer = _XmippData.stringP_frompointer

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_string()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_string
    __del__ = lambda self : None;
string_swigregister = _XmippData.string_swigregister
string_swigregister(string)

class Tabsinc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tabsinc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tabsinc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_Tabsinc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_Tabsinc
    __del__ = lambda self : None;
    def __call__(self, *args): return _XmippData.Tabsinc___call__(self, *args)
    def filltable(self): return _XmippData.Tabsinc_filltable(self)
Tabsinc_swigregister = _XmippData.Tabsinc_swigregister
Tabsinc_swigregister(Tabsinc)

class KaiserBessel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KaiserBessel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KaiserBessel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_KaiserBessel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_KaiserBessel
    __del__ = lambda self : None;
    def I0table_maxerror(self): return _XmippData.KaiserBessel_I0table_maxerror(self)
    def dump_table(self): return _XmippData.KaiserBessel_dump_table(self)
    def sinhwin(self, *args): return _XmippData.KaiserBessel_sinhwin(self, *args)
    def i0win(self, *args): return _XmippData.KaiserBessel_i0win(self, *args)
    def i0win_tab(self, *args): return _XmippData.KaiserBessel_i0win_tab(self, *args)
    def get_window_size(self): return _XmippData.KaiserBessel_get_window_size(self)
KaiserBessel_swigregister = _XmippData.KaiserBessel_swigregister
KaiserBessel_swigregister(KaiserBessel)


def cdf_gauss(*args):
  return _XmippData.cdf_gauss(*args)
cdf_gauss = _XmippData.cdf_gauss

def cdf_tstudent(*args):
  return _XmippData.cdf_tstudent(*args)
cdf_tstudent = _XmippData.cdf_tstudent

def cdf_FSnedecor(*args):
  return _XmippData.cdf_FSnedecor(*args)
cdf_FSnedecor = _XmippData.cdf_FSnedecor

def icdf_FSnedecor(*args):
  return _XmippData.icdf_FSnedecor(*args)
icdf_FSnedecor = _XmippData.icdf_FSnedecor

def log2(*args):
  return _XmippData.log2(*args)
log2 = _XmippData.log2

def randomize_random_generator():
  return _XmippData.randomize_random_generator()
randomize_random_generator = _XmippData.randomize_random_generator

def student_outside_probb(*args):
  return _XmippData.student_outside_probb(*args)
student_outside_probb = _XmippData.student_outside_probb

def student_within_t0(*args):
  return _XmippData.student_within_t0(*args)
student_within_t0 = _XmippData.student_within_t0

def student_outside_t0(*args):
  return _XmippData.student_outside_t0(*args)
student_outside_t0 = _XmippData.student_outside_t0

def student_up_to_t0(*args):
  return _XmippData.student_up_to_t0(*args)
student_up_to_t0 = _XmippData.student_up_to_t0

def student_from_t0(*args):
  return _XmippData.student_from_t0(*args)
student_from_t0 = _XmippData.student_from_t0

def chi2_up_to_t0(*args):
  return _XmippData.chi2_up_to_t0(*args)
chi2_up_to_t0 = _XmippData.chi2_up_to_t0

def chi2_from_t0(*args):
  return _XmippData.chi2_from_t0(*args)
chi2_from_t0 = _XmippData.chi2_from_t0

def rnd_log(*args):
  return _XmippData.rnd_log(*args)
rnd_log = _XmippData.rnd_log
class FileName(string):
    __swig_setmethods__ = {}
    for _s in [string]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileName, name, value)
    __swig_getmethods__ = {}
    for _s in [string]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_FileName(*args)
        try: self.this.append(this)
        except: self.this = this
    def compose(self, *args): return _XmippData.FileName_compose(self, *args)
    def get_root(self): return _XmippData.FileName_get_root(self)
    def get_baseName(self): return _XmippData.FileName_get_baseName(self)
    def get_number(self): return _XmippData.FileName_get_number(self)
    def get_extension(self): return _XmippData.FileName_get_extension(self)
    def init_random(self, *args): return _XmippData.FileName_init_random(self, *args)
    def add_prefix(self, *args): return _XmippData.FileName_add_prefix(self, *args)
    def add_extension(self, *args): return _XmippData.FileName_add_extension(self, *args)
    def without_extension(self): return _XmippData.FileName_without_extension(self)
    def without_root(self): return _XmippData.FileName_without_root(self)
    def insert_before_extension(self, *args): return _XmippData.FileName_insert_before_extension(self, *args)
    def remove_extension(self, *args): return _XmippData.FileName_remove_extension(self, *args)
    def remove_all_extensions(self): return _XmippData.FileName_remove_all_extensions(self)
    def substitute_extension(self, *args): return _XmippData.FileName_substitute_extension(self, *args)
    def without(self, *args): return _XmippData.FileName_without(self, *args)
    def remove_until_prefix(self, *args): return _XmippData.FileName_remove_until_prefix(self, *args)
    def remove_directories(self, keep = 0): return _XmippData.FileName_remove_directories(self, keep)
    def __str__(self): return _XmippData.FileName___str__(self)
    __swig_destroy__ = _XmippData.delete_FileName
    __del__ = lambda self : None;
FileName_swigregister = _XmippData.FileName_swigregister
FileName_swigregister(FileName)

def solve_2nd_degree_eq(*args):
  return _XmippData.solve_2nd_degree_eq(*args)
solve_2nd_degree_eq = _XmippData.solve_2nd_degree_eq

def gaussian1D(*args):
  return _XmippData.gaussian1D(*args)
gaussian1D = _XmippData.gaussian1D

def tstudent1D(*args):
  return _XmippData.tstudent1D(*args)
tstudent1D = _XmippData.tstudent1D

def gaussian2D(*args):
  return _XmippData.gaussian2D(*args)
gaussian2D = _XmippData.gaussian2D

def init_random_generator(*args):
  return _XmippData.init_random_generator(*args)
init_random_generator = _XmippData.init_random_generator

def rnd_unif(*args):
  return _XmippData.rnd_unif(*args)
rnd_unif = _XmippData.rnd_unif

def rnd_student_t(*args):
  return _XmippData.rnd_student_t(*args)
rnd_student_t = _XmippData.rnd_student_t

def rnd_gaus(*args):
  return _XmippData.rnd_gaus(*args)
rnd_gaus = _XmippData.rnd_gaus

def gaus_within_x0(*args):
  return _XmippData.gaus_within_x0(*args)
gaus_within_x0 = _XmippData.gaus_within_x0

def gaus_outside_x0(*args):
  return _XmippData.gaus_outside_x0(*args)
gaus_outside_x0 = _XmippData.gaus_outside_x0

def gaus_up_to_x0(*args):
  return _XmippData.gaus_up_to_x0(*args)
gaus_up_to_x0 = _XmippData.gaus_up_to_x0

def gaus_from_x0(*args):
  return _XmippData.gaus_from_x0(*args)
gaus_from_x0 = _XmippData.gaus_from_x0


def exists(*args):
  return _XmippData.exists(*args)
exists = _XmippData.exists

def xmippBaseDir():
  return _XmippData.xmippBaseDir()
xmippBaseDir = _XmippData.xmippBaseDir

def init_progress_bar(*args):
  return _XmippData.init_progress_bar(*args)
init_progress_bar = _XmippData.init_progress_bar

def progress_bar(*args):
  return _XmippData.progress_bar(*args)
progress_bar = _XmippData.progress_bar

def TimeMessage(*args):
  return _XmippData.TimeMessage(*args)
TimeMessage = _XmippData.TimeMessage

def IsBigEndian():
  return _XmippData.IsBigEndian()
IsBigEndian = _XmippData.IsBigEndian

def IsLittleEndian():
  return _XmippData.IsLittleEndian()
IsLittleEndian = _XmippData.IsLittleEndian

def divide_equally(*args):
  return _XmippData.divide_equally(*args)
divide_equally = _XmippData.divide_equally
class DocLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocLine, name)
    __repr__ = _swig_repr
    NOT_CONSIDERED = _XmippData.DocLine_NOT_CONSIDERED
    NOT_ASSIGNED = _XmippData.DocLine_NOT_ASSIGNED
    DATALINE = _XmippData.DocLine_DATALINE
    COMMENT = _XmippData.DocLine_COMMENT
    def __init__(self, *args): 
        this = _XmippData.new_DocLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _XmippData.DocLine_assign(self, *args)
    def get(self, *args): return _XmippData.DocLine_get(self, *args)
    def set(self, *args): return _XmippData.DocLine_set(self, *args)
    def get_text(self): return _XmippData.DocLine_get_text(self)
    def get_key(self): return _XmippData.DocLine_get_key(self)
    def get_no_components(self): return _XmippData.DocLine_get_no_components(self)
    def clear(self): return _XmippData.DocLine_clear(self)
    def Is_comment(self): return _XmippData.DocLine_Is_comment(self)
    def Is_data(self): return _XmippData.DocLine_Is_data(self)
    def set_type(self, *args): return _XmippData.DocLine_set_type(self, *args)
    def read(self, *args): return _XmippData.DocLine_read(self, *args)
    def __str__(self): return _XmippData.DocLine___str__(self)
    __swig_destroy__ = _XmippData.delete_DocLine
    __del__ = lambda self : None;
DocLine_swigregister = _XmippData.DocLine_swigregister
DocLine_swigregister(DocLine)

def wait_until_stable_size(*args):
  return _XmippData.wait_until_stable_size(*args)
wait_until_stable_size = _XmippData.wait_until_stable_size

def create_empty_file(*args):
  return _XmippData.create_empty_file(*args)
create_empty_file = _XmippData.create_empty_file

class DocFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_DocFile(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _XmippData.DocFile_clear(self)
    def reserve(self, *args): return _XmippData.DocFile_reserve(self, *args)
    def assign(self, *args): return _XmippData.DocFile_assign(self, *args)
    def debug(self): return _XmippData.DocFile_debug(self)
    def read(self, *args): return _XmippData.DocFile_read(self, *args)
    def append(self, *args): return _XmippData.DocFile_append(self, *args)
    def write(self, _name = ""): return _XmippData.DocFile_write(self, _name)
    def go_beginning(self): return _XmippData.DocFile_go_beginning(self)
    def go_first_data_line(self): return _XmippData.DocFile_go_first_data_line(self)
    def adjust_to_data_line(self): return _XmippData.DocFile_adjust_to_data_line(self)
    def next(self): return _XmippData.DocFile_next(self)
    def previous(self): return _XmippData.DocFile_previous(self)
    def next_data_line(self): return _XmippData.DocFile_next_data_line(self)
    def jump(self, *args): return _XmippData.DocFile_jump(self, *args)
    def search(self, *args): return _XmippData.DocFile_search(self, *args)
    def search_comment(self, *args): return _XmippData.DocFile_search_comment(self, *args)
    def remove_multiple_strings(self, *args): return _XmippData.DocFile_remove_multiple_strings(self, *args)
    def get_selfile(self, *args): return _XmippData.DocFile_get_selfile(self, *args)
    def locate(self, *args): return _XmippData.DocFile_locate(self, *args)
    def eof(self): return _XmippData.DocFile_eof(self)
    def name(self): return _XmippData.DocFile_name(self)
    def exists(self, *args): return _XmippData.DocFile_exists(self, *args)
    def getColNumberFromHeader(self, *args): return _XmippData.DocFile_getColNumberFromHeader(self, *args)
    def FirstLine_colNumber(self): return _XmippData.DocFile_FirstLine_colNumber(self)
    def dataLineNo(self): return _XmippData.DocFile_dataLineNo(self)
    def LineNo(self): return _XmippData.DocFile_LineNo(self)
    def get_last_key(self): return _XmippData.DocFile_get_last_key(self)
    def get_current_key(self): return _XmippData.DocFile_get_current_key(self)
    def FirstKey(self): return _XmippData.DocFile_FirstKey(self)
    def set_FirstKey(self, *args): return _XmippData.DocFile_set_FirstKey(self, *args)
    def get_current_valNo(self): return _XmippData.DocFile_get_current_valNo(self)
    def __call__(self, *args): return _XmippData.DocFile___call__(self, *args)
    def get_angles(self, *args): return _XmippData.DocFile_get_angles(self, *args)
    def get_angles1(self, *args): return _XmippData.DocFile_get_angles1(self, *args)
    def get_angles2(self, *args): return _XmippData.DocFile_get_angles2(self, *args)
    def set_angles(self, *args): return _XmippData.DocFile_set_angles(self, *args)
    def get_image(self, *args): return _XmippData.DocFile_get_image(self, *args)
    def get_imagename(self, *args): return _XmippData.DocFile_get_imagename(self, *args)
    def set(self, *args): return _XmippData.DocFile_set(self, *args)
    def get_current_line(self): return _XmippData.DocFile_get_current_line(self)
    def renum(self): return _XmippData.DocFile_renum(self)
    def remove(self, *args): return _XmippData.DocFile_remove(self, *args)
    def remove_current(self): return _XmippData.DocFile_remove_current(self)
    def insert_data_line(self, *args): return _XmippData.DocFile_insert_data_line(self, *args)
    def insert_comment(self, *args): return _XmippData.DocFile_insert_comment(self, *args)
    def insert_line(self, *args): return _XmippData.DocFile_insert_line(self, *args)
    def append_data_line(self, *args): return _XmippData.DocFile_append_data_line(self, *args)
    def append_angles(self, *args): return _XmippData.DocFile_append_angles(self, *args)
    def append_comment(self, *args): return _XmippData.DocFile_append_comment(self, *args)
    def append_line(self, *args): return _XmippData.DocFile_append_line(self, *args)
    def clean_comments(self): return _XmippData.DocFile_clean_comments(self)
    def randomize(self): return _XmippData.DocFile_randomize(self)
    def perturb_column(self, *args): return _XmippData.DocFile_perturb_column(self, *args)
    def merge(self, *args): return _XmippData.DocFile_merge(self, *args)
    def random_discard(self, *args): return _XmippData.DocFile_random_discard(self, *args)
    def sort_by_filenames(self): return _XmippData.DocFile_sort_by_filenames(self)
    def col(self, *args): return _XmippData.DocFile_col(self, *args)
    def row(self, *args): return _XmippData.DocFile_row(self, *args)
    def setCol(self, *args): return _XmippData.DocFile_setCol(self, *args)
    def __str__(self): return _XmippData.DocFile___str__(self)
    __swig_destroy__ = _XmippData.delete_DocFile
    __del__ = lambda self : None;
DocFile_swigregister = _XmippData.DocFile_swigregister
DocFile_swigregister(DocFile)
DOCMERGE_KEEP_OLD = _XmippData.DOCMERGE_KEEP_OLD
DOCMERGE_KEEP_NEW = _XmippData.DOCMERGE_KEEP_NEW
DOCMERGE_SUM_COLUMN = _XmippData.DOCMERGE_SUM_COLUMN
DOCMERGE_ERROR = _XmippData.DOCMERGE_ERROR


def read_Euler_document_file(*args):
  return _XmippData.read_Euler_document_file(*args)
read_Euler_document_file = _XmippData.read_Euler_document_file

def select_images(*args):
  return _XmippData.select_images(*args)
select_images = _XmippData.select_images

def get_subset_docfile(*args):
  return _XmippData.get_subset_docfile(*args)
get_subset_docfile = _XmippData.get_subset_docfile

def checkAngle(*args):
  return _XmippData.checkAngle(*args)
checkAngle = _XmippData.checkAngle
CPPSQLITE_ERROR = _XmippData.CPPSQLITE_ERROR
class CppSQLite3Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CppSQLite3Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CppSQLite3Table, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_CppSQLite3Table(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_CppSQLite3Table
    __del__ = lambda self : None;
    def assign(self, *args): return _XmippData.CppSQLite3Table_assign(self, *args)
    def numFields(self): return _XmippData.CppSQLite3Table_numFields(self)
    def numRows(self): return _XmippData.CppSQLite3Table_numRows(self)
    def fieldName(self, *args): return _XmippData.CppSQLite3Table_fieldName(self, *args)
    def fieldValue(self, *args): return _XmippData.CppSQLite3Table_fieldValue(self, *args)
    def getIntField(self, *args): return _XmippData.CppSQLite3Table_getIntField(self, *args)
    def getFloatField(self, *args): return _XmippData.CppSQLite3Table_getFloatField(self, *args)
    def getStringField(self, *args): return _XmippData.CppSQLite3Table_getStringField(self, *args)
    def fieldIsNull(self, *args): return _XmippData.CppSQLite3Table_fieldIsNull(self, *args)
    def setRow(self, *args): return _XmippData.CppSQLite3Table_setRow(self, *args)
    def finalize(self): return _XmippData.CppSQLite3Table_finalize(self)
CppSQLite3Table_swigregister = _XmippData.CppSQLite3Table_swigregister
CppSQLite3Table_swigregister(CppSQLite3Table)

class CppSQLite3DB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CppSQLite3DB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CppSQLite3DB, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _XmippData.new_CppSQLite3DB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_CppSQLite3DB
    __del__ = lambda self : None;
    def open(self, *args): return _XmippData.CppSQLite3DB_open(self, *args)
    def close(self): return _XmippData.CppSQLite3DB_close(self)
    def tableExists(self, *args): return _XmippData.CppSQLite3DB_tableExists(self, *args)
    def execDML(self, *args): return _XmippData.CppSQLite3DB_execDML(self, *args)
    def execQuery(self, *args): return _XmippData.CppSQLite3DB_execQuery(self, *args)
    def execScalar(self, *args): return _XmippData.CppSQLite3DB_execScalar(self, *args)
    def getTable(self, *args): return _XmippData.CppSQLite3DB_getTable(self, *args)
    def compileStatement(self, *args): return _XmippData.CppSQLite3DB_compileStatement(self, *args)
    def lastRowId(self): return _XmippData.CppSQLite3DB_lastRowId(self)
    def interrupt(self): return _XmippData.CppSQLite3DB_interrupt(self)
    def setBusyTimeout(self, *args): return _XmippData.CppSQLite3DB_setBusyTimeout(self, *args)
    __swig_getmethods__["SQLiteVersion"] = lambda x: _XmippData.CppSQLite3DB_SQLiteVersion
    if _newclass:SQLiteVersion = staticmethod(_XmippData.CppSQLite3DB_SQLiteVersion)
CppSQLite3DB_swigregister = _XmippData.CppSQLite3DB_swigregister
CppSQLite3DB_swigregister(CppSQLite3DB)

def CppSQLite3DB_SQLiteVersion():
  return _XmippData.CppSQLite3DB_SQLiteVersion()
CppSQLite3DB_SQLiteVersion = _XmippData.CppSQLite3DB_SQLiteVersion

class MetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_MetaData(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _XmippData.MetaData_assign(self, *args)
    __swig_destroy__ = _XmippData.delete_MetaData
    __del__ = lambda self : None;
    def setColumnFormat(self, *args): return _XmippData.MetaData_setColumnFormat(self, *args)
    def setValue(self, *args): return _XmippData.MetaData_setValue(self, *args)
    def getValue(self, *args): return _XmippData.MetaData_getValue(self, *args)
    def readOldSelFile(self, *args): return _XmippData.MetaData_readOldSelFile(self, *args)
    def readOldDocFile(self, *args): return _XmippData.MetaData_readOldDocFile(self, *args)
    def read(self, *args): return _XmippData.MetaData_read(self, *args)
    def toDataBase(self, *args): return _XmippData.MetaData_toDataBase(self, *args)
    __swig_setmethods__["activeLabels"] = _XmippData.MetaData_activeLabels_set
    __swig_getmethods__["activeLabels"] = _XmippData.MetaData_activeLabels_get
    if _newclass:activeLabels = _swig_property(_XmippData.MetaData_activeLabels_get, _XmippData.MetaData_activeLabels_set)
    __swig_setmethods__["ignoreLabels"] = _XmippData.MetaData_ignoreLabels_set
    __swig_getmethods__["ignoreLabels"] = _XmippData.MetaData_ignoreLabels_get
    if _newclass:ignoreLabels = _swig_property(_XmippData.MetaData_ignoreLabels_get, _XmippData.MetaData_ignoreLabels_set)
    def addObject(self, *args): return _XmippData.MetaData_addObject(self, *args)
    NO_OBJECTS_STORED = _XmippData.MetaData_NO_OBJECTS_STORED
    NO_MORE_OBJECTS = _XmippData.MetaData_NO_MORE_OBJECTS
    NO_OBJECT_FOUND = _XmippData.MetaData_NO_OBJECT_FOUND
    def firstObject(self): return _XmippData.MetaData_firstObject(self)
    def nextObject(self): return _XmippData.MetaData_nextObject(self)
    def lastObject(self): return _XmippData.MetaData_lastObject(self)
    def goToObject(self, *args): return _XmippData.MetaData_goToObject(self, *args)
    def write(self, *args): return _XmippData.MetaData_write(self, *args)
    def isEmpty(self): return _XmippData.MetaData_isEmpty(self)
    def clear(self): return _XmippData.MetaData_clear(self)
    def writeValueToString(self, *args): return _XmippData.MetaData_writeValueToString(self, *args)
    def fastSearch(self, *args): return _XmippData.MetaData_fastSearch(self, *args)
    def findObjects(self, *args): return _XmippData.MetaData_findObjects(self, *args)
    def findObjectsInRange(self, *args): return _XmippData.MetaData_findObjectsInRange(self, *args)
    def combine(self, *args): return _XmippData.MetaData_combine(self, *args)
    def combineWithFiles(self, *args): return _XmippData.MetaData_combineWithFiles(self, *args)
    def removeObjects(self, *args): return _XmippData.MetaData_removeObjects(self, *args)
    def removeObject(self, *args): return _XmippData.MetaData_removeObject(self, *args)
    def setPath(self, newPath = ""): return _XmippData.MetaData_setPath(self, newPath)
    def setComment(self, Comment = ""): return _XmippData.MetaData_setComment(self, Comment)
    def getPath(self): return _XmippData.MetaData_getPath(self)
    def getComment(self): return _XmippData.MetaData_getComment(self)
    def size(self): return _XmippData.MetaData_size(self)
    def getFilename(self): return _XmippData.MetaData_getFilename(self)
    def countObjects(self, *args): return _XmippData.MetaData_countObjects(self, *args)
    def detectObjects(self, *args): return _XmippData.MetaData_detectObjects(self, *args)
MetaData_swigregister = _XmippData.MetaData_swigregister
MetaData_swigregister(MetaData)


def get_statistics(*args):
  return _XmippData.get_statistics(*args)
get_statistics = _XmippData.get_statistics
MDL_UNDEFINED = _XmippData.MDL_UNDEFINED
MDL_FIRST_LABEL = _XmippData.MDL_FIRST_LABEL
MDL_ANGLEPSI = _XmippData.MDL_ANGLEPSI
MDL_ANGLEROT = _XmippData.MDL_ANGLEROT
MDL_ANGLETILT = _XmippData.MDL_ANGLETILT
MDL_COMMENT = _XmippData.MDL_COMMENT
MDL_CTFINPUTPARAMS = _XmippData.MDL_CTFINPUTPARAMS
MDL_CTFMODEL = _XmippData.MDL_CTFMODEL
MDL_ENABLED = _XmippData.MDL_ENABLED
MDL_FLIP = _XmippData.MDL_FLIP
MDL_IMAGE = _XmippData.MDL_IMAGE
MDL_MAXCC = _XmippData.MDL_MAXCC
MDL_MICROGRAPH = _XmippData.MDL_MICROGRAPH
MDL_NMA = _XmippData.MDL_NMA
MDL_ORIGINX = _XmippData.MDL_ORIGINX
MDL_ORIGINY = _XmippData.MDL_ORIGINY
MDL_ORIGINZ = _XmippData.MDL_ORIGINZ
MDL_PERIODOGRAM = _XmippData.MDL_PERIODOGRAM
MDL_PMAX = _XmippData.MDL_PMAX
MDL_REF = _XmippData.MDL_REF
MDL_SCALE = _XmippData.MDL_SCALE
MDL_SERIE = _XmippData.MDL_SERIE
MDL_SHIFTX = _XmippData.MDL_SHIFTX
MDL_SHIFTY = _XmippData.MDL_SHIFTY
MDL_SHIFTZ = _XmippData.MDL_SHIFTZ
MDL_WEIGHT = _XmippData.MDL_WEIGHT
MDL_SAMPLINGRATE = _XmippData.MDL_SAMPLINGRATE
MDL_VOLTAGE = _XmippData.MDL_VOLTAGE
MDL_DEFOCUSU = _XmippData.MDL_DEFOCUSU
MDL_DEFOCUSV = _XmippData.MDL_DEFOCUSV
MDL_LAST_LABEL = _XmippData.MDL_LAST_LABEL

def isString(*args):
  return _XmippData.isString(*args)
isString = _XmippData.isString

def isDouble(*args):
  return _XmippData.isDouble(*args)
isDouble = _XmippData.isDouble

def isVector(*args):
  return _XmippData.isVector(*args)
isVector = _XmippData.isVector

def isBool(*args):
  return _XmippData.isBool(*args)
isBool = _XmippData.isBool

def isInt(*args):
  return _XmippData.isInt(*args)
isInt = _XmippData.isInt
class MetaDataContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaDataContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaDataContainer, name)
    __repr__ = _swig_repr
    def assign(self, *args): return _XmippData.MetaDataContainer_assign(self, *args)
    def __init__(self, *args): 
        this = _XmippData.new_MetaDataContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_MetaDataContainer
    __del__ = lambda self : None;
    def addValue(self, *args): return _XmippData.MetaDataContainer_addValue(self, *args)
    def getValue(self, *args): return _XmippData.MetaDataContainer_getValue(self, *args)
    def valueExists(self, *args): return _XmippData.MetaDataContainer_valueExists(self, *args)
    def pairExists(self, *args): return _XmippData.MetaDataContainer_pairExists(self, *args)
    def deleteValue(self, *args): return _XmippData.MetaDataContainer_deleteValue(self, *args)
    def writeValueToFile(self, *args): return _XmippData.MetaDataContainer_writeValueToFile(self, *args)
    def writeValueToString(self, *args): return _XmippData.MetaDataContainer_writeValueToString(self, *args)
    __swig_getmethods__["codifyLabel"] = lambda x: _XmippData.MetaDataContainer_codifyLabel
    if _newclass:codifyLabel = staticmethod(_XmippData.MetaDataContainer_codifyLabel)
    __swig_getmethods__["decodeLabel"] = lambda x: _XmippData.MetaDataContainer_decodeLabel
    if _newclass:decodeLabel = staticmethod(_XmippData.MetaDataContainer_decodeLabel)
    __swig_getmethods__["isValidLabel"] = lambda x: _XmippData.MetaDataContainer_isValidLabel
    if _newclass:isValidLabel = staticmethod(_XmippData.MetaDataContainer_isValidLabel)
MetaDataContainer_swigregister = _XmippData.MetaDataContainer_swigregister
MetaDataContainer_swigregister(MetaDataContainer)

def MetaDataContainer_codifyLabel(*args):
  return _XmippData.MetaDataContainer_codifyLabel(*args)
MetaDataContainer_codifyLabel = _XmippData.MetaDataContainer_codifyLabel

def MetaDataContainer_decodeLabel(*args):
  return _XmippData.MetaDataContainer_decodeLabel(*args)
MetaDataContainer_decodeLabel = _XmippData.MetaDataContainer_decodeLabel

def MetaDataContainer_isValidLabel(*args):
  return _XmippData.MetaDataContainer_isValidLabel(*args)
MetaDataContainer_isValidLabel = _XmippData.MetaDataContainer_isValidLabel

class vectorm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorm, name)
    __repr__ = _swig_repr
    def iterator(self): return _XmippData.vectorm_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XmippData.vectorm___nonzero__(self)
    def __bool__(self): return _XmippData.vectorm___bool__(self)
    def __len__(self): return _XmippData.vectorm___len__(self)
    def pop(self): return _XmippData.vectorm_pop(self)
    def __getslice__(self, *args): return _XmippData.vectorm___getslice__(self, *args)
    def __setslice__(self, *args): return _XmippData.vectorm___setslice__(self, *args)
    def __delslice__(self, *args): return _XmippData.vectorm___delslice__(self, *args)
    def __delitem__(self, *args): return _XmippData.vectorm___delitem__(self, *args)
    def __getitem__(self, *args): return _XmippData.vectorm___getitem__(self, *args)
    def __setitem__(self, *args): return _XmippData.vectorm___setitem__(self, *args)
    def append(self, *args): return _XmippData.vectorm_append(self, *args)
    def empty(self): return _XmippData.vectorm_empty(self)
    def size(self): return _XmippData.vectorm_size(self)
    def clear(self): return _XmippData.vectorm_clear(self)
    def swap(self, *args): return _XmippData.vectorm_swap(self, *args)
    def get_allocator(self): return _XmippData.vectorm_get_allocator(self)
    def begin(self): return _XmippData.vectorm_begin(self)
    def end(self): return _XmippData.vectorm_end(self)
    def rbegin(self): return _XmippData.vectorm_rbegin(self)
    def rend(self): return _XmippData.vectorm_rend(self)
    def pop_back(self): return _XmippData.vectorm_pop_back(self)
    def erase(self, *args): return _XmippData.vectorm_erase(self, *args)
    def __init__(self, *args): 
        this = _XmippData.new_vectorm(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XmippData.vectorm_push_back(self, *args)
    def front(self): return _XmippData.vectorm_front(self)
    def back(self): return _XmippData.vectorm_back(self)
    def assign(self, *args): return _XmippData.vectorm_assign(self, *args)
    def resize(self, *args): return _XmippData.vectorm_resize(self, *args)
    def insert(self, *args): return _XmippData.vectorm_insert(self, *args)
    def reserve(self, *args): return _XmippData.vectorm_reserve(self, *args)
    def capacity(self): return _XmippData.vectorm_capacity(self)
    __swig_destroy__ = _XmippData.delete_vectorm
    __del__ = lambda self : None;
vectorm_swigregister = _XmippData.vectorm_swigregister
vectorm_swigregister(vectorm)




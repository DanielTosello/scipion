# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _XmippData
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _XmippData.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _XmippData.PySwigIterator_value(*args)
    def incr(*args): return _XmippData.PySwigIterator_incr(*args)
    def decr(*args): return _XmippData.PySwigIterator_decr(*args)
    def distance(*args): return _XmippData.PySwigIterator_distance(*args)
    def equal(*args): return _XmippData.PySwigIterator_equal(*args)
    def copy(*args): return _XmippData.PySwigIterator_copy(*args)
    def next(*args): return _XmippData.PySwigIterator_next(*args)
    def previous(*args): return _XmippData.PySwigIterator_previous(*args)
    def advance(*args): return _XmippData.PySwigIterator_advance(*args)
    def __eq__(*args): return _XmippData.PySwigIterator___eq__(*args)
    def __ne__(*args): return _XmippData.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _XmippData.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _XmippData.PySwigIterator___isub__(*args)
    def __add__(*args): return _XmippData.PySwigIterator___add__(*args)
    def __sub__(*args): return _XmippData.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _XmippData.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(*args): return _XmippData.vectori_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _XmippData.vectori___nonzero__(*args)
    def __len__(*args): return _XmippData.vectori___len__(*args)
    def pop(*args): return _XmippData.vectori_pop(*args)
    def __getslice__(*args): return _XmippData.vectori___getslice__(*args)
    def __setslice__(*args): return _XmippData.vectori___setslice__(*args)
    def __delslice__(*args): return _XmippData.vectori___delslice__(*args)
    def __delitem__(*args): return _XmippData.vectori___delitem__(*args)
    def __getitem__(*args): return _XmippData.vectori___getitem__(*args)
    def __setitem__(*args): return _XmippData.vectori___setitem__(*args)
    def append(*args): return _XmippData.vectori_append(*args)
    def empty(*args): return _XmippData.vectori_empty(*args)
    def size(*args): return _XmippData.vectori_size(*args)
    def clear(*args): return _XmippData.vectori_clear(*args)
    def swap(*args): return _XmippData.vectori_swap(*args)
    def get_allocator(*args): return _XmippData.vectori_get_allocator(*args)
    def begin(*args): return _XmippData.vectori_begin(*args)
    def end(*args): return _XmippData.vectori_end(*args)
    def rbegin(*args): return _XmippData.vectori_rbegin(*args)
    def rend(*args): return _XmippData.vectori_rend(*args)
    def pop_back(*args): return _XmippData.vectori_pop_back(*args)
    def erase(*args): return _XmippData.vectori_erase(*args)
    def __init__(self, *args): 
        this = _XmippData.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _XmippData.vectori_push_back(*args)
    def front(*args): return _XmippData.vectori_front(*args)
    def back(*args): return _XmippData.vectori_back(*args)
    def assign(*args): return _XmippData.vectori_assign(*args)
    def resize(*args): return _XmippData.vectori_resize(*args)
    def insert(*args): return _XmippData.vectori_insert(*args)
    def reserve(*args): return _XmippData.vectori_reserve(*args)
    def capacity(*args): return _XmippData.vectori_capacity(*args)
    __swig_destroy__ = _XmippData.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _XmippData.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(*args): return _XmippData.vectord_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _XmippData.vectord___nonzero__(*args)
    def __len__(*args): return _XmippData.vectord___len__(*args)
    def pop(*args): return _XmippData.vectord_pop(*args)
    def __getslice__(*args): return _XmippData.vectord___getslice__(*args)
    def __setslice__(*args): return _XmippData.vectord___setslice__(*args)
    def __delslice__(*args): return _XmippData.vectord___delslice__(*args)
    def __delitem__(*args): return _XmippData.vectord___delitem__(*args)
    def __getitem__(*args): return _XmippData.vectord___getitem__(*args)
    def __setitem__(*args): return _XmippData.vectord___setitem__(*args)
    def append(*args): return _XmippData.vectord_append(*args)
    def empty(*args): return _XmippData.vectord_empty(*args)
    def size(*args): return _XmippData.vectord_size(*args)
    def clear(*args): return _XmippData.vectord_clear(*args)
    def swap(*args): return _XmippData.vectord_swap(*args)
    def get_allocator(*args): return _XmippData.vectord_get_allocator(*args)
    def begin(*args): return _XmippData.vectord_begin(*args)
    def end(*args): return _XmippData.vectord_end(*args)
    def rbegin(*args): return _XmippData.vectord_rbegin(*args)
    def rend(*args): return _XmippData.vectord_rend(*args)
    def pop_back(*args): return _XmippData.vectord_pop_back(*args)
    def erase(*args): return _XmippData.vectord_erase(*args)
    def __init__(self, *args): 
        this = _XmippData.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _XmippData.vectord_push_back(*args)
    def front(*args): return _XmippData.vectord_front(*args)
    def back(*args): return _XmippData.vectord_back(*args)
    def assign(*args): return _XmippData.vectord_assign(*args)
    def resize(*args): return _XmippData.vectord_resize(*args)
    def insert(*args): return _XmippData.vectord_insert(*args)
    def reserve(*args): return _XmippData.vectord_reserve(*args)
    def capacity(*args): return _XmippData.vectord_capacity(*args)
    __swig_destroy__ = _XmippData.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _XmippData.vectord_swigregister
vectord_swigregister(vectord)

class vectorli(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorli, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorli, name)
    __repr__ = _swig_repr
    def iterator(*args): return _XmippData.vectorli_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _XmippData.vectorli___nonzero__(*args)
    def __len__(*args): return _XmippData.vectorli___len__(*args)
    def pop(*args): return _XmippData.vectorli_pop(*args)
    def __getslice__(*args): return _XmippData.vectorli___getslice__(*args)
    def __setslice__(*args): return _XmippData.vectorli___setslice__(*args)
    def __delslice__(*args): return _XmippData.vectorli___delslice__(*args)
    def __delitem__(*args): return _XmippData.vectorli___delitem__(*args)
    def __getitem__(*args): return _XmippData.vectorli___getitem__(*args)
    def __setitem__(*args): return _XmippData.vectorli___setitem__(*args)
    def append(*args): return _XmippData.vectorli_append(*args)
    def empty(*args): return _XmippData.vectorli_empty(*args)
    def size(*args): return _XmippData.vectorli_size(*args)
    def clear(*args): return _XmippData.vectorli_clear(*args)
    def swap(*args): return _XmippData.vectorli_swap(*args)
    def get_allocator(*args): return _XmippData.vectorli_get_allocator(*args)
    def begin(*args): return _XmippData.vectorli_begin(*args)
    def end(*args): return _XmippData.vectorli_end(*args)
    def rbegin(*args): return _XmippData.vectorli_rbegin(*args)
    def rend(*args): return _XmippData.vectorli_rend(*args)
    def pop_back(*args): return _XmippData.vectorli_pop_back(*args)
    def erase(*args): return _XmippData.vectorli_erase(*args)
    def __init__(self, *args): 
        this = _XmippData.new_vectorli(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _XmippData.vectorli_push_back(*args)
    def front(*args): return _XmippData.vectorli_front(*args)
    def back(*args): return _XmippData.vectorli_back(*args)
    def assign(*args): return _XmippData.vectorli_assign(*args)
    def resize(*args): return _XmippData.vectorli_resize(*args)
    def insert(*args): return _XmippData.vectorli_insert(*args)
    def reserve(*args): return _XmippData.vectorli_reserve(*args)
    def capacity(*args): return _XmippData.vectorli_capacity(*args)
    __swig_destroy__ = _XmippData.delete_vectorli
    __del__ = lambda self : None;
vectorli_swigregister = _XmippData.vectorli_swigregister
vectorli_swigregister(vectorli)

class intP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_intP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_intP
    __del__ = lambda self : None;
    def assign(*args): return _XmippData.intP_assign(*args)
    def value(*args): return _XmippData.intP_value(*args)
    def cast(*args): return _XmippData.intP_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.intP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.intP_frompointer)
intP_swigregister = _XmippData.intP_swigregister
intP_swigregister(intP)
intP_frompointer = _XmippData.intP_frompointer

class charP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_charP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_charP
    __del__ = lambda self : None;
    def assign(*args): return _XmippData.charP_assign(*args)
    def value(*args): return _XmippData.charP_value(*args)
    def cast(*args): return _XmippData.charP_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.charP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.charP_frompointer)
charP_swigregister = _XmippData.charP_swigregister
charP_swigregister(charP)
charP_frompointer = _XmippData.charP_frompointer

class doubleP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_doubleP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_doubleP
    __del__ = lambda self : None;
    def assign(*args): return _XmippData.doubleP_assign(*args)
    def value(*args): return _XmippData.doubleP_value(*args)
    def cast(*args): return _XmippData.doubleP_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.doubleP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.doubleP_frompointer)
doubleP_swigregister = _XmippData.doubleP_swigregister
doubleP_swigregister(doubleP)
doubleP_frompointer = _XmippData.doubleP_frompointer

class floatP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_floatP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_floatP
    __del__ = lambda self : None;
    def assign(*args): return _XmippData.floatP_assign(*args)
    def value(*args): return _XmippData.floatP_value(*args)
    def cast(*args): return _XmippData.floatP_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.floatP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.floatP_frompointer)
floatP_swigregister = _XmippData.floatP_swigregister
floatP_swigregister(floatP)
floatP_frompointer = _XmippData.floatP_frompointer

class stringP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringP, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_stringP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_stringP
    __del__ = lambda self : None;
    def assign(*args): return _XmippData.stringP_assign(*args)
    def value(*args): return _XmippData.stringP_value(*args)
    def cast(*args): return _XmippData.stringP_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _XmippData.stringP_frompointer
    if _newclass:frompointer = staticmethod(_XmippData.stringP_frompointer)
stringP_swigregister = _XmippData.stringP_swigregister
stringP_swigregister(stringP)
stringP_frompointer = _XmippData.stringP_frompointer

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_string(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_string
    __del__ = lambda self : None;
string_swigregister = _XmippData.string_swigregister
string_swigregister(string)

class Tabsinc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tabsinc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tabsinc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_Tabsinc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_Tabsinc
    __del__ = lambda self : None;
    def __call__(*args): return _XmippData.Tabsinc___call__(*args)
    def filltable(*args): return _XmippData.Tabsinc_filltable(*args)
Tabsinc_swigregister = _XmippData.Tabsinc_swigregister
Tabsinc_swigregister(Tabsinc)

class KaiserBessel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KaiserBessel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KaiserBessel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_KaiserBessel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_KaiserBessel
    __del__ = lambda self : None;
    def I0table_maxerror(*args): return _XmippData.KaiserBessel_I0table_maxerror(*args)
    def dump_table(*args): return _XmippData.KaiserBessel_dump_table(*args)
    def sinhwin(*args): return _XmippData.KaiserBessel_sinhwin(*args)
    def i0win(*args): return _XmippData.KaiserBessel_i0win(*args)
    def i0win_tab(*args): return _XmippData.KaiserBessel_i0win_tab(*args)
    def get_window_size(*args): return _XmippData.KaiserBessel_get_window_size(*args)
KaiserBessel_swigregister = _XmippData.KaiserBessel_swigregister
KaiserBessel_swigregister(KaiserBessel)

icdf_gauss = _XmippData.icdf_gauss
cdf_gauss = _XmippData.cdf_gauss
cdf_tstudent = _XmippData.cdf_tstudent
cdf_FSnedecor = _XmippData.cdf_FSnedecor
icdf_FSnedecor = _XmippData.icdf_FSnedecor
log2 = _XmippData.log2
randomize_random_generator = _XmippData.randomize_random_generator
student_outside_probb = _XmippData.student_outside_probb
student_within_t0 = _XmippData.student_within_t0
student_outside_t0 = _XmippData.student_outside_t0
student_up_to_t0 = _XmippData.student_up_to_t0
student_from_t0 = _XmippData.student_from_t0
chi2_up_to_t0 = _XmippData.chi2_up_to_t0
chi2_from_t0 = _XmippData.chi2_from_t0
rnd_log = _XmippData.rnd_log
class FileName(string):
    __swig_setmethods__ = {}
    for _s in [string]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileName, name, value)
    __swig_getmethods__ = {}
    for _s in [string]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_FileName(*args)
        try: self.this.append(this)
        except: self.this = this
    def compose(*args): return _XmippData.FileName_compose(*args)
    def get_root(*args): return _XmippData.FileName_get_root(*args)
    def to_lowercase(*args): return _XmippData.FileName_to_lowercase(*args)
    def to_uppercase(*args): return _XmippData.FileName_to_uppercase(*args)
    def contains(*args): return _XmippData.FileName_contains(*args)
    def before_first_of(*args): return _XmippData.FileName_before_first_of(*args)
    def before_last_of(*args): return _XmippData.FileName_before_last_of(*args)
    def after_first_of(*args): return _XmippData.FileName_after_first_of(*args)
    def after_last_of(*args): return _XmippData.FileName_after_last_of(*args)
    def get_baseName(*args): return _XmippData.FileName_get_baseName(*args)
    def get_number(*args): return _XmippData.FileName_get_number(*args)
    def get_extension(*args): return _XmippData.FileName_get_extension(*args)
    def init_random(*args): return _XmippData.FileName_init_random(*args)
    def add_prefix(*args): return _XmippData.FileName_add_prefix(*args)
    def add_extension(*args): return _XmippData.FileName_add_extension(*args)
    def without_extension(*args): return _XmippData.FileName_without_extension(*args)
    def without_root(*args): return _XmippData.FileName_without_root(*args)
    def insert_before_extension(*args): return _XmippData.FileName_insert_before_extension(*args)
    def remove_extension(*args): return _XmippData.FileName_remove_extension(*args)
    def remove_all_extensions(*args): return _XmippData.FileName_remove_all_extensions(*args)
    def get_file_format(*args): return _XmippData.FileName_get_file_format(*args)
    def isMetaData(*args): return _XmippData.FileName_isMetaData(*args)
    def substitute_extension(*args): return _XmippData.FileName_substitute_extension(*args)
    def without(*args): return _XmippData.FileName_without(*args)
    def remove_until_prefix(*args): return _XmippData.FileName_remove_until_prefix(*args)
    def remove_directories(*args): return _XmippData.FileName_remove_directories(*args)
    def __str__(*args): return _XmippData.FileName___str__(*args)
    __swig_destroy__ = _XmippData.delete_FileName
    __del__ = lambda self : None;
FileName_swigregister = _XmippData.FileName_swigregister
FileName_swigregister(FileName)
solve_2nd_degree_eq = _XmippData.solve_2nd_degree_eq
gaussian1D = _XmippData.gaussian1D
tstudent1D = _XmippData.tstudent1D
gaussian2D = _XmippData.gaussian2D
init_random_generator = _XmippData.init_random_generator
rnd_unif = _XmippData.rnd_unif
rnd_student_t = _XmippData.rnd_student_t
rnd_gaus = _XmippData.rnd_gaus
gaus_within_x0 = _XmippData.gaus_within_x0
gaus_outside_x0 = _XmippData.gaus_outside_x0
gaus_up_to_x0 = _XmippData.gaus_up_to_x0
gaus_from_x0 = _XmippData.gaus_from_x0

exists = _XmippData.exists
xmippBaseDir = _XmippData.xmippBaseDir
init_progress_bar = _XmippData.init_progress_bar
progress_bar = _XmippData.progress_bar
TimeMessage = _XmippData.TimeMessage
swapbytes = _XmippData.swapbytes
IsBigEndian = _XmippData.IsBigEndian
IsLittleEndian = _XmippData.IsLittleEndian
divide_equally = _XmippData.divide_equally
checkAngle = _XmippData.checkAngle
CPPSQLITE_ERROR = _XmippData.CPPSQLITE_ERROR
class CppSQLite3Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CppSQLite3Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CppSQLite3Table, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_CppSQLite3Table(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_CppSQLite3Table
    __del__ = lambda self : None;
    def assign(*args): return _XmippData.CppSQLite3Table_assign(*args)
    def numFields(*args): return _XmippData.CppSQLite3Table_numFields(*args)
    def numRows(*args): return _XmippData.CppSQLite3Table_numRows(*args)
    def fieldName(*args): return _XmippData.CppSQLite3Table_fieldName(*args)
    def fieldValue(*args): return _XmippData.CppSQLite3Table_fieldValue(*args)
    def getIntField(*args): return _XmippData.CppSQLite3Table_getIntField(*args)
    def getFloatField(*args): return _XmippData.CppSQLite3Table_getFloatField(*args)
    def getStringField(*args): return _XmippData.CppSQLite3Table_getStringField(*args)
    def fieldIsNull(*args): return _XmippData.CppSQLite3Table_fieldIsNull(*args)
    def setRow(*args): return _XmippData.CppSQLite3Table_setRow(*args)
    def finalize(*args): return _XmippData.CppSQLite3Table_finalize(*args)
CppSQLite3Table_swigregister = _XmippData.CppSQLite3Table_swigregister
CppSQLite3Table_swigregister(CppSQLite3Table)
wait_until_stable_size = _XmippData.wait_until_stable_size
create_empty_file = _XmippData.create_empty_file

class CppSQLite3DB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CppSQLite3DB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CppSQLite3DB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_CppSQLite3DB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_CppSQLite3DB
    __del__ = lambda self : None;
    def open(*args): return _XmippData.CppSQLite3DB_open(*args)
    def close(*args): return _XmippData.CppSQLite3DB_close(*args)
    def tableExists(*args): return _XmippData.CppSQLite3DB_tableExists(*args)
    def execDML(*args): return _XmippData.CppSQLite3DB_execDML(*args)
    def execQuery(*args): return _XmippData.CppSQLite3DB_execQuery(*args)
    def execScalar(*args): return _XmippData.CppSQLite3DB_execScalar(*args)
    def getTable(*args): return _XmippData.CppSQLite3DB_getTable(*args)
    def compileStatement(*args): return _XmippData.CppSQLite3DB_compileStatement(*args)
    def lastRowId(*args): return _XmippData.CppSQLite3DB_lastRowId(*args)
    def interrupt(*args): return _XmippData.CppSQLite3DB_interrupt(*args)
    def setBusyTimeout(*args): return _XmippData.CppSQLite3DB_setBusyTimeout(*args)
    __swig_getmethods__["SQLiteVersion"] = lambda x: _XmippData.CppSQLite3DB_SQLiteVersion
    if _newclass:SQLiteVersion = staticmethod(_XmippData.CppSQLite3DB_SQLiteVersion)
CppSQLite3DB_swigregister = _XmippData.CppSQLite3DB_swigregister
CppSQLite3DB_swigregister(CppSQLite3DB)
CppSQLite3DB_SQLiteVersion = _XmippData.CppSQLite3DB_SQLiteVersion

class MetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _XmippData.new_MetaData(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args): return _XmippData.MetaData_assign(*args)
    def union_(*args): return _XmippData.MetaData_union_(*args)
    def unionAll(*args): return _XmippData.MetaData_unionAll(*args)
    def aggregate(*args): return _XmippData.MetaData_aggregate(*args)
    def merge(*args): return _XmippData.MetaData_merge(*args)
    KEEP_OLD = _XmippData.MetaData_KEEP_OLD
    KEEP_NEW = _XmippData.MetaData_KEEP_NEW
    SUM = _XmippData.MetaData_SUM
    def intersection(*args): return _XmippData.MetaData_intersection(*args)
    def substraction(*args): return _XmippData.MetaData_substraction(*args)
    __swig_destroy__ = _XmippData.delete_MetaData
    __del__ = lambda self : None;
    def getObject(*args): return _XmippData.MetaData_getObject(*args)
    def setColumnFormat(*args): return _XmippData.MetaData_setColumnFormat(*args)
    def getColumnFormat(*args): return _XmippData.MetaData_getColumnFormat(*args)
    def setValue(*args): return _XmippData.MetaData_setValue(*args)
    def readOldSelFile(*args): return _XmippData.MetaData_readOldSelFile(*args)
    def readOldDocFile(*args): return _XmippData.MetaData_readOldDocFile(*args)
    def read(*args): return _XmippData.MetaData_read(*args)
    def toDataBase(*args): return _XmippData.MetaData_toDataBase(*args)
    def fromDataBase(*args): return _XmippData.MetaData_fromDataBase(*args)
    __swig_setmethods__["activeLabels"] = _XmippData.MetaData_activeLabels_set
    __swig_getmethods__["activeLabels"] = _XmippData.MetaData_activeLabels_get
    if _newclass:activeLabels = _swig_property(_XmippData.MetaData_activeLabels_get, _XmippData.MetaData_activeLabels_set)
    __swig_setmethods__["ignoreLabels"] = _XmippData.MetaData_ignoreLabels_set
    __swig_getmethods__["ignoreLabels"] = _XmippData.MetaData_ignoreLabels_get
    if _newclass:ignoreLabels = _swig_property(_XmippData.MetaData_ignoreLabels_get, _XmippData.MetaData_ignoreLabels_set)
    def addObject(*args): return _XmippData.MetaData_addObject(*args)
    NO_OBJECTS_STORED = _XmippData.MetaData_NO_OBJECTS_STORED
    NO_MORE_OBJECTS = _XmippData.MetaData_NO_MORE_OBJECTS
    NO_OBJECT_FOUND = _XmippData.MetaData_NO_OBJECT_FOUND
    def firstObject(*args): return _XmippData.MetaData_firstObject(*args)
    def nextObject(*args): return _XmippData.MetaData_nextObject(*args)
    def lastObject(*args): return _XmippData.MetaData_lastObject(*args)
    def goToObject(*args): return _XmippData.MetaData_goToObject(*args)
    def write(*args): return _XmippData.MetaData_write(*args)
    def isEmpty(*args): return _XmippData.MetaData_isEmpty(*args)
    def clear(*args): return _XmippData.MetaData_clear(*args)
    def writeValueToString(*args): return _XmippData.MetaData_writeValueToString(*args)
    def fastSearch(*args): return _XmippData.MetaData_fastSearch(*args)
    def fillMetaData(*args): return _XmippData.MetaData_fillMetaData(*args)
    def importObjects(*args): return _XmippData.MetaData_importObjects(*args)
    def combine(*args): return _XmippData.MetaData_combine(*args)
    def combineWithFiles(*args): return _XmippData.MetaData_combineWithFiles(*args)
    def removeObjects(*args): return _XmippData.MetaData_removeObjects(*args)
    def removeObject(*args): return _XmippData.MetaData_removeObject(*args)
    def setPath(*args): return _XmippData.MetaData_setPath(*args)
    def setComment(*args): return _XmippData.MetaData_setComment(*args)
    def getPath(*args): return _XmippData.MetaData_getPath(*args)
    def getComment(*args): return _XmippData.MetaData_getComment(*args)
    def size(*args): return _XmippData.MetaData_size(*args)
    def getFilename(*args): return _XmippData.MetaData_getFilename(*args)
    def valueExists(*args): return _XmippData.MetaData_valueExists(*args)
    def randomize(*args): return _XmippData.MetaData_randomize(*args)
    def sort(*args): return _XmippData.MetaData_sort(*args)
    def split_in_two(*args): return _XmippData.MetaData_split_in_two(*args)
    def mpi_select_part(*args): return _XmippData.MetaData_mpi_select_part(*args)
    def fillWithNextNObjects(*args): return _XmippData.MetaData_fillWithNextNObjects(*args)
    def MaxStringLength(*args): return _XmippData.MetaData_MaxStringLength(*args)
MetaData_swigregister = _XmippData.MetaData_swigregister
MetaData_swigregister(MetaData)

class MetaDataContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaDataContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaDataContainer, name)
    __repr__ = _swig_repr
    def assign(*args): return _XmippData.MetaDataContainer_assign(*args)
    def __init__(self, *args): 
        this = _XmippData.new_MetaDataContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_MetaDataContainer
    __del__ = lambda self : None;
    def addValue(*args): return _XmippData.MetaDataContainer_addValue(*args)
    def clear(*args): return _XmippData.MetaDataContainer_clear(*args)
    def valueExists(*args): return _XmippData.MetaDataContainer_valueExists(*args)
    def pairExists(*args): return _XmippData.MetaDataContainer_pairExists(*args)
    def deleteValue(*args): return _XmippData.MetaDataContainer_deleteValue(*args)
    def writeValueToStream(*args): return _XmippData.MetaDataContainer_writeValueToStream(*args)
    def writeValueToFile(*args): return _XmippData.MetaDataContainer_writeValueToFile(*args)
    def writeValueToString(*args): return _XmippData.MetaDataContainer_writeValueToString(*args)
MetaDataContainer_swigregister = _XmippData.MetaDataContainer_swigregister
MetaDataContainer_swigregister(MetaDataContainer)
cvar = _XmippData.cvar

MDL_UNDEFINED = _XmippData.MDL_UNDEFINED
MDL_FIRST_LABEL = _XmippData.MDL_FIRST_LABEL
MDL_ANGLEPSI2 = _XmippData.MDL_ANGLEPSI2
MDL_ANGLEPSI = _XmippData.MDL_ANGLEPSI
MDL_ANGLEROT2 = _XmippData.MDL_ANGLEROT2
MDL_ANGLEROT = _XmippData.MDL_ANGLEROT
MDL_ANGLETILT2 = _XmippData.MDL_ANGLETILT2
MDL_ANGLETILT = _XmippData.MDL_ANGLETILT
MDL_AVG = _XmippData.MDL_AVG
MDL_AZIMUTALANGLE = _XmippData.MDL_AZIMUTALANGLE
MDL_BGMEAN = _XmippData.MDL_BGMEAN
MDL_BLOCK = _XmippData.MDL_BLOCK
MDL_CELLX = _XmippData.MDL_CELLX
MDL_CELLY = _XmippData.MDL_CELLY
MDL_COMMENT = _XmippData.MDL_COMMENT
MDL_COST = _XmippData.MDL_COST
MDL_COUNT = _XmippData.MDL_COUNT
MDL_CTFINPUTPARAMS = _XmippData.MDL_CTFINPUTPARAMS
MDL_CTFMODEL = _XmippData.MDL_CTFMODEL
MDL_CTF_SAMPLING_RATE = _XmippData.MDL_CTF_SAMPLING_RATE
MDL_CTF_VOLTAGE = _XmippData.MDL_CTF_VOLTAGE
MDL_CTF_DEFOCUSU = _XmippData.MDL_CTF_DEFOCUSU
MDL_CTF_DEFOCUSV = _XmippData.MDL_CTF_DEFOCUSV
MDL_CTF_DEFOCUS_ANGLE = _XmippData.MDL_CTF_DEFOCUS_ANGLE
MDL_CTF_CS = _XmippData.MDL_CTF_CS
MDL_CTF_CA = _XmippData.MDL_CTF_CA
MDL_CTF_ENERGY_LOSS = _XmippData.MDL_CTF_ENERGY_LOSS
MDL_CTF_LENS_STABILITY = _XmippData.MDL_CTF_LENS_STABILITY
MDL_CTF_CONVERGENCE_CONE = _XmippData.MDL_CTF_CONVERGENCE_CONE
MDL_CTF_LONGITUDINAL_DISPLACEMENT = _XmippData.MDL_CTF_LONGITUDINAL_DISPLACEMENT
MDL_CTF_TRANSVERSAL_DISPLACEMENT = _XmippData.MDL_CTF_TRANSVERSAL_DISPLACEMENT
MDL_CTF_Q0 = _XmippData.MDL_CTF_Q0
MDL_CTF_K = _XmippData.MDL_CTF_K
MDL_CTFBG_GAUSSIAN_K = _XmippData.MDL_CTFBG_GAUSSIAN_K
MDL_CTFBG_GAUSSIAN_SIGMAU = _XmippData.MDL_CTFBG_GAUSSIAN_SIGMAU
MDL_CTFBG_GAUSSIAN_SIGMAV = _XmippData.MDL_CTFBG_GAUSSIAN_SIGMAV
MDL_CTFBG_GAUSSIAN_CU = _XmippData.MDL_CTFBG_GAUSSIAN_CU
MDL_CTFBG_GAUSSIAN_CV = _XmippData.MDL_CTFBG_GAUSSIAN_CV
MDL_CTFBG_GAUSSIAN_ANGLE = _XmippData.MDL_CTFBG_GAUSSIAN_ANGLE
MDL_CTFBG_SQRT_K = _XmippData.MDL_CTFBG_SQRT_K
MDL_CTFBG_SQRT_U = _XmippData.MDL_CTFBG_SQRT_U
MDL_CTFBG_SQRT_V = _XmippData.MDL_CTFBG_SQRT_V
MDL_CTFBG_SQRT_ANGLE = _XmippData.MDL_CTFBG_SQRT_ANGLE
MDL_CTFBG_BASELINE = _XmippData.MDL_CTFBG_BASELINE
MDL_CTFBG_GAUSSIAN2_K = _XmippData.MDL_CTFBG_GAUSSIAN2_K
MDL_CTFBG_GAUSSIAN2_SIGMAU = _XmippData.MDL_CTFBG_GAUSSIAN2_SIGMAU
MDL_CTFBG_GAUSSIAN2_SIGMAV = _XmippData.MDL_CTFBG_GAUSSIAN2_SIGMAV
MDL_CTFBG_GAUSSIAN2_CU = _XmippData.MDL_CTFBG_GAUSSIAN2_CU
MDL_CTFBG_GAUSSIAN2_CV = _XmippData.MDL_CTFBG_GAUSSIAN2_CV
MDL_CTFBG_GAUSSIAN2_ANGLE = _XmippData.MDL_CTFBG_GAUSSIAN2_ANGLE
MDL_DEFGROUP = _XmippData.MDL_DEFGROUP
MDL_DEFOCUSU = _XmippData.MDL_DEFOCUSU
MDL_DEFOCUSV = _XmippData.MDL_DEFOCUSV
MDL_DPR = _XmippData.MDL_DPR
MDL_ENABLED = _XmippData.MDL_ENABLED
MDL_FLIP = _XmippData.MDL_FLIP
MDL_FRC = _XmippData.MDL_FRC
MDL_FRCRANDOMNOISE = _XmippData.MDL_FRCRANDOMNOISE
MDL_IMAGE_CLASS_COUNT = _XmippData.MDL_IMAGE_CLASS_COUNT
MDL_IMAGE_CLASS_GROUP = _XmippData.MDL_IMAGE_CLASS_GROUP
MDL_IMAGE_CLASS = _XmippData.MDL_IMAGE_CLASS
MDL_IMAGE = _XmippData.MDL_IMAGE
MDL_IMAGE_ORIGINAL = _XmippData.MDL_IMAGE_ORIGINAL
MDL_IMGMD = _XmippData.MDL_IMGMD
MDL_INTSCALE = _XmippData.MDL_INTSCALE
MDL_ITER = _XmippData.MDL_ITER
MDL_K = _XmippData.MDL_K
MDL_KSTEST = _XmippData.MDL_KSTEST
MDL_LL = _XmippData.MDL_LL
MDL_MASK = _XmippData.MDL_MASK
MDL_MAXCC = _XmippData.MDL_MAXCC
MDL_MAX = _XmippData.MDL_MAX
MDL_MICROGRAPH = _XmippData.MDL_MICROGRAPH
MDL_MIN = _XmippData.MDL_MIN
MDL_MIRRORFRAC = _XmippData.MDL_MIRRORFRAC
MDL_MISSINGREGION_NR = _XmippData.MDL_MISSINGREGION_NR
MDL_MISSINGREGION_TYPE = _XmippData.MDL_MISSINGREGION_TYPE
MDL_MODELFRAC = _XmippData.MDL_MODELFRAC
MDL_NMA = _XmippData.MDL_NMA
MDL_OBJID = _XmippData.MDL_OBJID
MDL_ORIGINX = _XmippData.MDL_ORIGINX
MDL_ORIGINY = _XmippData.MDL_ORIGINY
MDL_ORIGINZ = _XmippData.MDL_ORIGINZ
MDL_PERIODOGRAM = _XmippData.MDL_PERIODOGRAM
MDL_PMAX = _XmippData.MDL_PMAX
MDL_Q0 = _XmippData.MDL_Q0
MDL_RANDOMSEED = _XmippData.MDL_RANDOMSEED
MDL_REF3D = _XmippData.MDL_REF3D
MDL_REF = _XmippData.MDL_REF
MDL_REFMD = _XmippData.MDL_REFMD
MDL_RESOLUTIONFOURIER = _XmippData.MDL_RESOLUTIONFOURIER
MDL_RESOLUTIONREAL = _XmippData.MDL_RESOLUTIONREAL
MDL_SAMPLINGRATE = _XmippData.MDL_SAMPLINGRATE
MDL_SAMPLINGRATEX = _XmippData.MDL_SAMPLINGRATEX
MDL_SAMPLINGRATEY = _XmippData.MDL_SAMPLINGRATEY
MDL_SAMPLINGRATEZ = _XmippData.MDL_SAMPLINGRATEZ
MDL_SCALE = _XmippData.MDL_SCALE
MDL_SERIE = _XmippData.MDL_SERIE
MDL_SHIFTX = _XmippData.MDL_SHIFTX
MDL_SHIFTY = _XmippData.MDL_SHIFTY
MDL_SHIFTZ = _XmippData.MDL_SHIFTZ
MDL_SHIFT_CRYSTALX = _XmippData.MDL_SHIFT_CRYSTALX
MDL_SHIFT_CRYSTALY = _XmippData.MDL_SHIFT_CRYSTALY
MDL_SHIFT_CRYSTALZ = _XmippData.MDL_SHIFT_CRYSTALZ
MDL_SIGMANOISE = _XmippData.MDL_SIGMANOISE
MDL_SIGMAOFFSET = _XmippData.MDL_SIGMAOFFSET
MDL_SIGNALCHANGE = _XmippData.MDL_SIGNALCHANGE
MDL_SPHERICALABERRATION = _XmippData.MDL_SPHERICALABERRATION
MDL_STDDEV = _XmippData.MDL_STDDEV
MDL_SUM = _XmippData.MDL_SUM
MDL_SUMWEIGHT = _XmippData.MDL_SUMWEIGHT
MDL_SYMNO = _XmippData.MDL_SYMNO
MDL_TRANSFORMATIONMTRIX = _XmippData.MDL_TRANSFORMATIONMTRIX
MDL_VOLTAGE = _XmippData.MDL_VOLTAGE
MDL_WEIGHT = _XmippData.MDL_WEIGHT
MDL_WROBUST = _XmippData.MDL_WROBUST
MDL_XINT = _XmippData.MDL_XINT
MDL_X = _XmippData.MDL_X
MDL_YINT = _XmippData.MDL_YINT
MDL_Y = _XmippData.MDL_Y
MDL_ZINT = _XmippData.MDL_ZINT
MDL_Z = _XmippData.MDL_Z
MDL_LAST_LABEL = _XmippData.MDL_LAST_LABEL
LABEL_INT = _XmippData.LABEL_INT
LABEL_BOOL = _XmippData.LABEL_BOOL
LABEL_DOUBLE = _XmippData.LABEL_DOUBLE
LABEL_FLOAT = _XmippData.LABEL_FLOAT
LABEL_STRING = _XmippData.LABEL_STRING
LABEL_VECTOR = _XmippData.LABEL_VECTOR
class MDL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDL, name)
    __repr__ = _swig_repr
    __swig_getmethods__["str2Label"] = lambda x: _XmippData.MDL_str2Label
    if _newclass:str2Label = staticmethod(_XmippData.MDL_str2Label)
    __swig_getmethods__["label2Str"] = lambda x: _XmippData.MDL_label2Str
    if _newclass:label2Str = staticmethod(_XmippData.MDL_label2Str)
    __swig_getmethods__["isInt"] = lambda x: _XmippData.MDL_isInt
    if _newclass:isInt = staticmethod(_XmippData.MDL_isInt)
    __swig_getmethods__["isBool"] = lambda x: _XmippData.MDL_isBool
    if _newclass:isBool = staticmethod(_XmippData.MDL_isBool)
    __swig_getmethods__["isString"] = lambda x: _XmippData.MDL_isString
    if _newclass:isString = staticmethod(_XmippData.MDL_isString)
    __swig_getmethods__["isDouble"] = lambda x: _XmippData.MDL_isDouble
    if _newclass:isDouble = staticmethod(_XmippData.MDL_isDouble)
    __swig_getmethods__["isVector"] = lambda x: _XmippData.MDL_isVector
    if _newclass:isVector = staticmethod(_XmippData.MDL_isVector)
    __swig_getmethods__["isValidLabel"] = lambda x: _XmippData.MDL_isValidLabel
    if _newclass:isValidLabel = staticmethod(_XmippData.MDL_isValidLabel)
    def __init__(self, *args): 
        this = _XmippData.new_MDL(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_MDL
    __del__ = lambda self : None;
MDL_swigregister = _XmippData.MDL_swigregister
MDL_swigregister(MDL)
MDL_str2Label = _XmippData.MDL_str2Label
MDL_label2Str = _XmippData.MDL_label2Str
MDL_isInt = _XmippData.MDL_isInt
MDL_isBool = _XmippData.MDL_isBool
MDL_isString = _XmippData.MDL_isString
MDL_isDouble = _XmippData.MDL_isDouble
MDL_isVector = _XmippData.MDL_isVector
MDL_isValidLabel = _XmippData.MDL_isValidLabel

class MDLabelData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDLabelData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDLabelData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _XmippData.MDLabelData_type_set
    __swig_getmethods__["type"] = _XmippData.MDLabelData_type_get
    if _newclass:type = _swig_property(_XmippData.MDLabelData_type_get, _XmippData.MDLabelData_type_set)
    __swig_setmethods__["str"] = _XmippData.MDLabelData_str_set
    __swig_getmethods__["str"] = _XmippData.MDLabelData_str_get
    if _newclass:str = _swig_property(_XmippData.MDLabelData_str_get, _XmippData.MDLabelData_str_set)
    def __init__(self, *args): 
        this = _XmippData.new_MDLabelData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _XmippData.delete_MDLabelData
    __del__ = lambda self : None;
MDLabelData_swigregister = _XmippData.MDLabelData_swigregister
MDLabelData_swigregister(MDLabelData)

class StaticInitialization(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticInitialization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StaticInitialization, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
StaticInitialization_swigregister = _XmippData.StaticInitialization_swigregister
StaticInitialization_swigregister(StaticInitialization)

class vectorm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorm, name)
    __repr__ = _swig_repr
    def iterator(*args): return _XmippData.vectorm_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _XmippData.vectorm___nonzero__(*args)
    def __len__(*args): return _XmippData.vectorm___len__(*args)
    def pop(*args): return _XmippData.vectorm_pop(*args)
    def __getslice__(*args): return _XmippData.vectorm___getslice__(*args)
    def __setslice__(*args): return _XmippData.vectorm___setslice__(*args)
    def __delslice__(*args): return _XmippData.vectorm___delslice__(*args)
    def __delitem__(*args): return _XmippData.vectorm___delitem__(*args)
    def __getitem__(*args): return _XmippData.vectorm___getitem__(*args)
    def __setitem__(*args): return _XmippData.vectorm___setitem__(*args)
    def append(*args): return _XmippData.vectorm_append(*args)
    def empty(*args): return _XmippData.vectorm_empty(*args)
    def size(*args): return _XmippData.vectorm_size(*args)
    def clear(*args): return _XmippData.vectorm_clear(*args)
    def swap(*args): return _XmippData.vectorm_swap(*args)
    def get_allocator(*args): return _XmippData.vectorm_get_allocator(*args)
    def begin(*args): return _XmippData.vectorm_begin(*args)
    def end(*args): return _XmippData.vectorm_end(*args)
    def rbegin(*args): return _XmippData.vectorm_rbegin(*args)
    def rend(*args): return _XmippData.vectorm_rend(*args)
    def pop_back(*args): return _XmippData.vectorm_pop_back(*args)
    def erase(*args): return _XmippData.vectorm_erase(*args)
    def __init__(self, *args): 
        this = _XmippData.new_vectorm(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _XmippData.vectorm_push_back(*args)
    def front(*args): return _XmippData.vectorm_front(*args)
    def back(*args): return _XmippData.vectorm_back(*args)
    def assign(*args): return _XmippData.vectorm_assign(*args)
    def resize(*args): return _XmippData.vectorm_resize(*args)
    def insert(*args): return _XmippData.vectorm_insert(*args)
    def reserve(*args): return _XmippData.vectorm_reserve(*args)
    def capacity(*args): return _XmippData.vectorm_capacity(*args)
    __swig_destroy__ = _XmippData.delete_vectorm
    __del__ = lambda self : None;
vectorm_swigregister = _XmippData.vectorm_swigregister
vectorm_swigregister(vectorm)

addObjectsInRangeInt = _XmippData.addObjectsInRangeInt
addObjectsInRangeDouble = _XmippData.addObjectsInRangeDouble
addObjectsInRangeBool = _XmippData.addObjectsInRangeBool

setValueBool = _XmippData.setValueBool
setValueInt = _XmippData.setValueInt
setValueDouble = _XmippData.setValueDouble
setValueString = _XmippData.setValueString
getValueBool = _XmippData.getValueBool
getValueInt = _XmippData.getValueInt
getValueDouble = _XmippData.getValueDouble
getValueString = _XmippData.getValueString


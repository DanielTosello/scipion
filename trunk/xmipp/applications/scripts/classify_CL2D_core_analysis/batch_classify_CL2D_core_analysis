#!/usr/bin/env python
import glob
import os
import sys
from operator import itemgetter
from threading import Thread
scriptdir=os.path.split(os.path.dirname(os.popen('which xmipp_protocols','r').read()))[0]+'/lib'
sys.path.append(scriptdir) # add default search path
import xmipp

# --------------------------------------------------------------------
def sortByPCAWithinCluster(Nproc,fnRoot,classFiles,thZscore):
    print "Sorting by PCA Within Cluster ------------------------------------------"
    fh_mpi=os.open(fnRoot + '_multivariate_analysis.sh', os.O_WRONLY | os.O_TRUNC | os.O_CREAT, 0700)
    outputFiles=[]
    classBlocks=[]
    for classFile in classFiles:
        stackFile=classFile.replace(".sel",".stk")
        rootDir,rootFile=os.path.split(classFile.replace(".sel",""))
        numberOfCodes=xmipp.SingleImgSize(stackFile)[3]
        for codeNumber in range(numberOfCodes):
            outputFile=rootDir+"/score_cluster_"+str(codeNumber)+"_"+rootFile+".sel"
            blockName="class_%06d"%codeNumber
            classBlocks.append((blockName,classFile))
            command="xmipp_classify_analyze_cluster"+\
                " -i "+classFile+\
                " --block "+blockName+\
                " --ref "+str(codeNumber)+"@"+stackFile+\
                " -o "+outputFile+\
                " --maxDist "+str(thZscore)+\
                " --quiet"
            outputFiles.append(outputFile)
            os.write(fh_mpi, command+"\n");
    os.close(fh_mpi)
    if Nproc>1:
        os.system("mpirun -np "+str(Nproc)+" xmipp_mpi_run -i "+fnRoot + '_multivariate_analysis.sh')
    else:
        os.system(fnRoot + '_multivariate_analysis.sh')
    os.remove(fnRoot + '_multivariate_analysis.sh')
    
    # Pickup results
    Zscore={}
    Nscore={}
    for outputFile in outputFiles:
        MD=xmipp.MetaData(outputFile)
        for id in MD:
            image=MD.getValue(xmipp.MDL_IMAGE)
            zscore=MD.getValue(xmipp.MDL_ZSCORE)
            if image in Zscore:
                Zscore[image]=Zscore[image]+zscore
                Nscore[image]=Nscore[image]+1
            else:
                Zscore[image]=zscore
                Nscore[image]=1
        os.remove(outputFile)
    
    # Compute average Zscore
    for image in Zscore:
        Zscore[image]=Zscore[image]/Nscore[image]

    # Filter classes
    for classBlock in classBlocks:
        MDin=xmipp.MetaData()
        MDin.readBlock(classBlock[1],classBlock[0])
        MDout=xmipp.MetaData()
        for id in MDin:
            image=MDin.getValue(xmipp.MDL_IMAGE)
            if Zscore[image]<thZscore:
                MDout.addObject()
                MDout.setValue(xmipp.MDL_IMAGE,image)
                MDout.setValue(xmipp.MDL_ZSCORE,Zscore[image])
        MDout.writeBlock(classBlock[1],classBlock[0]+"_Filtered_by_average_PCAzscore_within_clusters")

    # Update final classification
    classFile=fnRoot+".sel"
    stackFile=classFile.replace(".sel",".stk")
    numberOfCodes=xmipp.SingleImgSize(stackFile)[3]
    for codeNumber in range(numberOfCodes):
        MDin=xmipp.MetaData()
        MDin.readBlock(classFile,"class_%06d"%codeNumber)
        MDout=xmipp.MetaData()
        for id in MDin:
            image=MDin.getValue(xmipp.MDL_IMAGE)
            imagePreprocessed=image.replace('class_aligned','preprocessedImages')
            if Zscore[imagePreprocessed]<thZscore:
                MDout.addObject()
                MDout.setValue(xmipp.MDL_IMAGE,image)
                MDout.setValue(xmipp.MDL_ZSCORE,Zscore[imagePreprocessed])
        MDout.writeBlock(classFile,"class_%06d"%codeNumber+"_Filtered_by_average_PCAzscore_within_clusters")
    
# --------------------------------------------------------------------
class buildCoreThread(Thread):
    def __init__(self,Nproc,myId,fnRoot,level,Nclasses,\
        thGoodClass,Nlevels):
        Thread.__init__(self)
        self.Nproc=Nproc
        self.myId=myId
        self.fnRoot=fnRoot
        self.level=level
        self.Nlevels=Nlevels
        self.Nclasses=Nclasses
        self.thGoodClass=thGoodClass
        self.totalSum=0
        self.goodSum=0
        self.classSum=0
        self.allCores=set()

    def run(self):
        classFile=self.fnRoot+"_level_%02d.sel"%self.level
        for nclass in range(0,self.Nclasses):
            if ((nclass+1) % self.Nproc)==self.myId:
                # Read the selfile for this class and level
                blockName="class_%06d"%nclass
                thisClass=xmipp.MetaData()
                thisClass.readBlock(classFile,
                    blockName+"_Filtered_by_average_PCAzscore_within_clusters")
                self.totalSum=self.totalSum+thisClass.size()

                # For all previous levels
                coocurrence={}
                for levelp in range(0,self.level):
                    classFilep=self.fnRoot+"_level_%02d.sel"%levelp
                    # Get the number of classes in that level
                    Nclasses=xmipp.SingleImgSize(fnRoot+"_level_%02d.stk"%levelp)[3]
                    for nclassp in range(0,Nclasses):
                        blockNamep="class_%06d"%nclassp
                        otherClass=xmipp.MetaData()
                        otherClass.readBlock(classFilep,
                            blockNamep+"_Filtered_by_average_PCAzscore_within_clusters")
                        otherClass.intersection(thisClass,xmipp.MDL_IMAGE)
                        
                        if (otherClass.size()>1):
                            filesRemaining=[]
                            for id in otherClass:
                                filesRemaining.append(otherClass.getValue(xmipp.MDL_IMAGE))
                            Nremaining=len(filesRemaining)
                            for id1 in range(Nremaining):
                                for id2 in range(Nremaining):
                                    if id2>id1:
                                        key=(filesRemaining[id1],filesRemaining[id2])
                                        if key in coocurrence:
                                            coocurrence[key]=coocurrence[key]+1
                                        else:
                                            coocurrence[key]=1

                # Analyze coocurrence
                core=set()
                if len(coocurrence)>0:
                    for key in coocurrence:
                        if coocurrence[key]==self.level:
                            core.add(key[0])
                            core.add(key[1])
                if thisClass.size()>0:
                    MDout=xmipp.MetaData()
                    for image in core:
                        MDout.addObject()
                        MDout.setValue(xmipp.MDL_IMAGE,image)
                    MDout.sort(xmipp.MDL_IMAGE)
                    MDout.writeBlock(classFile,blockName+"_core")
                    if self.level==(self.Nlevels-1):
                        self.allCores=self.allCores.union(core)
                    if (float(len(core))/thisClass.size())>self.thGoodClass:
                        self.goodSum=self.goodSum+len(core)
                        self.classSum=self.classSum+1

def computeCores(Nproc,fnRoot,Nlevels):
    print "Computing cores -------------------------------------------"
    allCoresFinalLevel=set()
    for level in range(1,Nlevels):
        # Get the number of classes in that level
        Nclasses=xmipp.SingleImgSize(fnRoot+"_level_%02d.stk"%level)[3]
        
        # Analyz this level in threads
        print "Analyzing "+str(Nclasses)+" classes at level "+str(level)
        threadList=[]
        for i in range(0,Nproc):
            currentThread=buildCoreThread(Nproc,i,
                fnRoot,level,Nclasses,thGoodClass,Nlevels)
            threadList.append(currentThread)
            currentThread.start()

        # Pickup results from threads
        totalSum=0
        goodSum=0
        classSum=0
        for thread in threadList:
            thread.join()
            totalSum=totalSum+thread.totalSum
            goodSum=goodSum+thread.goodSum
            classSum=classSum+thread.classSum
            if level==(Nlevels-1):
                allCoresFinalLevel=allCoresFinalLevel.union(thread.allCores)

        print "   "+str(goodSum)+" out of "+str(totalSum)+\
            " images are in "+str(classSum)+" good classes"
        
    # Update final classification
    classFile=fnRoot+".sel"
    stackFile=classFile.replace(".sel",".stk")
    numberOfCodes=xmipp.SingleImgSize(stackFile)[3]
    for codeNumber in range(numberOfCodes):
        MDin=xmipp.MetaData()
        MDin.readBlock(classFile,"class_%06d"%codeNumber+\
            "_Filtered_by_average_PCAzscore_within_clusters")
        MDout=xmipp.MetaData()
        for id in MDin:
            image=MDin.getValue(xmipp.MDL_IMAGE)
            imagePreprocessed=image.replace('class_aligned','preprocessedImages')
            if imagePreprocessed in allCoresFinalLevel:
                MDout.addObject()
                MDout.setValue(xmipp.MDL_IMAGE,image)
        MDout.writeBlock(classFile,"class_%06d"%codeNumber+"_core")        

# --------------------------------------------------------------------
class purifyCoresThread(Thread):
    def __init__(self,Nproc,myId,coreFiles,Zscore):
        Thread.__init__(self)
        self.Nproc=Nproc
        self.myId=myId
        self.coreFiles=coreFiles
        self.Zscore=Zscore
    
    def run(self):
        idx=1
        lastShown=-1
        if (self.myId==0):
            print "   Purifying (%): ",
        for image in self.coreFiles:
            if (idx % self.Nproc)==self.myId:
                if (self.myId==0):
                    toShow=int(100*float(idx)/len(self.coreFiles))
                    if toShow>lastShown:
                        print str(toShow)+" ",
                        lastShown=toShow
                sys.stdout.flush()
                fnClass=image[0:image.rfind('_F123.sel')]
                os.system("xmipp_sort_by_statistics -i "+fnClass+\
                    "_F123.sel -o "+\
                    fnClass+"_F1234 -zcut "+str(self.Zscore)+\
                    " -multivariate >& /dev/null")
                if os.path.exists(fnClass+"_F1234_good.sel"):
                    os.system("mv -f "+fnClass+"_F1234_good.sel "+fnClass+"_F1234.sel")
                os.system("xmipp_classify_analyze_cluster -i "+fnClass+\
                    "_F1234.sel -ref "+\
                    fnClass+".xmp -maxDist "+str(self.Zscore)+" -dontMask >& /dev/null")
                if os.path.exists(fnClass+"_F1234_pca.sel"):
                    os.system("mv -f "+fnClass+"_F1234_pca.sel "+fnClass+"_F12345.sel")
                if os.path.exists(fnClass+"_F1234_pca.xmp"):
                    os.system("mv -f "+fnClass+"_F1234_pca.xmp "+fnClass+"_F12345.xmp")
                if os.path.exists(fnClass+"_F1234_pcabasis_00.xmp"):
                    os.system("mv -f "+fnClass+"_F1234_pcabasis_00.xmp "+fnClass+"_F12345_pcabasis_01.xmp")
                if os.path.exists(fnClass+"_F1234_pcabasis_01.xmp"):
                    os.system("mv -f "+fnClass+"_F1234_pcabasis_01.xmp "+fnClass+"_F12345_pcabasis_00.xmp")
                if os.path.exists(fnClass+"_F1234_outliers.sel"):
                    os.system("mv -f "+fnClass+"_F1234_outliers.sel "+fnClass+"_F12345_outliers.sel")
            idx=idx+1
        if (self.myId==0):
            print

def purifyCores(Nproc,coreFiles,Zscore):
    print "Purifying cores -------------------------------------------"
    threadList=[]
    # Launch threads
    for i in range(0,Nproc):
        currentThread=purifyCoresThread(Nproc,i,coreFiles,Zscore)
        threadList.append(currentThread)
        currentThread.start()

    # Wait for all threads
    for thread in threadList:
        thread.join()

# --------------------------------------------------------------------
def fileLength(fname):
    return len(open(fname).readlines())

def summary(fnRoot,Nlevels):
    print "Summary ---------------------------------------------------"
    fh=open(fnRoot+"_analysis_summary.txt",'w')
    for level in range(1,Nlevels):
        fh.write("Level: "+str(level)+'\n')
        Nclasses=len(glob.glob(fnRoot+"_level_"+'%02d'%level+"_??????.xmp"));
        totalSum=0
        finalSum=0
        goodClasses=0;
        for nclass in range(0,Nclasses):
            fnClass=fnRoot+"_level_"+'%02d'%level+"_"+'%06d'%nclass;
            Ninitial=fileLength(fnClass+".sel")-3
            Nfinal=0
            if os.path.exists(fnClass+"_F12345.sel"):
                Nfinal=fileLength(fnClass+"_F12345.sel")-3
                goodClasses=goodClasses+1
            fh.write("     Class: "+str(nclass)+" from "+str(Ninitial)+\
                " to "+str(Nfinal)+'\n')
            totalSum=totalSum+Ninitial
            finalSum=finalSum+Nfinal
        fh.write("     There are "+str(goodClasses)+" good classes at this level\n")
        fh.write( "     The number of images represented has shrinked from "+\
            str(totalSum)+" to "+str(finalSum)+'\n')
    fh.close()

# --------------------------------------------------------------------
def sortImages(fnRoot,Nlevels):
    print "Sorting images --------------------------------------------"
    for level in range(1,Nlevels):
        print "Level: "+str(level)
        fnLevel=fnRoot+"_level_"+'%02d'%level
        os.system('xmipp_metadata_selfile_create -p "'+fnLevel+'_??????_F12345.xmp" -o '+\
            fnLevel+"_F12345.sel");
        os.system('xmipp_classify_CL2D_sort_images -i '+fnLevel+\
            "_F12345.sel -oroot "+fnLevel+"_F12345_sorted -processSelfiles");

# --------------------------------------------------------------------
if __name__ == "__main__":

    if not sys.argv[1:]:
        print "Usage: xmipp_classify_CL2D_core_analysis <rootname> <thGoodClass=50%> <thJunkZscore=2.5> <thPCAZscore=1.5> <thr=1>"
        sys.exit()
    args = sys.argv[1:]
    fnRoot=args[0]
    if len(args)>=2:
        thGoodClass=float(args[1])
    else:
        thGoodClass=50.0
    thGoodClass=thGoodClass/100

    if len(args)>=3:
        thPCAZscore1=float(args[2])
    else:
        thPCAZscore1=2.5

    if len(args)>=4:
        thPCAZscore2=float(args[3])
    else:
        thPCAZscore2=1.5

    if len(args)>=5:
        Nproc=int(args[4])
    else:
        Nproc=1
    if Nproc>1:
        Nproc=Nproc+1

    # Separate the root into directory and label    
    idx=fnRoot.rfind('/')
    fnDir=fnRoot[0:idx]
    fnLabel=fnRoot[idx+1:len(fnRoot)]

    # Check which are the different existing levels
    classFiles=sorted(glob.glob(fnRoot+"_level_??.sel"));
    Nlevels=len(classFiles);

    # Build the sort junk
    #sortByPCAWithinCluster(Nproc,fnRoot,classFiles,thPCAZscore1);

    # Compute the core of each level
    computeCores(1,fnRoot,Nlevels);
    sys.exit(0)
    
    # Purify cores
    coreFiles=sorted(glob.glob(fnRoot+"_level_??_??????_F123.sel"));
    purifyCores(Nproc,coreFiles,thPCAZscore)
    
    # Sort images
    sortImages(fnRoot,Nlevels)

    # Summary
    summary(fnRoot,Nlevels)

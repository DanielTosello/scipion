# vi:syntax=python

Import('env')

# Required for custom functions
import os

def AddMatchingFiles((pattern, blacklist, sources), directory, files):
    ''' Callback, adds all matching files in dir '''
    import fnmatch
    for file in fnmatch.filter(files, pattern):
        if file not in blacklist:
           # DBG print 'Adding ' + os.path.join(directory, file)
           sources.append(os.path.join(directory, file))

def Glob(dir, pattern, blacklist):
    ''' Custom made globbing '''
    import os
    sources = []
    os.path.walk(dir, AddMatchingFiles, (pattern, blacklist, sources))
    return sources

def AddLastSlash(string):
    ''' Low trick for correct parsing of paths '''
    if string[len(string)-1] != '/':
        string = string + '/'
    return string

def AddBatch(name, basedir, extension = ''):
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    command = env.Command(os.path.join(basedir, fullname),
        os.path.join(basedir, 'batch_' + name + extension), [Copy('$TARGET',
        '$SOURCE'), Chmod('$TARGET', 0755)])

    # alias
    alias = env.Alias(fullname, command)
    install = env.Install(binprefix, command)
    env.Alias(fullname, install)
    env.Default(alias)

# FIXME default parameters' order, to save writing []
def AddProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
    includes = [], libpath = [], libs = [], cxxflags = [], linkflags = []):
    ''' add a new program to the build list '''
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CPPPATH = includes + [env['CPPPATH']],
        LIBPATH = libpath + [env['LIBPATH']],
        LIBS = libs + [env['LIBS']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']]
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

def AddMPIProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
    includes = [], libpath = [], libs = [], cxxflags = [], linkflags = []):

    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CC = env['MPI_CC'],
        CXX = env['MPI_CXX'],
        CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
        LIBPATH = libpath + [env['LIBPATH']] + [env['MPI_LIBDIR']],
        LIBS = libs + [env['LIBS']] + [env['MPI_LIB']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']]
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

# For Roberto's new lib
def AddMPILibrary(name, basedir, sources, includes):

    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']],
            LIBS = [env['MPI_LIB']]
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']],
            LIBS = [env['MPI_LIB']]
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

# COSS wanted an explicit list...
def AddLibrary(name, basedir, sources, includes, libpath=[], libs=[]):

    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

# --- Libraries

# Bilib
BilibSources = [
    'sources/changebasis.cc',
    'sources/convert.cc',
    'sources/dft.cc',
    'sources/dht.cc',
    'sources/findroot.cc',
    'sources/firconvolve.cc',
    'sources/flip.cc',
    'sources/fold.cc',
    'sources/fourierconvolve.cc',
    'sources/geometry.cc',
    'sources/getpoles.cc',
    'sources/getput.cc',
    'sources/getputd.cc',
    'sources/gradient.cc',
    'sources/histogram.cc',
    'sources/iirconvolve.cc',
    'sources/interpolate.cc',
    'sources/kernel.cc',
    'sources/kerneldiff1.cc',
    'sources/kerneldiff2.cc',
    'sources/kerneldiff.cc',
    'sources/kernelintegrate.cc',
    'sources/linearalgebra.cc',
    'sources/minmax.cc',
    'sources/morphology.cc',
    'sources/movingaverage.cc',
    'sources/polynomial.cc',
    'sources/positivepower.cc',
    'sources/pyramidfilters.cc',
    'sources/pyramidtools.cc',
    'sources/round.cc',
    'sources/swap.cc',
    'sources/timestamp.cc',
    'sources/traceline.cc',
    'sources/window.cc',
    'sources/messagedisplay.cc',
    'sources/wavelet.cc',
    'sources/waveletfiltersfract.cc',
    'sources/waveletfilters.cc',
    'sources/wavelettools.cc']

AddLibrary('Bilib', 'external/bilib', BilibSources, ['.', 'headers', 'types'])

# XmippData
DataSources = [
    'args.cpp',
    'del_triang.cpp',
    'denoise.cpp',
    'de_solver.cpp',
    'docfile.cpp',
    'fft.cpp',
    'filters.cpp',
    'funcs.cpp',
    'geometry.cpp',
    'header.cpp',
    'histogram.cpp',
    'image.cpp',
    'integration.cpp',
    'make_spectra.cpp',
    'mask.cpp',
    'matrix1d.cpp',
    'matrix2d.cpp',
    'matrix3d.cpp',
    'micrograph.cpp',
    'micrograph_downsample.cpp',
    'morphology.cpp',
    'normalize.cpp',
    'numerical_recipes.cpp',
    'progs.cpp',
    'projection.cpp',
    'range_adjust.cpp',
    'rotational_spectrum.cpp',
    'selfile.cpp',
    'test_cluster.cpp',
    'tomogram.cpp',
    'volume.cpp',
    'volume_segment.cpp',
    'wavelet.cpp']

AddLibrary('XmippData', 'libraries/data', DataSources, ['#'])
# FIXME link or not against Bilib?         ['external/bilib'], 'Bilib')

# Reconstruction
ReconsSources = [
    'adjust_ctf.cpp',
    'adjust_volume_grey_levels.cpp',
    'align2d.cpp',
    'align_tilt_pairs.cpp',
    'angular_assign_for_tomogram.cpp',
    'angular_continuous_assign.cpp',
    'angular_discrete_assign.cpp',
    'angular_distance.cpp',
    'angular_neighbourhood.cpp',
    'angular_projection_matching.cpp',
    'art_crystal.cpp',
    'basic_art.cpp',
    'basis.cpp',
    'blobs.cpp',
    'break_symmetry.cpp',
    'convert_pdb2vol.cpp',
    'crystal_create_surface.cpp',
    'ctf_correct_idr.cpp',
    'ctf_correct_phase.cpp',
    'ctf.cpp',
    'ctf_estimate_from_micrograph.cpp',
    'directions.cpp',
    'draw_surface.cpp',
    'euler.cpp',
    'evaluate_fscs.cpp',
    'foms_evaluate.cpp',
    'fourier_filter.cpp',
    'grids.cpp',
    'ml_align2d.cpp',
    'ml_refine3d.cpp',
    'phantom.cpp',
    'phantom_create_random.cpp',
    'phantom_simulate_microscope.cpp',
    'precompute_sampling.cpp',
    'project.cpp',
    'project_crystal.cpp',
    'projection.cpp',
    'psd_enhance.cpp',
    'radon.cpp',
    'recons_misc.cpp',
    'reconstruct_art.cpp',
    'reconstruct_wbp.cpp',
    'refinement.cpp',
    'resolution_ssnr.cpp',
    'sampling.cpp',
    'spar.cpp',
    'sparma.cpp',
    'splines.cpp',
    'surface.cpp',
    'symmetries.cpp',
    'symmetrize.cpp',
    'volume_foms.cpp',
    'volume_labelling.cpp']

AddLibrary('XmippRecons', 'libraries/reconstruction', ReconsSources,
           ['#libraries', '#external', '#'])

# ReconsInterface
ReconsInterfaceSources = [
    'crystal_aph2img.cpp',
    'crystal_unbend.cpp',
    'im_unbend.cpp',
    'phantom_test_reconstruction.cpp',
    'recons_spider.cpp']

AddLibrary('XmippRecons_Interface', '#libraries/reconstruction',
           ReconsInterfaceSources, ['#libraries', '#external', '#'])

# ReconsINRIA
ReconsINRIASources = ['adjust_surface.cpp']
AddLibrary('XmippReconsINRIA', '#libraries/reconstruction', ReconsINRIASources,
           ['#libraries', '#external', '#'])

# Common unused sources for the three libraries
Recons_unused = ['Gibbs.cc', 'Prog_projection_matching_crystal.cc',
    'Prog_Spots2RealSpace3D.cc']

# ReconstrunctionMPI
if int(env['mpi']):
    ReconstructionMPISources = ['mpi_run.cpp']
    AddMPILibrary('XmippReconsMPI', '#libraries/reconstruction_mpi',
        ReconstructionMPISources, ['#libraries'])

# Classification
ClassificationSources = [
    'batch_som.cpp',
    'code_book.cpp',
    'distance.cpp',
    'fcmeans.cpp',
    'fkcn.cpp',
    'fuzzy_code_book.cpp',
    'fuzzy_som.cpp',
    'gaussian_kerdensom.cpp',
    'kerdensom.cpp',
    'map.cpp',
    'pca.cpp',
    'plane.cpp',
    'rbf.cpp',
    'rm.cpp',
    'sammon.cpp',
    'som.cpp',
    'training_vector.cpp',
    'tstudent_kerdensom.cpp',
    'umatrix.cpp']

AddLibrary('XmippClassif', 'libraries/classification', ClassificationSources,
    ['#libraries',  '#'])

# Interface
InterfaceSources = [
    'aph3d.cpp',
    'aph.cpp',
    'aph_origmerg.cpp',
    'cc_lattice_io.cpp',
    'ccp4.cpp',
    'crisp.cpp',
    'em.cpp',
    'jdl.cpp',
    'opendxang.cpp',
    'opendx.cpp',
    'spider.cpp',
    'virus.cpp',
    'vrml.cpp']

AddLibrary('XmippInterface', 'libraries/interface', InterfaceSources,
    ['#libraries', '#external', '#'])

# InterfaceINRIA
InterfaceINRIASources = ['inria.cpp']

AddLibrary('XmippInterfaceINRIA', '#libraries/interface', InterfaceINRIASources,
    ['#Lib'])

# OldXmipp
OldXmippSources = [
    'allfft.cpp',
    'cabecero.cpp',
    'dimension.cpp',
    'fft.cpp',
    'fftmod.cpp',
    'fftn.cpp',
    'filtros.cpp',
    'floatnat.cpp',
    'iocabecero.cpp',
    'specmod.cpp',
    'varios2.cpp',
    'varios3.cpp',
    'varios.cpp']

AddLibrary('OldXmipp', 'libraries/legacy', OldXmippSources, [])

# INRIA
INRIASources = [
    'convert.cc',
    'curvature.cc',
    'extrema.cc',
    'recbuffer.cc',
    'recline.cc']

AddLibrary('INRIA', 'external/inria', INRIASources, [])

# --- Programs

# FindSCenter
AddProgram('find_center2d', 'applications/legacy/find_center2d', '*.cpp', [],
    ['libraries'], ['libraries/data', 'libraries/legacy', 'external/bilib'],
    ['XmippData', 'OldXmipp', 'Bilib'], [], [])

# Src (apps)

AddProgram('add_noise', 'applications/programs/add_noise', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('adjust_volume_grey_levels',
    'applications/programs/adjust_volume_grey_levels', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/data',
    'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('align2d', 'applications/programs/align2d', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/data',
    'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('align_volumes', 'applications/programs/align_volumes', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('angular_distribution_show',
    'applications/programs/angular_distribution_show', '*.cpp', [],
    ['libraries', '#'], ['libraries/interface', 'libraries/data',
    'external/bilib'], ['XmippInterface', 'XmippData', 'Bilib'])

AddProgram('angular_distance', 'applications/programs/angular_distance', '*.cpp',
    [], ['libraries', '#'], ['libraries/reconstruction', 'libraries/data',
    'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('angular_discrete_assign',
    'applications/programs/angular_discrete_assign', '*.cpp', [], ['libraries',
    '#'], ['libraries/reconstruction', 'libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('angular_continuous_assign',
    'applications/programs/angular_continuous_assign', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('angular_assign_for_tomogram',
    'applications/programs/angular_assign_for_tomogram', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('header_apply', 'applications/programs/header_apply', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('docfile_append', 'applications/programs/docfile_append', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('reconstruct_art', 'applications/programs/reconstruct_art', '*.cpp',
    [], ['libraries', '#', '#external'], ['libraries/reconstruction', 'libraries/data',
    'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('ctf_estimate_from_micrograph',
    'applications/programs/ctf_estimate_from_micrograph', '*.cpp', [],
    ['libraries', '#'],
    ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

# FIXME -Wno-deprecated
AddProgram('classify_batch_som', 'applications/programs/classify_batch_som',
    '*.cpp', [], ['libraries', '#'], ['libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('break_symmetry', 'applications/programs/break_symmetry', '*.cpp',
    [], ['libraries', '#', 'external'], ['libraries/reconstruction', 'libraries/data',
    'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('align_tilt_pairs', 'applications/programs/align_tilt_pairs',
    '*.cpp', [], ['libraries', '#'], ['libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('selfile_compare', 'applications/programs/selfile_compare', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('ctf_correct_phase', 'applications/programs/ctf_correct_phase',
    '*.cpp', [], ['libraries', '#'], ['libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('correlation', 'applications/programs/correlation', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/data',
    'libraries/interface', 'external/bilib'], ['XmippRecons', 'XmippData',
    'XmippInterface', 'Bilib'])

AddProgram('selfile_copy', 'applications/programs/selfile_copy', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('phantom_create', 'applications/programs/phantom_create', '*.cpp',
    [], ['libraries', '#', 'external'], ['libraries/data', 'libraries/reconstruction',
    'external/bilib'], ['XmippData', 'XmippRecons', 'Bilib'])

AddProgram('crystal_create_surface',
    'applications/programs/crystal_create_surface', '*.cpp', [], ['libraries',
    '#'], ['libraries/data', 'libraries/reconstruction', 'external/bilib'],
    ['XmippData', 'XmippRecons', 'Bilib'])

AddProgram('ctf_profile', 'applications/programs/ctf_profile', '*.cpp', [],
    ['libraries', '#', 'external'], ['libraries/data', 'libraries/reconstruction',
    'external/bilib'], ['XmippData', 'XmippRecons', 'Bilib'])

AddProgram('convert_data2img', 'applications/programs/convert_data2img',
    '*.cpp', [], ['libraries', '#'], ['libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('convert_data2vol', 'applications/programs/convert_data2vol',
    '*.cpp', [], ['libraries', '#'], ['libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('crystal_shear', 'applications/programs/crystal_shear', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/data',
    'libraries/interface', 'external/bilib'], ['XmippRecons', 'XmippData',
    'XmippInterface', 'Bilib'])

AddProgram('denoise', 'applications/programs/denoise', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('micrograph_denoise', 'applications/programs/micrograph_denoise',
    '*.cpp', [], ['libraries', '#', 'external'], ['libraries/data', 'external/bilib'],
    ['XmippData', 'Bilib'])

AddProgram('docfile_histogram', 'applications/programs/docfile_histogram',
    '*.cpp', [], ['libraries', '#'], ['libraries/data', 'external/bilib'],
    ['XmippData', 'Bilib'])

AddProgram('micrograph_downsample', 'applications/programs/micrograph_downsample',
    '*.cpp', [], ['libraries', '#'], ['libraries/data', 'external/bilib'],
    ['XmippData', 'Bilib'])

# FIXME This hack is required for program Mark
if int(env['gui']):
    # object file needed by two targets
    if int(env['static']):
        obj_DownSample = StaticObject('applications/programs/micrograph_downsample/xvsmooth.cpp')
    else:
        obj_DownSample = SharedObject('applications/programs/micrograph_downsample/xvsmooth.cpp')

AddProgram('crystal_euler2mrc', 'applications/programs/crystal_euler2mrc',
    '*.cpp', [], ['libraries', '#'], ['libraries/reconstruction',
    'libraries/data', 'libraries/interface', 'external/bilib'], ['XmippRecons',
    'XmippRecons_Interface', 'XmippData', 'XmippInterface', 'Bilib'])

AddProgram('psd_enhance', 'applications/programs/psd_enhance', '*.cpp', [],
    ['libraries', '#'], ['libraries/interface', 'libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippInterface', 'XmippRecons',
    'XmippData', 'Bilib'])

AddProgram('foms_evaluate', 'applications/programs/foms_evaluate', '*.cpp',
    ['adjust.cc'], ['libraries', '#', 'external'], ['libraries/interface',
    'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('classify_fcmeans', 'applications/programs/classify_fcmeans',
    '*.cpp', [], ['libraries', '#'],['libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('find_center3d', 'applications/programs/find_center3d', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('classify_fkcn', 'applications/programs/classify_fkcn', '*.cpp', [],
    ['libraries', '#'], ['libraries/classification', 'libraries/data',
    'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('mirror', 'applications/programs/mirror', '*.cpp', [], ['libraries',
    '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('fourier_filter', 'applications/programs/fourier_filter', '*.cpp',
    [], ['libraries', '#'], ['libraries/interface', 'libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippInterface', 'XmippRecons',
    'XmippData', 'Bilib'])

# FIXME -Wno-deprecated
AddProgram('classify_fsom', 'applications/programs/classify_fsom', '*.cpp', [],
    ['libraries', '#'], ['libraries/classification', 'libraries/data',
    'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('header_assign', 'applications/programs/header_assign', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('header_extract', 'applications/programs/header_extract', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('header_reset', 'applications/programs/header_reset', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('histogram', 'applications/programs/histogram', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('ctf_correct_idr', 'applications/programs/ctf_correct_idr', '*.cpp',
    [], ['libraries', '#', 'external'], ['libraries/interface', 'libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippInterface', 'XmippRecons',
    'XmippData', 'Bilib'])

AddProgram('convert_img2data', 'applications/programs/convert_img2data',
    '*.cpp', [], ['libraries', '#'], ['libraries/data', 'external/bilib'],
    ['XmippData', 'Bilib'])

AddProgram('header_print', 'applications/programs/header_print', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('statistics', 'applications/programs/statistics', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

# FIXME -Wno-deprecated
AddProgram('classify_kcmeans', 'applications/programs/classify_kcmeans',
    '*.cpp', [], ['libraries', '#'], ['libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData',
    'Bilib'])

# FIXME -Wno-deprecated
AddProgram('classify_kerdensom', 'applications/programs/classify_kerdensom',
    '*.cpp', [], ['libraries', '#'], ['libraries/classification',
    'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData',
    'Bilib'])

AddProgram('crystal_lattice_vectors',
    'applications/programs/crystal_lattice_vectors', '*.cpp', [], ['libraries',
    '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('make_spectra', 'applications/programs/make_spectra', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('mask', 'applications/programs/mask', '*.cpp', [], ['libraries',
    '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('try_symmetry', 'applications/programs/try_symmetry', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

AddProgram('phantom_simulate_microscope',
    'applications/programs/phantom_simulate_microscope',
    '*.cpp', [], ['libraries', '#'], ['libraries/interface',
    'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('ml_align2d', 'applications/programs/ml_align2d', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('ml_align2d_combine', 'applications/programs/ml_align2d_combine',
    '*.cpp',
    [], ['libraries', '#'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('ml_refine3d', 'applications/programs/ml_refine3d', '*.cpp',
    [], ['libraries', '#', 'external'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('morphology', 'applications/programs/morphology', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('selfile_move', 'applications/programs/selfile_move', '*.cpp', [],
    ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('normalize', 'applications/programs/normalize', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('operate', 'applications/programs/operate', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('classify_pca', 'applications/programs/classify_pca', '*.cpp', [],
    ['libraries', '#'],
    ['libraries/classification', 'libraries/data', 'external/bilib'],
    ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('convert_pdb2vol', 'applications/programs/convert_pdb2vol', '*.cpp', [],
    ['libraries', '#'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('phantom_transform', 'applications/programs/phantom_transform', '*.cpp',
    [], ['libraries', '#', 'external'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('project', 'applications/programs/project', '*.cpp', [],
    ['libraries', '#', 'external'], ['libraries/interface', 'libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippInterface', 'XmippRecons',
    'XmippData', 'Bilib'])

AddProgram('angular_neighbourhood',
    'applications/programs/angular_neighbourhood', '*.cpp', [],
    ['libraries', '#'],
    ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('angular_projection_matching',
    'applications/programs/angular_projection_matching',
    '*.cpp', [], ['libraries', '#', 'external'], ['libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('classify_project_pca', 'applications/programs/classify_project_pca',
    '*.cpp', [], ['libraries', '#'],
    ['libraries/classification', 'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippData', 'Bilib'])

AddProgram('scale_pyramid', 'applications/programs/scale_pyramid', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('phantom_create_random', 'applications/programs/phantom_create_random',
    '*.cpp', [], ['libraries', '#', 'external'], ['libraries/interface', 'libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('range_adjust', 'applications/programs/range_adjust', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('convert_raw22spi', 'applications/programs/convert_raw22spi', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('phantom_test_reconstruction', 'applications/programs/phantom_test_reconstruction',
    '*.cpp', [], ['libraries', '#', 'external'], ['libraries/interface', 'libraries/reconstruction',
    'libraries/data', 'external/bilib'], ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons',
    'XmippData', 'Bilib'])

AddProgram('reverse_endian', 'applications/programs/reverse_endian', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('resolution_fsc', 'applications/programs/resolution_fsc', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('selfile_delete', 'applications/programs/selfile_delete', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('rotate', 'applications/programs/rotate', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('classify_sammon_projection', 'applications/programs/classify_sammon_projection', '*.cpp', [],
    ['libraries', '#'], ['libraries/classification', 'libraries/data', 'external/bilib'], ['XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('scale', 'applications/programs/scale', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('micrograph_scissor', 'applications/programs/micrograph_scissor', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('volume_segment', 'applications/programs/volume_segment', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('selfile_select', 'applications/programs/selfile_select', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('selfile_statistics', 'applications/programs/selfile_statistics', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('separate_objects', 'applications/programs/separate_objects', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('shift', 'applications/programs/shift', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('crystal_skew', 'applications/programs/crystal_skew', '*.cpp', [], ['libraries', '#'],
    ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

# FIXME -Wno-deprecated
AddProgram('classify_som', 'applications/programs/classify_som', '*.cpp', [],
    ['libraries', '#'], ['libraries/classification', 'libraries/data', 'external/bilib'], ['XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('sort_by_statistics', 'applications/programs/sort_by_statistics', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('selfile_split', 'applications/programs/selfile_split', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('convert_spi22em', 'applications/programs/convert_spi22em', '*.cpp', [], ['libraries', '#', 'external'],
    ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('convert_spi22ccp4', 'applications/programs/convert_spi22ccp4', '*.cpp', [], ['libraries', '#', 'external'],
    ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

# FIXME -Wno-deprecated
AddProgram('crystal_aph2img', 'applications/programs/crystal_aph2img', '*.cpp',
    [], ['libraries', '#'], ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('resolution_ssnr', 'applications/programs/resolution_ssnr', '*.cpp', [], ['libraries', '#'],
    ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('average', 'applications/programs/average', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('symmetrize', 'applications/programs/symmetrize', '*.cpp', [], ['libraries', '#'],
    ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('threshold', 'applications/programs/threshold', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('convert_data2pdb', 'applications/programs/convert_data2pdb', '*.cpp', [],
    ['libraries', '#'], ['libraries/classification', 'libraries/data', 'external/bilib'], ['XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('convert_data2descr', 'applications/programs/convert_data2descr', '*.cpp', [],
    ['libraries', '#'], ['libraries/classification', 'libraries/data', 'external/bilib'], ['XmippClassif',
    'XmippData', 'Bilib'])

AddProgram('crystal_unbend', 'applications/programs/crystal_unbend', '*.cpp',
    [], ['libraries', '#'], ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('fourier_transform', 'applications/programs/fourier_transform', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('convert_vol2data', 'applications/programs/convert_vol2data', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('convert_vol2pseudo', 'applications/programs/convert_vol2pseudo', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('convert_voxels22blobs', 'applications/programs/convert_voxels22blobs', '*.cpp', [],
    ['libraries', '#'], ['libraries/interface', 'libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippInterface', 'XmippRecons', 'XmippData', 'Bilib'])

AddProgram('reconstruct_wbp', 'applications/programs/reconstruct_wbp', '*.cpp', [],
    ['libraries', '#', 'external'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
    ['XmippRecons', 'XmippData', 'Bilib'])

AddProgram('window', 'applications/programs/window', '*.cpp', [], ['libraries', '#'],
    ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

AddProgram('micrograph_window', 'applications/programs/micrograph_window', '*.cpp',
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData', 'Bilib'])

# --- Scripts

# Batches (apps)
# NOTE PDBsidechain is in the only one in perl
AddBatch('selfile_create', 'applications/scripts/selfile_create')
AddBatch('convert_pdb2descr', 'applications/scripts/convert_pdb2descr')
AddBatch('extract_sidechain_from_pdb', 'applications/scripts/extract_sidechain_from_pdb', '.pl')
AddBatch('convert_pdb2surface', 'applications/scripts/convert_pdb2surface')
AddBatch('mlf_align2d', 'applications/scripts/mlf_align2d')
AddBatch('mlf_refine3d', 'applications/scripts/mlf_refine3d')
AddBatch('mpi_mlf_align2d', 'applications/scripts/mpi_mlf_align2d')
AddBatch('mpi_mlf_refine3d', 'applications/scripts/mpi_mlf_refine3d')
AddBatch('protocols', 'applications/scripts/protocols')

# FIXME Protocols?

BackwardsBatches = [
    'adjust_volume',
    'align3D',
    'ang_distribution',
    'angular_predict',
    'angular_predict_continuous',
    'angular_predict_tomography',
    'appenddocfile',
    'applygeo',
    'art',
    'CTF_profile',
    'batchsom',
    'break_sym',
    'centilt',
    'compare_selfiles',
    'correctphase',
    'cpsel',
    'create_phantom',
    'create_surface',
    'CTF_profile',
    'data2img',
    'data2vol',
    'deform',
    'denoising',
    'denoising_micrograph',
    'do_selfile',
    'downsample',
    'EM2Angles',
    'enhance_psd',
    'evaluate',
    'fcmeans',
    'findcenter',
    'findcenter3D',
    'fkcn',
    'flip',
    'fourierfilter',
    'fsom',
    'idr_art',
    'img2data',
    'infogeo',
    'kcmeans',
    'kerdensom',
    'lattice_vectors',
    'mark',
    'markhan',
    'microscope',
    'MLalign2D',
    'MLalign2D_combine',
    'MLrefine3D',
    'mvsel',
    'pca',
    'PDB2descr',
    'pdb2surface',
    'pdbphantom',
    'PDBsidechain',
    'projection_matching',
    'projection_neighbourhood',
    'projectpca',
    'pyramid',
    'random_phantom',
    'raw22spi',
    'recons_test',
    'resolution',
    'rmsel',
    'sammon',
    'scissor',
    'segment',
    'select_images',
    'sel_stats',
    'skew',
    'som',
    'sort_junk',
    'spi22ccp4',
    'spi22em',
    'split_selfile',
    'Spots2RealSpace2D',
    'ssnr',
    'statis',
    'toPDB',
    'toPhantom',
    'unbend',
    'visualize_fft',
    'vol2data',
    'volsampler',
    'voxels22blobs',
    'wbp',
    'window_micrograph'
]

# FIXME TODO No operator += for lists?
if int(env['mpi']):
    BackwardsBatches = BackwardsBatches + ['mpi_MLalign2D', 'mpi_MLrefine3D',
    'mpi_projection_matching']

if int(env['tiff']):
    BackwardsBatches = BackwardsBatches + ['tiff2raw']

if int(env['gui']):
    BackwardsBatches = BackwardsBatches + ['ctfviewer', 'xmask']

for b in BackwardsBatches:
    AddBatch(b, 'applications/scripts/backwards')

# MPI
if int(env['mpi']):

    AddMPIProgram('mpi_art', 'applications/programs/mpi_art', '*.cpp', [],
        ['libraries', '#', 'external'], ['libraries/reconstruction', 'libraries/data',
        'external/bilib'],
        ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_angular_discrete_assign', 'applications/programs/mpi_angular_discrete_assign',
        '*.cpp', [], ['libraries', '#'],
        ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
        ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_angular_continuous_assign', 'applications/programs/mpi_angular_continuous_assign',
        '*.cpp', [], ['libraries', '#'],
        ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
        ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_reconstruct_wbp', 'applications/programs/mpi_reconstruct_wbp', '*.cpp', [], ['libraries', '#', 'external'],
        ['libraries/reconstruction', 'libraries/data', 'external/bilib'], ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_ml_align2d', 'applications/programs/mpi_ml_align2d', '*.cpp', [],
        ['libraries', '#'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
        ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_ml_refine3d', 'applications/programs/mpi_ml_refine3d', '*.cpp',
        [], ['libraries', '#', 'external'], ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
        ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_angular_projection_matching',
        'applications/programs/mpi_angular_projection_matching', '*.cpp', [],
        ['libraries', '#', 'external'],
        ['libraries/reconstruction', 'libraries/data', 'external/bilib'],
        ['XmippRecons', 'XmippData', 'Bilib'])

    AddMPIProgram('mpi_run', 'applications/programs/mpi_run', '*.cpp', [],
        ['libraries', '#'],
        ['libraries/data', 'libraries/reconstruction_mpi', 'external/bilib'],
        ['XmippData', 'XmippReconsMPI', 'Bilib'])

# TIFF
# Tiff2Raw
if int(env['tiff']):
    AddProgram('convert_tiff2raw', 'applications/programs/convert_tiff2raw',
        '*.cpp', [], ['libraries', env['TIFF_INCLUDE']],
        [env['TIFF_LIBDIR']], ['tiff'])

# QT
if int(env['gui']):
    envQT = env.Copy()
    envQT.Tool('qt')

    # Once again, just in case, Copy() does not work too well
    envQT.Replace(QT_LIB = env['QT_LIB'])

    # QT_AUTOSCAN does not work because .h and .cpp are not in the same dir
    envQT.SetDefault(QT_AUTOSCAN = 1)

    def AddQtProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
        mocs = [], includes = [], libpath =[], libs = [], cxxflags = [],
        linkflags = []):

        # setup
        basedir = AddLastSlash(basedir)
        fullname = env['prepend'] + name
        binprefix =  os.path.join(env['prefix'], 'bin')

        extra = []
        for i in mocs:
            extra.append(envQT.Moc(basedir + i))

        sources = Glob(basedir, sources_pattern, skip_list)

        program = envQT.Program(
            basedir + env['prepend'] + name,
            sources + extra,
            CPPPATH = envQT['CPPPATH'] + includes + [env['CPPPATH']],
            LIBPATH = envQT['LIBPATH'] + libpath + [env['LIBPATH']],
            LIBS = envQT['LIBS'] + libs + [env['LIBS']],
            CXXFLAGS = cxxflags + [env['CXXFLAGS']],
            LINKFLAGS = linkflags + [env['LINKFLAGS']]
            )

        # alias
        alias = env.Alias(fullname, program)
        install = env.Install(binprefix, program)
        env.Alias(fullname, install)
        env.Default(alias)

    # FIXME an AddQtLibrary function does not worth the cost, right?
    graphics_name = 'XmippGraphics'
    graphics_basedir = AddLastSlash('libraries/graphics')

    graphics_sources = Glob(graphics_basedir, '*.cpp', [])
    graphics_cpppath = envQT['CPPPATH'] + ['libraries', '#']

    graphics_objects = []
    for i in graphics_sources:
        graphics_objects.append(i)

    if int(env['static']):
        graphics = envQT.StaticLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )
    else:
        graphics = envQT.SharedLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )

    graphics_alias = env.Alias(graphics_name, graphics)
    graphics_install = env.Install(os.path.join(env['prefix'], 'lib'),
        graphics)
    env.Alias(graphics_name, graphics_install)
    env.Default(graphics_alias)

    AddQtProgram('edit', 'applications/programs/edit', '*.cpp', [],
    [], ['libraries', '#'], ['libraries/data', 'external/bilib'], ['XmippData',
    'Bilib'])

    AddQtProgram('ctf_view', 'applications/programs/ctf_view', '*.cpp',
    [], [], ['libraries', '#'], ['libraries/data', 'libraries/graphics',
    'libraries/classification', 'libraries/reconstruction', 'external/bilib'],
    ['XmippData', 'XmippGraphics', 'XmippClassif', 'XmippRecons', 'Bilib'])

    # FIXME obj_DownSample is required. cannot use AddQtProgram
    mark_basedir = AddLastSlash('applications/programs/micrograph_mark')
    mark_sources = Glob(mark_basedir, '*.cpp', [])
    mark_mocs = []
    mark_mocs.append(envQT.Moc(mark_basedir + 'popup_menu_mark.h'))

    mark_objects = []
    for i in mark_sources:
        mark_objects.append(i)

    mark_cpppath = envQT['CPPPATH'] + ['libraries', '#',
        '#applications/programs/micrograph_downsample']
    mark_libpath = envQT['LIBPATH'] + ['libraries/interface', 'libraries/graphics'
        , 'libraries/reconstruction', 'libraries/classification', 'libraries/data',
        'external/bilib']

    mark_libs = envQT['LIBS'] + ['XmippInterface', 'XmippGraphics',
        'XmippRecons', 'XmippClassif', 'XmippData', 'Bilib']

    mark_prog = envQT.Program(
        mark_basedir + env['prepend'] + 'micrograph_mark',
        mark_objects + mark_mocs + obj_DownSample,
        CPPPATH = mark_cpppath,
        LIBPATH = mark_libpath,
        LIBS = mark_libs
        )

    mark_alias = env.Alias(env['prepend'] + 'micrograph_mark', mark_prog)
    mark_install = env.Install(os.path.join(env['prefix'],
        'bin'), mark_prog)
    env.Alias(env['prepend'] + 'micrograph_mark', mark_install)
    env.Default(mark_alias)

    AddQtProgram('show', 'applications/programs/show', '*.cpp', [], [],
        ['libraries', '#'],
        ['libraries/classification', 'libraries/graphics', 'libraries/reconstruction',
        'libraries/data', 'external/bilib'], ['XmippClassif', 'XmippGraphics', 'XmippRecons',
        'XmippData', 'Bilib'])

    AddQtProgram('mask_design', 'applications/programs/mask_design', '*.cpp',
        [], [], ['libraries', '#'], ['libraries/data', 'libraries/classification',
        'external/bilib'], ['XmippData', 'XmippClassif', 'Bilib'])


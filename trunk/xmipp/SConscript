#!/usr/bin/env python

Import('env')

# Required for custom functions
import os


def AddMatchingFiles((pattern, blacklist, sources), directory, files):
    ''' Callback, adds all matching files in dir '''
    import fnmatch
    for file in fnmatch.filter(files, pattern):
        if file not in blacklist:
           # DBG print 'Adding ' + os.path.join(directory, file)
           sources.append(os.path.join(directory, file))

def Glob(dir, pattern, blacklist):
    ''' Custom made globbing '''
    import os
    sources = []
    os.path.walk(dir, AddMatchingFiles, (pattern, blacklist, sources))
    return sources

def AddLastSlash(string):
    ''' Low trick for correct parsing of paths '''
    if string[len(string)-1] != '/':
        string = string + '/'
    return string

def AddBatch(name, basedir, extension = ''):
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    command = env.Command(os.path.join(basedir, fullname),
        os.path.join(basedir, 'batch_' + name + extension), [Copy('$TARGET',
        '$SOURCE'), Chmod('$TARGET', 0755)])

    # alias
    alias = env.Alias(fullname, command)
    install = env.Install(binprefix, command)
    env.Alias(fullname, install)
    env.Default(alias)


def AddProtocol(name, basedir):
    # setup
    basedir = AddLastSlash(basedir)
    binprefix = os.path.join(env['prefix'], 'protocols')
    
    # only add prefix to protocol_*
    if name.find('protocol') < 0:
            install = env.Install(binprefix, basedir + name)
            env.Default(install)
            
    else:
        fullname = env['prepend'] + name
       
        # action
        command = env.Command(os.path.join(basedir, fullname),
            os.path.join(basedir, name), [Copy('$TARGET',
            '$SOURCE'), Chmod('$TARGET', 0755)])

        
        # alias
        alias = env.Alias(fullname, command)
        install = env.Install(binprefix, command)
        env.Alias(fullname, install)
        env.Default(alias)
    


# FIXME default parameters' order, to save writing []
def AddProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
               includes = [], libpath = [], libs = [], cxxflags = [],
               linkflags = []):
    ''' add a new program to the build list '''
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME fix for static executables
    if env['static']:
        cxxflags += [env['STATIC_FLAG']]
        linkflags += [env['STATIC_FLAG']]

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CPPPATH = includes + [env['CPPPATH']],
        LIBPATH = libpath + [env['LIBPATH']],
        LIBS = libs + [env['LIBS']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']],
        LINK = env['LINKERFORPROGRAMS']
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

def AddMPIProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
                  includes = [], libpath = [], libs = [], cxxflags = [],
                  linkflags = []):

    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME fix for static executables
    if env['static']:
        cxxflags += [env['STATIC_FLAG']]
        linkflags += [env['STATIC_FLAG']]

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CC = env['MPI_CC'],
        CXX = env['MPI_CXX'],
        CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
        LIBPATH = libpath + [env['LIBPATH']] + [env['MPI_LIBDIR']],
        LIBS = libs + [env['LIBS']] + [env['MPI_LIB']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']],
        LINK = env['MPI_LINKERFORPROGRAMS']
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)


# Add a program integrated in the Xmipp structure
def AddXmippProgram(name, libs=[]):
    finalLibPath = ['libraries/data', 'external','external/fftw-3.1.2']
    finalIncludePath = ['libraries','#']
    finalLibs = libs + ['XmippData', 'XmippExternal','XmippFftw']
    for i in range(len(libs)):
       if libs[i] == 'XmippRecons':
          finalLibPath += ['libraries/reconstruction']
       elif libs[i] == 'XmippInterface':
          finalLibPath += ['libraries/interface']
       elif libs[i] == 'XmippRecons_Interface':
          finalLibPath += ['libraries/interface']
	  finalLibs.insert(i+1,'XmippInterface')
       elif libs[i] == 'XmippClassif':
          finalLibPath += ['libraries/classification']
    AddProgram(name, 'applications/programs/' + name, '*.cpp', [],
        finalIncludePath, finalLibPath, finalLibs, [], [])

def AddXmippMPIProgram(name, libs=[]):
    finalLibPath = ['libraries/data', 'external','external/fftw-3.1.2']
    finalIncludePath = ['libraries','#']
    finalLibs = libs + ['XmippData', 'XmippExternal','XmippFftw']
    for i in range(len(libs)):
       if libs[i] == 'XmippRecons':
          finalLibPath += ['libraries/reconstruction']
       elif libs[i] == 'XmippInterface':
          finalLibPath += ['libraries/interface']
       elif libs[i] == 'XmippRecons_Interface':
          finalLibPath += ['libraries/interface']
	  finalLibs.insert(i+1,'XmippInterface')
       elif libs[i] == 'XmippReconsMPI':
          finalLibPath += ['libraries/reconstruction_mpi']
       elif libs[i] == 'XmippClassif':
          finalLibPath += ['libraries/classification']
    AddMPIProgram(name, 'applications/programs/' + name, '*.cpp', [],
        finalIncludePath, finalLibPath, finalLibs, [], [])

# For Roberto's new lib
def AddMPILibrary(name, basedir, sources, includes):
    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']],
            LIBS = [env['MPI_LIB']]
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']],
            LIBS = [env['MPI_LIB']]
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

# COSS wanted an explicit list...
def AddLibrary(name, basedir, sources, includes, libpath=[], libs=[]):

    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        if x.find(basedir)==-1:
            sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    # Sjors: Hack for OS X compilation (static libs, dynamic apps...??)
    if int(env['static']) or (env['PLATFORM'] == 'darwin'):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

def AddSwigLibrary(name, basedir, sourceList, includes, libpath=[], libs=[]):
    if not int(env['swig']):
        return

    # setup
    basedirswig = AddLastSlash(basedir+"/swig")
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sourceList:
        if x.find(basedirswig)==-1:
            sourceList[sourceList.index(x)] = basedirswig + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedirswig + x

    # Build depedencies
    env.Depends(basedirswig + "lib" + name + "Swig.so",
       Glob(basedir, '*.h', [])+Glob(basedirswig, '*.i', []));

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            target=basedirswig + name + "Swig",
            source=sourceList,
            CPPPATH = includes + [env['CPPPATH']] + [env['SWIGCPPPATH']],
            LIBPATH = libpath+["lib"],
            LIBS = libs+["XmippExternal"],
            SWIGFLAGS = [env['SWIGFLAGS']]
            )
    else:
        library = env.SharedLibrary(
            target=basedirswig + name + "Swig",
            source=sourceList,
            CPPPATH = includes + [env['CPPPATH']] + [env['SWIGCPPPATH']],
            LIBPATH = libpath+["lib"],
            LIBS = libs+["XmippExternal"],
            SWIGFLAGS = [env['SWIGFLAGS']]
            )

    # alias
    alias = env.Alias(name, library)
    install = env.InstallAs(target=[libprefix+"/_"+name+".so",
                                    libprefix+"/"+name+".py"],
        source=[basedirswig + "lib"+ name + "Swig.so",
                basedirswig + name + ".py"])
    env.Alias(name, install)
    env.Default(alias)

# --- Libraries

# Bilib
BilibSources = Glob('external/bilib/sources', '*.cc', [])

# Fftw
FftwSources = Glob('external/fftw-3.1.2/kernel', '*.c',[])  + \
              Glob('external/fftw-3.1.2/dft', '*.c',[])     + \
              Glob('external/fftw-3.1.2/rdft', '*.c',[])    + \
              Glob('external/fftw-3.1.2/threads', '*.c',[]) + \
              Glob('external/fftw-3.1.2/reodft', '*.c',[])  + \
              Glob('external/fftw-3.1.2/api', '*.c',[])   

# INRIA
INRIASources = Glob('external/inria', '*.cc', [])

# Condor
CondorSources = Glob('external/condor', '*.cpp', [])

AddLibrary('XmippExternal', 'external',
   INRIASources + BilibSources + CondorSources,
   ['bilib', 'bilib/headers', 'bilib/types'])
   
AddLibrary('XmippFftw', 'external/fftw-3.1.2',
   FftwSources,['.','kernel','rdft','dft','rdft/codelets','simd','dft/simd','dft/codelets','reodft'])

# XmippData
DataSources = Glob('libraries/data','*.cpp',[])
AddLibrary('XmippData', 'libraries/data', DataSources, ['#'],['lib'],['XmippExternal','XmippFftw'])
SwigDataSources = ['libraries/data/swig/swigXmippData.i'] 	 
AddSwigLibrary('XmippData', 'libraries/data', SwigDataSources, ['#'], 	 
    [], ['XmippData'])
            
# Reconstruction
ReconsSources = [
    'adjust_ctf.cpp',
    'adjust_surface.cpp',
    'adjust_volume_grey_levels.cpp',
    'align2d.cpp',
    'align_tilt_pairs.cpp',
    'angular_assign_for_tomogram.cpp',
    'angular_assign_for_tilt_series.cpp',
    'angular_commonline.cpp',
    'angular_continuous_assign.cpp',
    'angular_discrete_assign.cpp',
    'angular_distance.cpp',
    'angular_neighbourhood.cpp',
    'angular_projection_matching.cpp',
    'angular_class_average.cpp',
    'angular_project_library.cpp',
    'crystal_angular_projection_matching.cpp',
    'art_crystal.cpp',
    'basic_art.cpp',
    'break_symmetry.cpp',
    'common_lines.cpp',
    'correct_bfactor.cpp',
    'create_projection_library.cpp',
    'crystal_create_surface.cpp',
    'ctf_correct_amplitude2d.cpp',
    'ctf_correct_amplitude3d.cpp',
    'ctf_correct_idr.cpp',
    'ctf_correct_phase.cpp',
    'ctf_estimate_from_micrograph.cpp',
    'ctf_group.cpp',
    'denoise.cpp',
    'detect_missing_wedge.cpp',
    'detect_structures.cpp',
    'directions.cpp',
    'draw_surface.cpp',
    'euler.cpp',
    'evaluate_fscs.cpp',
    'filter_projections.cpp',
    'foms_evaluate.cpp',
    'fourier_filter.cpp',
    'make_spectra.cpp',
    'micrograph_phase_flipping.cpp',
    'micrograph_downsample.cpp',
    'ml_align2d.cpp',
#    'ml_align3d.cpp',
    'mlf_align2d.cpp',
    'ml_refine3d.cpp',
    'ml_tomo.cpp',
    'nma_alignment.cpp',
    'phantom_create_micrograph.cpp',
    'phantom_create_random.cpp',
    'phantom_simulate_microscope.cpp',
    'precompute_sampling.cpp',
    'projectTomography.cpp',
    'project_crystal.cpp',
    'projection_real_shears.cpp',
    'psd_enhance.cpp',
    'psd_sort.cpp',
    'radon.cpp',
    'recons_misc.cpp',
    'reconstruct_art.cpp',
    'reconstruct_wbp.cpp',
    'reconstruct_fourier.cpp',
    'refinement.cpp',
    'resolution_ssnr.cpp',
    'series_remove_fluctuations.cpp',
    'spar.cpp',
    'sparma.cpp',
    'surface.cpp',
    'symmetrize.cpp',
    'volume_foms.cpp',
    'volume_labelling.cpp']

AddLibrary('XmippRecons', 'libraries/reconstruction', ReconsSources,
           ['#libraries', '#external', '#'],['lib'],['XmippExternal','XmippData','pthread'])

# ReconsInterface
ReconsInterfaceSources = [
    'convert_pdb2vol.cpp',
    'crystal_aph2img.cpp',
    'crystal_unbend.cpp',
    'im_unbend.cpp',
    'phantom_test_reconstruction.cpp',
    'project.cpp',
    'recons_spider.cpp']

#remove dinamic mpi library since it is very problematic
# ReconstrunctionMPI
#if int(env['mpi']):
#    ReconstructionMPISources = ['mpi_run.cpp']
#    AddMPILibrary('XmippReconsMPI', '#libraries/reconstruction_mpi',
#        ReconstructionMPISources, ['#libraries'])

# Classification
ClassificationSources = Glob('libraries/classification', '*.cpp', [])
AddLibrary('XmippClassif', 'libraries/classification', ClassificationSources,
    ['#libraries',  '#'],['lib'],['XmippExternal','XmippData'])

# Interface
InterfaceSources = Glob('libraries/interface', '*.cpp', [])
AddLibrary('XmippInterface', 'libraries/interface', InterfaceSources,
    ['#libraries', '#external', '#'],['lib'],['XmippExternal','XmippData','pthread'])

# Recons Interface
AddLibrary('XmippRecons_Interface', '#libraries/reconstruction',
           ReconsInterfaceSources, ['#libraries', '#external', '#'],['lib'],['XmippExternal','XmippData','XmippRecons','XmippInterface'])

# OldXmipp
OldXmippSources = Glob('libraries/legacy', '*.cpp',[])
AddLibrary('OldXmipp', 'libraries/legacy', OldXmippSources,['#libraries'])

# --- Programs

# FindSCenter
AddProgram('find_center2d', 'applications/legacy/find_center2d', '*.cpp', [],
    ['libraries', '#'], ['libraries/data', 'libraries/legacy', 'external','external/fftw-3.1.2'],
    ['XmippData', 'OldXmipp', 'XmippExternal','XmippFftw'], [], [])

# Src (apps)

AddXmippProgram('add_noise')
AddXmippProgram('adapt_for_spider', ['XmippInterface'])
AddXmippProgram('adjust_volume_grey_levels', ['XmippRecons'])
AddXmippProgram('align2d', ['XmippRecons'])
AddXmippProgram('align_tilt_pairs', ['XmippRecons'])
AddXmippProgram('align_volumes')
AddXmippProgram('angular_assign_for_tilt_series', ['XmippRecons'])
AddXmippProgram('angular_assign_for_tomogram', ['XmippRecons'])
AddXmippProgram('angular_class_average', ['XmippRecons'])
AddXmippProgram('angular_commonline', ['XmippRecons'])
AddXmippProgram('angular_continuous_assign', ['XmippRecons'])
AddXmippProgram('angular_discrete_assign', ['XmippRecons'])
AddXmippProgram('angular_distance', ['XmippRecons'])
AddXmippProgram('angular_distribution_show', ['XmippInterface'])
AddXmippProgram('angular_neighbourhood', ['XmippRecons'])
AddXmippProgram('angular_projection_matching', ['XmippRecons'])
AddXmippProgram('angular_project_library', ['XmippRecons'])
AddXmippProgram('average')
AddXmippProgram('break_symmetry',               ['XmippRecons'])
AddXmippProgram('center_image')
AddXmippProgram('classify_batch_som', ['XmippClassif'])
AddXmippProgram('classify_fcmeans', ['XmippClassif'])
AddXmippProgram('classify_fkcn', ['XmippClassif'])
AddXmippProgram('classify_fsom',  ['XmippClassif'])
AddXmippProgram('classify_kcmeans', ['XmippClassif'])
AddXmippProgram('classify_kerdensom', ['XmippClassif'])
AddXmippProgram('classify_pca', ['XmippClassif'])
AddXmippProgram('classify_project_pca', ['XmippClassif'])
AddXmippProgram('classify_sammon_projection', ['XmippClassif'])
AddXmippProgram('classify_som',['XmippClassif'])
AddXmippProgram('convert_data2descr', ['XmippClassif'])
AddXmippProgram('convert_data2img', ['XmippClassif'])
AddXmippProgram('convert_data2pdb', ['XmippClassif'])
AddXmippProgram('convert_data2vol', ['XmippClassif'])
AddXmippProgram('convert_img2data')
AddXmippProgram('convert_pdb2vol', ['XmippRecons_Interface','XmippRecons'])
AddXmippProgram('convert_raw22spi')
AddXmippProgram('convert_spe2spi')
AddXmippProgram('convert_dm32raw')
AddXmippProgram('convert_spi22em', ['XmippInterface'])
AddXmippProgram('convert_spi22ccp4', ['XmippInterface'])
AddXmippProgram('convert_vol2data')
AddXmippProgram('convert_vol2pseudo')
AddXmippProgram('convert_voxels22blobs', ['XmippRecons'])
AddXmippProgram('correct_bfactor', ['XmippRecons'])
AddXmippProgram('correlation')
AddXmippProgram('crystal_angular_projection_matching',	['XmippRecons'])
AddXmippProgram('crystal_aph2img', ['XmippRecons_Interface','XmippRecons'])
AddXmippProgram('crystal_create_surface', ['XmippRecons'])
AddXmippProgram('crystal_euler2mrc', ['XmippInterface'])
AddXmippProgram('crystal_lattice_vectors')
AddXmippProgram('crystal_shear')
AddXmippProgram('crystal_skew')
AddXmippProgram('crystal_unbend', ['XmippRecons_Interface','XmippRecons'])
AddXmippProgram('ctf_correct_amplitude2d', ['XmippRecons'])
#AddXmippProgram('ctf_correct_amplitude3d', ['XmippRecons'])
AddXmippProgram('ctf_correct_idr', ['XmippRecons'])
AddXmippProgram('ctf_create_ctfdat', ['XmippRecons'])
AddXmippProgram('ctf_correct_phase', ['XmippRecons'])
AddXmippProgram('ctf_estimate_from_micrograph', ['XmippRecons'])
AddXmippProgram('ctf_estimate_from_psd', ['XmippRecons'])
AddXmippProgram('ctf_profile')
AddXmippProgram('ctf_group', ['XmippRecons'])
AddXmippProgram('common_lines', ['XmippRecons'])
AddXmippProgram('denoise', ['XmippRecons'])
AddXmippProgram('detect_missing_wedge', ['XmippRecons'])
AddXmippProgram('detect_structures', ['XmippRecons'])
AddXmippProgram('docfile_append')
AddXmippProgram('docfile_select_subset')
AddXmippProgram('docfile_histogram')
AddXmippProgram('filter_projections', ['XmippRecons'])
AddXmippProgram('find_center3d')
AddXmippProgram('foms_evaluate', ['XmippRecons'])
AddXmippProgram('fourier_filter', ['XmippRecons'])
AddXmippProgram('fourier_transform')
AddXmippProgram('header_apply')
AddXmippProgram('header_assign')
AddXmippProgram('header_extract')
AddXmippProgram('header_print')
AddXmippProgram('header_reset')
AddXmippProgram('histogram')
AddXmippProgram('make_spectra', ['XmippRecons'])
AddXmippProgram('mask')
AddXmippProgram('micrograph_denoise', ['XmippRecons'])
AddXmippProgram('micrograph_downsample', ['XmippRecons'])
AddXmippProgram('micrograph_phase_flipping',['XmippRecons'])
AddXmippProgram('micrograph_scissor')
AddXmippProgram('micrograph_window')
AddXmippProgram('mirror')
AddXmippProgram('ml_align2d', ['XmippRecons'])
#AddXmippProgram('ml_align3d', ['XmippRecons'])
AddXmippProgram('mlf_align2d', ['XmippRecons'])
AddXmippProgram('ml_align2d_combine', ['XmippRecons'])
AddXmippProgram('ml_refine3d', ['XmippRecons'])
AddXmippProgram('mlf_refine3d', ['XmippRecons'])
#AddXmippProgram('mlf_tomo', ['XmippRecons'])
AddXmippProgram('ml_tomo', ['XmippRecons'])
AddXmippProgram('morphology')
AddXmippProgram('nma_alignment', ['XmippRecons'])
AddXmippProgram('normalize')
AddXmippProgram('operate')
AddXmippProgram('pdb_dictionary', ['XmippRecons_Interface','XmippRecons','XmippClassif'])
AddXmippProgram('pdb_project_on_dictionary', ['XmippRecons','XmippClassif'])
AddXmippProgram('phantom_create', ['XmippRecons'])
AddXmippProgram('phantom_create_micrograph', ['XmippRecons'])
AddXmippProgram('phantom_create_random', ['XmippRecons'])
AddXmippProgram('phantom_simulate_microscope', ['XmippRecons'])
AddXmippProgram('phantom_test_reconstruction', ['XmippRecons_Interface','XmippRecons'])
AddXmippProgram('phantom_transform', ['XmippRecons_Interface','XmippRecons'])
AddXmippProgram('precompute_sampling', ['XmippRecons'])
AddXmippProgram('project', ['XmippRecons_Interface','XmippRecons'])
AddXmippProgram('project_tomography', ['XmippRecons'])
AddXmippProgram('projection_real_shears', ['XmippRecons'])
AddXmippProgram('psd_enhance', ['XmippRecons'])
AddXmippProgram('psd_sort', ['XmippRecons'])
AddXmippProgram('range_adjust')
AddXmippProgram('reconstruct_art', ['XmippRecons'])
AddXmippProgram('reconstruct_wbp', ['XmippRecons'])
AddXmippProgram('reconstruct_fourier', ['XmippRecons'])
AddXmippProgram('resolution_fsc')
AddXmippProgram('resolution_ssnr', ['XmippRecons'])
AddXmippProgram('reverse_endian')
AddXmippProgram('rotate')
AddXmippProgram('scale')
AddXmippProgram('scale_pyramid')
AddXmippProgram('selfile_compare')
AddXmippProgram('selfile_copy')
AddXmippProgram('selfile_delete')
AddXmippProgram('selfile_move')
AddXmippProgram('selfile_select')
AddXmippProgram('selfile_split')
AddXmippProgram('selfile_statistics')
AddXmippProgram('selfile_subset')
AddXmippProgram('separate_objects')
AddXmippProgram('series_remove_fluctuations', ['XmippRecons'])
AddXmippProgram('shift')
AddXmippProgram('sort_by_statistics')
AddXmippProgram('statistics')
AddXmippProgram('convert_stack22images')
AddXmippProgram('symmetrize', ['XmippRecons'])
AddXmippProgram('threshold')
AddXmippProgram('try_symmetry')
AddXmippProgram('volume_segment')
AddXmippProgram('window')

# --- Scripts

# Batches (apps)
# NOTE PDBsidechain is in the only one in perl
AddBatch('selfile_create', 'applications/scripts/selfile_create')
AddBatch('convert_lst2sel', 'applications/scripts/convert_lst2sel')
AddBatch('convert_pdb2descr', 'applications/scripts/convert_pdb2descr')
AddBatch('extract_sidechain_from_pdb',
    'applications/scripts/extract_sidechain_from_pdb', '.pl')
AddBatch('convert_pdb2surface', 'applications/scripts/convert_pdb2surface')
AddBatch('protocols', 'applications/scripts/protocols')
AddBatch('gui', 'applications/scripts/protocols')
AddBatch('convert_tia2raw', 'applications/programs/convert_tia2raw')

# Protocols
AddProtocol('arg.py', 'applications/scripts/protocols')
AddProtocol('apply_bfactor.py', 'applications/scripts/protocols')
AddProtocol('xmipp_config.py', 'applications/scripts/protocols')
AddProtocol('ctfdat.py', 'applications/scripts/protocols')
AddProtocol('docfiles.py', 'applications/scripts/protocols')
AddProtocol('launch_job.py', 'applications/scripts/protocols')
AddProtocol('log.py', 'applications/scripts/protocols')
AddProtocol('rename_files.py', 'applications/scripts/protocols')
AddProtocol('selfile.py', 'applications/scripts/protocols')
AddProtocol('spider_header.py', 'applications/scripts/protocols')
AddProtocol('utils_xmipp.py', 'applications/scripts/protocols')
AddProtocol('visualization.py', 'applications/scripts/protocols')
AddProtocol('visualize_kerdensom.py', 'applications/scripts/protocols')
AddProtocol('visualize_ml2d.py', 'applications/scripts/protocols')
AddProtocol('visualize_cl2d.py', 'applications/scripts/protocols')
AddProtocol('visualize_ml3d.py', 'applications/scripts/protocols')
AddProtocol('visualize_multires.py', 'applications/scripts/protocols')
AddProtocol('visualize_preprocess_micrographs.py', 'applications/scripts/protocols')
AddProtocol('visualize_preprocess_particles.py', 'applications/scripts/protocols')
AddProtocol('visualize_projmatch.py', 'applications/scripts/protocols')
AddProtocol('visualize_rct.py', 'applications/scripts/protocols')
AddProtocol('visualize_rotspectra.py', 'applications/scripts/protocols')

AddProtocol('protocol_gui.py', 'applications/scripts/protocols')
AddProtocol('protocol_backup.py', 'applications/scripts/protocols')
AddProtocol('protocol_kerdensom.py', 'applications/scripts/protocols')
AddProtocol('protocol_ml2d.py', 'applications/scripts/protocols')
AddProtocol('protocol_cl2d.py', 'applications/scripts/protocols')
AddProtocol('protocol_ml3d.py', 'applications/scripts/protocols')
AddProtocol('protocol_multires.py', 'applications/scripts/protocols')
AddProtocol('protocol_particle_pick.py', 'applications/scripts/protocols')
AddProtocol('protocol_preprocess_micrographs.py', 'applications/scripts/protocols')
AddProtocol('protocol_preprocess_particles.py', 'applications/scripts/protocols')
AddProtocol('protocol_projmatch.py', 'applications/scripts/protocols')
AddProtocol('protocol_rct.py', 'applications/scripts/protocols')
AddProtocol('protocol_rotspectra.py', 'applications/scripts/protocols')
AddProtocol('protocol_setup.py', 'applications/scripts/protocols')

# MPI
if int(env['mpi']):
    AddXmippMPIProgram('mpi_angular_class_average', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_continuous_assign', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_discrete_assign', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_projection_matching', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_project_library', ['XmippRecons'])
    AddXmippMPIProgram('mpi_class_averages', ['XmippRecons'])
    AddXmippMPIProgram('mpi_common_lines', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ctf_correct_idr', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_align2d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_tomo', ['XmippRecons'])
    AddXmippMPIProgram('mpi_mlf_align2d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_refine3d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_mlf_refine3d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_projection_real_shears', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_art', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_wbp', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_fourier', ['XmippRecons'])
    AddXmippMPIProgram('mpi_run', ['XmippRecons'])

# TIFF
# Tiff2Raw
# FIXME m jpeg and z really required?
if int(env['tiff']):
    AddProgram('convert_tiff2raw', 'applications/programs/convert_tiff2raw',
        '*.cpp', [], ['libraries', env['TIFF_INCLUDE']],
        [env['TIFF_LIBDIR']], ['tiff', 'm', 'jpeg', 'z'])

# QT
if int(env['gui']):
    envQT = env.Clone()
    
    if int(env['QT4']):
        # FIXME see SConstruct
        env['QTDIR']=''
        env['QT_LIB']=''

        envQT.Tool('qt4')
        envQT.EnableQt4Modules(['QtCore', 'QtGui', 'Qt3Support'], debug=False)

        # Fix for moc and #ifdefs (qt3 uses MOC_SKIP_*)
        envQT['QT4_MOCFROMHFLAGS'] += ['-DQT3_SUPPORT']
        envQT['QT4_MOCFROMCXXFLAGS'] += ['-DQT3_SUPPORT']
        
    else:
        envQT.Tool('qt')
    
        # QT_AUTOSCAN does not work because .h and .cpp are not in the same dir
        # envQT.SetDefault(QT_AUTOSCAN = 1)

        # Once again, just in case, Copy() does not work too well
        envQT.Replace(QT_LIB = env['QT_LIB'])

    def AddQtProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
        mocs = [], includes = [], libpath =[], libs = [], cxxflags = [],
        linkflags = []):

        # setup
        basedir = AddLastSlash(basedir)
        fullname = env['prepend'] + name
        binprefix =  os.path.join(env['prefix'], 'bin')

        extra = []
        
        if int(env['QT4']):
            for i in mocs:
                extra.append(envQT.Moc4(basedir + i))
        else:
            for i in mocs:
                extra.append(envQT.Moc(basedir + i))

        sources = Glob(basedir, sources_pattern, skip_list)

        program = envQT.Program(
            basedir + env['prepend'] + name,
            sources + extra,
            CPPPATH = envQT['CPPPATH'] + includes + [env['CPPPATH']],
            LIBPATH = envQT['LIBPATH'] + libpath + [env['LIBPATH']],
            LIBS = envQT['LIBS'] + libs + [env['LIBS']],
            CXXFLAGS = cxxflags + [env['CXXFLAGS']],
            LINKFLAGS = linkflags + [env['LINKFLAGS']],
            LINK = env['LINKERFORPROGRAMS']
            )

        # alias
        alias = env.Alias(fullname, program)
        install = env.Install(binprefix, program)
        env.Alias(fullname, install)
        env.Default(alias)

    # FIXME an AddQtLibrary function does not worth the cost, right?
    graphics_name = 'XmippGraphics'
    graphics_basedir = AddLastSlash('libraries/graphics')

    graphics_sources = Glob(graphics_basedir, '*.cpp', [])
    graphics_cpppath = envQT['CPPPATH'] + ['libraries', '#']

    graphics_objects = []
    for i in graphics_sources:
        graphics_objects.append(i)

    if int(env['static']):
        graphics = envQT.StaticLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )
    else:
        graphics = envQT.SharedLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )

    graphics_alias = env.Alias(graphics_name, graphics)
    graphics_install = env.Install(os.path.join(env['prefix'], 'lib'),
        graphics)
    env.Alias(graphics_name, graphics_install)
    env.Default(graphics_alias)

    # Add a program integrated in the Xmipp structure
    def AddXmippQtProgram(name, mocs=[], libs=[]):
        finalLibPath = ['libraries/data', 'libraries/graphics',
            'libraries/classification', 'libraries/reconstruction', 'external','external/fftw-3.1.2']
        finalIncludePath = ['libraries','#']
        finalLibs = ['XmippData', 'XmippExternal','XmippFftw', 'XmippGraphics',
            'XmippRecons', 'XmippClassif']+libs
        for i in range(len(libs)):
           if libs[i] == 'XmippInterface':
    	      finalLibPath += ['libraries/interface']
           elif libs[i] == 'XmippRecons_Interface':
    	      finalLibPath += ['libraries/interface']
              finalLibs += ['XmippInterface']
        AddQtProgram(name, 'applications/programs/' + name, '*.cpp', [], mocs,
    	    finalIncludePath, finalLibPath, finalLibs, [], [])

    AddXmippQtProgram('edit')
    AddXmippQtProgram('ctf_view', [], ['XmippRecons'])
    AddXmippQtProgram('micrograph_mark', ['popup_menu_mark.h'])
    AddXmippQtProgram('show', [], ['XmippClassif', 'XmippRecons'])
    AddXmippQtProgram('mask_design', [], ['XmippClassif'])

if int(env['matlab']):
    import os
    
    def AddMatlabBinding(name):
	print 'compiling Matlab wrapper for ' + name
        command = env['MATLAB_DIR'] + '/bin/mex -O -outdir matlab_bindings -I. -Ilibraries/data -Ilibraries -Llib -Ilibraries/reconstruction -lXmippRecons -lXmippData -lXmippExternal matlab_bindings/tom_xmipp_' + name + '_wrapper.cpp'
	output = os.popen(command).read()
	if len(output) > 0:
	    print output    

    bindings = ['adjust_ctf','align2d','ctf_correct_phase',
        'mask','mirror','morphology','normalize','psd_enhance',
        'resolution','rotate','scale','scale_pyramid','volume_segment']
    
    for i in range(len(bindings)):
       AddMatlabBinding(bindings[i])


# vi:syntax=python

Import('env')

# Required for custom functions
import os

def AddMatchingFiles((pattern, blacklist, sources), directory, files):
    ''' Callback, adds all matching files in dir '''
    import fnmatch
    for file in fnmatch.filter(files, pattern):
        if file not in blacklist:
           # DBG print 'Adding ' + os.path.join(directory, file)
           sources.append(os.path.join(directory, file))

def Glob(dir, pattern, blacklist):
    ''' Custom made globbing '''
    import os
    sources = []
    os.path.walk(dir, AddMatchingFiles, (pattern, blacklist, sources))
    return sources

def AddLastSlash(string):
    ''' Low trick for correct parsing of paths '''
    if string[len(string)-1] != '/':
        string = string + '/'
    return string

def AddBatch(name, basedir, extension = ''):
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    command = env.Command(os.path.join(basedir, fullname),
        os.path.join(basedir, 'batch_' + name + extension), [Copy('$TARGET',
        '$SOURCE'), Chmod('$TARGET', 0755)])

    # alias
    alias = env.Alias(fullname, command)
    install = env.Install(binprefix, command)
    env.Alias(fullname, install)
    env.Default(alias)

# FIXME default parameters' order, to save writing []
def AddProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
               includes = [], libpath = [], libs = [], cxxflags = [],
               linkflags = []):
    ''' add a new program to the build list '''
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME fix for static executables
    if env['static']:
        cxxflags += [env['STATIC_FLAG']]
        linkflags += [env['STATIC_FLAG']]

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CPPPATH = includes + [env['CPPPATH']],
        LIBPATH = libpath + [env['LIBPATH']],
        LIBS = libs + [env['LIBS']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']],
        LINK = env['LINKERFORPROGRAMS']
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

def AddMPIProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
                  includes = [], libpath = [], libs = [], cxxflags = [],
                  linkflags = []):

    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME fix for static executables
    if env['static']:
        cxxflags += [env['STATIC_FLAG']]
        linkflags += [env['STATIC_FLAG']]

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CC = env['MPI_CC'],
        CXX = env['MPI_CXX'],
        CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
        LIBPATH = libpath + [env['LIBPATH']] + [env['MPI_LIBDIR']],
        LIBS = libs + [env['LIBS']] + [env['MPI_LIB']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']],
        LINK = env['MPI_LINKERFORPROGRAMS']
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

# Add a program integrated in the Xmipp structure
def AddXmippProgram(name, libs=[]):
    finalLibPath = ['libraries/data', 'external']
    finalIncludePath = ['libraries','#']
    finalLibs = libs + ['XmippData', 'XmippExternal']
    for i in range(len(libs)):
       if libs[i] == 'XmippRecons':
          finalLibPath += ['libraries/reconstruction']
       elif libs[i] == 'XmippInterface':
          finalLibPath += ['libraries/interface']
       elif libs[i] == 'XmippRecons_Interface':
          finalLibPath += ['libraries/interface']
	  finalLibs += ['XmippInterface']
       elif libs[i] == 'XmippClassif':
          finalLibPath += ['libraries/classification']
    AddProgram(name, 'applications/programs/' + name, '*.cpp', [],
        finalIncludePath, finalLibPath, finalLibs, [], [])

def AddXmippMPIProgram(name, libs=[]):
    finalLibPath = ['libraries/data', 'external']
    finalIncludePath = ['libraries','#']
    finalLibs = libs + ['XmippData', 'XmippExternal']
    for i in range(len(libs)):
       if libs[i] == 'XmippRecons':
          finalLibPath += ['libraries/reconstruction']
       elif libs[i] == 'XmippInterface':
          finalLibPath += ['libraries/interface']
       elif libs[i] == 'XmippRecons_Interface':
          finalLibPath += ['libraries/interface']
	  finalLibs += ['XmippInterface']
       elif libs[i] == 'XmippReconsMPI':
          finalLibPath += ['libraries/reconstruction_mpi']
       elif libs[i] == 'XmippClassif':
          finalLibPath += ['libraries/classification']
    AddMPIProgram(name, 'applications/programs/' + name, '*.cpp', [],
        finalIncludePath, finalLibPath, finalLibs, [], [])

# For Roberto's new lib
def AddMPILibrary(name, basedir, sources, includes):
    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']],
            LIBS = [env['MPI_LIB']]
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']],
            LIBS = [env['MPI_LIB']]
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

# COSS wanted an explicit list...
def AddLibrary(name, basedir, sources, includes, libpath=[], libs=[]):

    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        if x.find(basedir)==-1:
            sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

# --- Libraries

# Cuba
CubaSources = [
    'cuba/src/vegas/Vegas.c',
    'cuba/src/suave/Suave.c',
    'cuba/src/divonne/Divonne.c',
    'cuba/src/cuhre/Cuhre.c']

# Bilib
BilibSources = Glob('external/bilib/sources', '*.cc', [])

# INRIA
INRIASources = Glob('external/inria', '*.cc', [])

if env['CC'] == 'gcc':
   AddLibrary('XmippExternal', 'external',
      INRIASources + BilibSources + CubaSources,
      ['bilib', 'bilib/headers', 'bilib/types', 'cuba/src/common'])
else:
   AddLibrary('XmippExternal', 'external',
      INRIASources + BilibSources,
      ['bilib', 'bilib/headers', 'bilib/types'])

# XmippData
DataSources = Glob('libraries/data','*.cpp',[])
AddLibrary('XmippData', 'libraries/data', DataSources, ['#'])

# Reconstruction
ReconsSources = [
    'adjust_ctf.cpp',
    'adjust_surface.cpp',
    'adjust_volume_grey_levels.cpp',
    'align2d.cpp',
    'align_tilt_pairs.cpp',
    'angular_assign_for_tomogram.cpp',
    'angular_continuous_assign.cpp',
    'angular_discrete_assign.cpp',
    'angular_distance.cpp',
    'angular_neighbourhood.cpp',
    'angular_projection_matching.cpp',
    'crystal_angular_projection_matching.cpp',
    'art_crystal.cpp',
    'basic_art.cpp',
    'basis.cpp',
    'blobs.cpp',
    'break_symmetry.cpp',
    'convert_pdb2vol.cpp',
    'crystal_create_surface.cpp',
    'ctf_correct_idr.cpp',
    'ctf_correct_phase.cpp',
    'ctf_correct_amplitude3d.cpp',
    'ctf.cpp',
    'ctf_estimate_from_micrograph.cpp',
    'directions.cpp',
    'draw_surface.cpp',
    'euler.cpp',
    'evaluate_fscs.cpp',
    'foms_evaluate.cpp',
    'fourier_filter.cpp',
    'grids.cpp',
    'ml_align2d.cpp',
    'ml_refine3d.cpp',
    'mlf_tomo.cpp',
    'phantom.cpp',
    'phantom_create_random.cpp',
    'phantom_simulate_microscope.cpp',
    'precompute_sampling.cpp',
    'project.cpp',
    'project_crystal.cpp',
    'projection.cpp',
    'psd_enhance.cpp',
    'radon.cpp',
    'recons_misc.cpp',
    'reconstruct_art.cpp',
    'reconstruct_wbp.cpp',
    'refinement.cpp',
    'resolution_ssnr.cpp',
    'sampling.cpp',
    'spar.cpp',
    'sparma.cpp',
    'splines.cpp',
    'surface.cpp',
    'symmetries.cpp',
    'symmetrize.cpp',
    'volume_foms.cpp',
    'volume_labelling.cpp']

AddLibrary('XmippRecons', 'libraries/reconstruction', ReconsSources,
           ['#libraries', '#external', '#'])

# ReconsInterface
ReconsInterfaceSources = [
    'crystal_aph2img.cpp',
    'crystal_unbend.cpp',
    'im_unbend.cpp',
    'phantom_test_reconstruction.cpp',
    'recons_spider.cpp']

AddLibrary('XmippRecons_Interface', '#libraries/reconstruction',
           ReconsInterfaceSources, ['#libraries', '#external', '#'])

# ReconstrunctionMPI
if int(env['mpi']):
    ReconstructionMPISources = ['mpi_run.cpp']
    AddMPILibrary('XmippReconsMPI', '#libraries/reconstruction_mpi',
        ReconstructionMPISources, ['#libraries'])

# Classification
ClassificationSources = Glob('libraries/classification', '*.cpp', [])
AddLibrary('XmippClassif', 'libraries/classification', ClassificationSources,
    ['#libraries',  '#'])

# Interface
InterfaceSources = Glob('libraries/interface', '*.cpp', [])
AddLibrary('XmippInterface', 'libraries/interface', InterfaceSources,
    ['#libraries', '#external', '#'])

# OldXmipp
OldXmippSources = Glob('libraries/legacy', '*.cpp',[])
AddLibrary('OldXmipp', 'libraries/legacy', OldXmippSources,[])

# --- Programs

# FindSCenter
AddProgram('find_center2d', 'applications/legacy/find_center2d', '*.cpp', [],
    ['libraries'], ['libraries/data', 'libraries/legacy', 'external'],
    ['XmippData', 'OldXmipp', 'XmippExternal'], [], [])

# Src (apps)

AddXmippProgram('add_noise')
AddXmippProgram('adjust_volume_grey_levels', ['XmippRecons'])
AddXmippProgram('align2d', ['XmippRecons'])
AddXmippProgram('align_tilt_pairs', ['XmippRecons'])
AddXmippProgram('align_volumes')
AddXmippProgram('angular_assign_for_tomogram', ['XmippRecons'])
AddXmippProgram('angular_continuous_assign', ['XmippRecons'])
AddXmippProgram('angular_discrete_assign', ['XmippRecons'])
AddXmippProgram('angular_distance', ['XmippRecons'])
AddXmippProgram('angular_distribution_show', ['XmippInterface'])
AddXmippProgram('angular_neighbourhood', ['XmippRecons'])
AddXmippProgram('angular_projection_matching', ['XmippRecons'])
AddXmippProgram('average')
AddXmippProgram('break_symmetry',               ['XmippRecons'])
# FIXME -Wno-deprecated
AddXmippProgram('classify_batch_som', ['XmippClassif'])
AddXmippProgram('classify_fcmeans', ['XmippClassif'])
AddXmippProgram('classify_fkcn', ['XmippClassif'])
AddXmippProgram('classify_fsom',  ['XmippClassif'])
AddXmippProgram('classify_kcmeans', ['XmippClassif'])
AddXmippProgram('classify_kerdensom', ['XmippClassif'])
AddXmippProgram('classify_pca', ['XmippClassif'])
AddXmippProgram('classify_project_pca', ['XmippClassif'])
AddXmippProgram('classify_sammon_projection', ['XmippClassif'])
AddXmippProgram('classify_som',['XmippClassif'])
AddXmippProgram('convert_data2descr', ['XmippClassif'])
AddXmippProgram('convert_data2img', ['XmippClassif'])
AddXmippProgram('convert_data2pdb', ['XmippClassif'])
AddXmippProgram('convert_data2vol', ['XmippClassif'])
AddXmippProgram('convert_img2data')
AddXmippProgram('convert_pdb2vol', ['XmippRecons'])
AddXmippProgram('convert_raw22spi')
AddXmippProgram('convert_spi22em', ['XmippRecons','XmippRecons_Interface'])
AddXmippProgram('convert_spi22ccp4', ['XmippRecons','XmippRecons_Interface'])
AddXmippProgram('convert_vol2data')
AddXmippProgram('convert_vol2pseudo')
AddXmippProgram('convert_voxels22blobs',      	['XmippRecons'])
AddXmippProgram('correlation', ['XmippRecons','XmippInterface'])
AddXmippProgram('crystal_angular_projection_matching',	['XmippRecons'])
AddXmippProgram('crystal_aph2img', ['XmippRecons','XmippRecons_Interface'])
AddXmippProgram('crystal_create_surface', ['XmippRecons'])
AddXmippProgram('crystal_euler2mrc', ['XmippRecons','XmippRecons_Interface'])
AddXmippProgram('crystal_lattice_vectors')
AddXmippProgram('crystal_shear', ['XmippRecons','XmippInterface'])
AddXmippProgram('crystal_skew', ['XmippRecons'])
AddXmippProgram('crystal_unbend', ['XmippRecons', 'XmippRecons_Interface'])
AddXmippProgram('ctf_correct_idr', ['XmippRecons'])
AddXmippProgram('ctf_correct_phase', ['XmippRecons'])
AddXmippProgram('ctf_correct_amplitude3d', ['XmippRecons'])
AddXmippProgram('ctf_estimate_from_micrograph', ['XmippRecons'])
AddXmippProgram('ctf_estimate_from_psd', ['XmippRecons'])
AddXmippProgram('ctf_profile', ['XmippRecons'])
AddXmippProgram('denoise')
AddXmippProgram('docfile_append')
AddXmippProgram('docfile_histogram')
AddXmippProgram('find_center3d')
AddXmippProgram('foms_evaluate', ['XmippRecons'])
AddXmippProgram('fourier_filter', ['XmippRecons'])
AddXmippProgram('fourier_transform')
AddXmippProgram('header_apply')
AddXmippProgram('header_assign')
AddXmippProgram('header_extract')
AddXmippProgram('header_print')
AddXmippProgram('header_reset')
AddXmippProgram('histogram')
AddXmippProgram('make_spectra')
AddXmippProgram('mask')
AddXmippProgram('micrograph_denoise')
AddXmippProgram('micrograph_downsample')
AddXmippProgram('micrograph_scissor')
AddXmippProgram('micrograph_window')
AddXmippProgram('mirror')
AddXmippProgram('ml_align2d', ['XmippRecons'])
AddXmippProgram('ml_align2d_combine', ['XmippRecons'])
AddXmippProgram('ml_refine3d', ['XmippRecons'])
AddXmippProgram('mlf_tomo', ['XmippRecons'])
AddXmippProgram('morphology')
AddXmippProgram('normalize')
AddXmippProgram('operate')
AddXmippProgram('phantom_create', ['XmippRecons'])
AddXmippProgram('phantom_create_random', ['XmippRecons'])
AddXmippProgram('phantom_simulate_microscope', ['XmippRecons'])
AddXmippProgram('phantom_test_reconstruction', ['XmippRecons_Interface',
    'XmippRecons'])
AddXmippProgram('phantom_transform', ['XmippRecons'])
AddXmippProgram('project', ['XmippRecons'])
AddXmippProgram('psd_enhance', ['XmippRecons'])
AddXmippProgram('range_adjust')
AddXmippProgram('reconstruct_art', ['XmippRecons'])
AddXmippProgram('reconstruct_wbp', ['XmippRecons'])
AddXmippProgram('resolution_fsc')
AddXmippProgram('resolution_ssnr', ['XmippRecons'])
AddXmippProgram('reverse_endian')
AddXmippProgram('rotate')
AddXmippProgram('scale')
AddXmippProgram('scale_pyramid')
AddXmippProgram('selfile_compare')
AddXmippProgram('selfile_copy')
AddXmippProgram('selfile_delete')
AddXmippProgram('selfile_move')
AddXmippProgram('selfile_select')
AddXmippProgram('selfile_split')
AddXmippProgram('selfile_statistics')
AddXmippProgram('separate_objects')
AddXmippProgram('shift')
AddXmippProgram('sort_by_statistics')
AddXmippProgram('statistics')
AddXmippProgram('symmetrize', ['XmippRecons'])
AddXmippProgram('threshold')
AddXmippProgram('try_symmetry')
AddXmippProgram('volume_segment')
AddXmippProgram('window')

# --- Scripts

# Batches (apps)
# NOTE PDBsidechain is in the only one in perl
AddBatch('selfile_create', 'applications/scripts/selfile_create')
AddBatch('convert_pdb2descr', 'applications/scripts/convert_pdb2descr')
AddBatch('extract_sidechain_from_pdb',
    'applications/scripts/extract_sidechain_from_pdb', '.pl')
AddBatch('convert_pdb2surface', 'applications/scripts/convert_pdb2surface')
AddBatch('mlf_align2d', 'applications/scripts/mlf_align2d')
AddBatch('mlf_refine3d', 'applications/scripts/mlf_refine3d')
AddBatch('mpi_mlf_align2d', 'applications/scripts/mpi_mlf_align2d')
AddBatch('mpi_mlf_refine3d', 'applications/scripts/mpi_mlf_refine3d')
AddBatch('protocols', 'applications/scripts/protocols')

# FIXME Protocols?

BackwardsBatches = [
    'adjust_volume',
    'align3D',
    'ang_distribution',
    'angular_predict',
    'angular_predict_continuous',
    'angular_predict_tomography',
    'appenddocfile',
    'applygeo',
    'art',
    'CTF_profile',
    'batchsom',
    'break_sym',
    'centilt',
    'compare_selfiles',
    'correctphase',
    'cpsel',
    'create_phantom',
    'create_surface',
    'CTF_profile',
    'data2img',
    'data2vol',
    'deform',
    'denoising',
    'denoising_micrograph',
    'do_selfile',
    'downsample',
    'EM2Angles',
    'enhance_psd',
    'evaluate',
    'fcmeans',
    'findcenter',
    'findcenter3D',
    'fkcn',
    'flip',
    'fourierfilter',
    'fsom',
    'idr_art',
    'img2data',
    'infogeo',
    'kcmeans',
    'kerdensom',
    'lattice_vectors',
    'mark',
    'markhan',
    'microscope',
    'MLalign2D',
    'MLalign2D_combine',
    'MLrefine3D',
    'mvsel',
    'pca',
    'PDB2descr',
    'pdb2surface',
    'pdbphantom',
    'PDBsidechain',
    'projection_matching',
    'projection_neighbourhood',
    'projectpca',
    'pyramid',
    'random_phantom',
    'raw22spi',
    'recons_test',
    'resolution',
    'rmsel',
    'sammon',
    'scissor',
    'segment',
    'select_images',
    'sel_stats',
    'skew',
    'som',
    'sort_junk',
    'spi22ccp4',
    'spi22em',
    'split_selfile',
    'Spots2RealSpace2D',
    'ssnr',
    'statis',
    'toPDB',
    'toPhantom',
    'unbend',
    'visualize_fft',
    'vol2data',
    'volsampler',
    'voxels22blobs',
    'wbp',
    'window_micrograph'
]

# FIXME TODO No operator += for lists?
if int(env['mpi']):
    BackwardsBatches = BackwardsBatches + ['mpi_MLalign2D', 'mpi_MLrefine3D',
    'mpi_projection_matching']

if int(env['tiff']):
    BackwardsBatches = BackwardsBatches + ['tiff2raw']

if int(env['gui']):
    BackwardsBatches = BackwardsBatches + ['ctfviewer', 'xmask']

for b in BackwardsBatches:
    AddBatch(b, 'applications/scripts/backwards')

# MPI
if int(env['mpi']):
    AddXmippMPIProgram('mpi_angular_discrete_assign', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_continuous_assign', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_projection_matching', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_align2d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_refine3d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_art', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_wbp', ['XmippRecons'])
    AddXmippMPIProgram('mpi_run', ['XmippReconsMPI'])

# TIFF
# Tiff2Raw
# FIXME m jpeg and z really required?
if int(env['tiff']):
    AddProgram('convert_tiff2raw', 'applications/programs/convert_tiff2raw',
        '*.cpp', [], ['libraries', env['TIFF_INCLUDE']],
        [env['TIFF_LIBDIR']], ['tiff', 'm', 'jpeg', 'z'])

# QT
if int(env['gui']):
    envQT = env.Copy()
    envQT.Tool('qt')

    # Once again, just in case, Copy() does not work too well
    envQT.Replace(QT_LIB = env['QT_LIB'])

    # QT_AUTOSCAN does not work because .h and .cpp are not in the same dir
    envQT.SetDefault(QT_AUTOSCAN = 1)

    def AddQtProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
        mocs = [], includes = [], libpath =[], libs = [], cxxflags = [],
        linkflags = []):

        # setup
        basedir = AddLastSlash(basedir)
        fullname = env['prepend'] + name
        binprefix =  os.path.join(env['prefix'], 'bin')

        extra = []
        for i in mocs:
            extra.append(envQT.Moc(basedir + i))

        sources = Glob(basedir, sources_pattern, skip_list)

        program = envQT.Program(
            basedir + env['prepend'] + name,
            sources + extra,
            CPPPATH = envQT['CPPPATH'] + includes + [env['CPPPATH']],
            LIBPATH = envQT['LIBPATH'] + libpath + [env['LIBPATH']],
            LIBS = envQT['LIBS'] + libs + [env['LIBS']],
            CXXFLAGS = cxxflags + [env['CXXFLAGS']],
            LINKFLAGS = linkflags + [env['LINKFLAGS']],
            LINK = env['LINKERFORPROGRAMS']
            )

        # alias
        alias = env.Alias(fullname, program)
        install = env.Install(binprefix, program)
        env.Alias(fullname, install)
        env.Default(alias)

    # FIXME an AddQtLibrary function does not worth the cost, right?
    graphics_name = 'XmippGraphics'
    graphics_basedir = AddLastSlash('libraries/graphics')

    graphics_sources = Glob(graphics_basedir, '*.cpp', [])
    graphics_cpppath = envQT['CPPPATH'] + ['libraries', '#']

    graphics_objects = []
    for i in graphics_sources:
        graphics_objects.append(i)

    if int(env['static']):
        graphics = envQT.StaticLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )
    else:
        graphics = envQT.SharedLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )

    graphics_alias = env.Alias(graphics_name, graphics)
    graphics_install = env.Install(os.path.join(env['prefix'], 'lib'),
        graphics)
    env.Alias(graphics_name, graphics_install)
    env.Default(graphics_alias)

    # Add a program integrated in the Xmipp structure
    def AddXmippQtProgram(name, mocs=[], libs=[]):
        finalLibPath = ['libraries/data', 'libraries/graphics',
            'libraries/classification', 'libraries/reconstruction', 'external']
        finalIncludePath = ['libraries','#']
        finalLibs = ['XmippData', 'XmippExternal', 'XmippGraphics',
            'XmippRecons', 'XmippClassif']+libs
        for i in range(len(libs)):
           if libs[i] == 'XmippInterface':
    	      finalLibPath += ['libraries/interface']
           elif libs[i] == 'XmippRecons_Interface':
    	      finalLibPath += ['libraries/interface']
              finalLibs += ['XmippInterface']
        AddQtProgram(name, 'applications/programs/' + name, '*.cpp', [], mocs,
    	    finalIncludePath, finalLibPath, finalLibs, [], [])

    AddXmippQtProgram('edit')
    AddXmippQtProgram('ctf_view', [], ['XmippRecons'])
    AddXmippQtProgram('micrograph_mark', ['popup_menu_mark.h'])
    AddXmippQtProgram('show', [], ['XmippClassif', 'XmippRecons'])
    AddXmippQtProgram('mask_design', [], ['XmippClassif'])


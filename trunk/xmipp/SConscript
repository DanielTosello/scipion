#!/usr/bin/env python

Import('env')

# Required for custom functions
import os

FFTWDir="external/fftw-3.2.2"
FFTWLibs=['fftw3','fftw3_threads']
TIFFDir="external/tiff-3.9.4"
TIFFLibs=['tiff']
SQliteDir="external/sqlite-3.6.23"
SQLiteLibs=['sqlite3']

def AddMatchingFiles((pattern, blacklist, sources), directory, files):
    ''' Callback, adds all matching files in dir '''
    import fnmatch
    for file in fnmatch.filter(files, pattern):
        if file not in blacklist:
           # DBG print 'Adding ' + os.path.join(directory, file)
           sources.append(os.path.join(directory, file))

def Glob(dir, pattern, blacklist):
    ''' Custom made globbing '''
    import os
    sources = []
    os.path.walk(dir, AddMatchingFiles, (pattern, blacklist, sources))
    return sources

def AddLastSlash(string):
    ''' Low trick for correct parsing of paths '''
    str = string.strip();
    if len(str) == 0:
        return "";
    if not str.endswith('/'):
        str = str + '/'
    return str

def AddBatch(name, basedir, extension = ''):
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    command = env.Command(os.path.join(basedir, fullname),
        os.path.join(basedir, 'batch_' + name + extension), [Copy('$TARGET',
        '$SOURCE'), Chmod('$TARGET', 0755)])

    # alias
    alias = env.Alias(fullname, command)
    install = env.Install(binprefix, command)
    env.Alias(fullname, install)
    env.Default(alias)

def AddProtocol(name, basedir):
    # setup
    basedir = AddLastSlash(basedir)
    binprefix = os.path.join(env['prefix'], 'protocols')

    # only add prefix to protocol_*
    if name.find('protocol') < 0:
            install = env.Install(binprefix, basedir + name)
            env.Default(install)

    else:
        fullname = env['prepend'] + name

        # action
        command = env.Command(os.path.join(basedir, fullname),
            os.path.join(basedir, name), [Copy('$TARGET',
            '$SOURCE'), Chmod('$TARGET', 0755)])


        # alias
        alias = env.Alias(fullname, command)
        install = env.Install(binprefix, command)
        env.Alias(fullname, install)
        env.Default(alias)

# FIXME default parameters' order, to save writing []
def AddProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
               includes = [], libpath = [], libs = [], cxxflags = [],
               linkflags = []):
    ''' add a new program to the build list '''
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME fix for static executables
    if env['static']:
        cxxflags += [env['STATIC_FLAG']]
        linkflags += [env['STATIC_FLAG']]

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CPPPATH = includes + [env['CPPPATH']],
        LIBPATH = libpath + [env['LIBPATH']],
        LIBS = libs + [env['LIBS']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']],
        LINK = env['LINKERFORPROGRAMS']
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

def AddMPIProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
                  includes = [], libpath = [], libs = [], cxxflags = [],
                  linkflags = []):

    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME fix for static executables
    if env['static']:
        cxxflags += [env['STATIC_FLAG']]
        linkflags += [env['STATIC_FLAG']]

    # action
    program = env.Program(
        os.path.join(basedir, fullname),
        sources,
        CC = env['MPI_CC'],
        CXX = env['MPI_CXX'],
        CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
        LIBPATH = libpath + [env['LIBPATH']] + [env['MPI_LIBDIR']],
        LIBS = libs + [env['LIBS']] + [env['MPI_LIB']],
        CXXFLAGS = cxxflags + [env['CXXFLAGS']],
        LINKFLAGS = linkflags + [env['LINKFLAGS']],
        LINK = env['MPI_LINKERFORPROGRAMS']
        )

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

# Add a program integrated in the Xmipp structure
def AddXmippProgram(name, libs=[]):
    finalLibPath = ['lib']
    finalIncludePath = ['libraries','#']
    finalLibs = libs + ['XmippData', 'XmippExternal'] + FFTWLibs + SQLiteLibs + TIFFLibs
    AddProgram(name, 'applications/programs/' + name, '*.cpp', [],
        finalIncludePath, finalLibPath, finalLibs, [], [])

def AddXmippMPIProgram(name, libs=[]):
    finalLibPath = ['lib']
    finalIncludePath = ['libraries','#']
    finalLibs = libs + ['XmippData', 'XmippExternal', 'XmippParallel'] + FFTWLibs + SQLiteLibs + TIFFLibs
    for i in range(len(libs)):
       if libs[i] == 'XmippRecons':
          finalLibPath += ['libraries/reconstruction']
       elif libs[i] == 'XmippInterface':
          finalLibPath += ['libraries/interface']
       elif libs[i] == 'XmippRecons_Interface':
          finalLibPath += ['libraries/interface']
	  finalLibs.insert(i+1,'XmippInterface')
       elif libs[i] == 'XmippReconsMPI':
          finalLibPath += ['libraries/reconstruction_mpi']
       elif libs[i] == 'XmippClassif':
          finalLibPath += ['libraries/classification']
    AddMPIProgram(name, 'applications/programs/' + name, '*.cpp', [],
        finalIncludePath, finalLibPath, finalLibs, [], [])

# For Roberto's new lib
def AddMPILibrary(name, basedir, sources, includes, libpath=[], libs=[]):
    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    #for x in sources:
    #    sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']] + libpath,
            LIBS = [env['MPI_LIB']] + libs
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']] + [env['MPI_INCLUDE']],
            CC = env['MPI_CC'],
            CXX = env['MPI_CXX'],
            LIBPATH = [env['MPI_LIBDIR']] + libpath,
            LIBS = [env['MPI_LIB']] + libs
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

def AddLibrary(name, basedir, sources, includes, libpath=[], libs=[],
    shlibprefix='lib'):
    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        if x.find(basedir)==-1:
            sources[sources.index(x)] = basedir + x

    # separate local and global includes
    for x in includes:
        if x[0] != '#' and x[0]!='/':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    # Sjors: Hack for OS X compilation (static libs, dynamic apps...??)
    if int(env['static']) or (env['PLATFORM'] == 'darwin'):
        library = env.StaticLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs
            )
    else:
        library = env.SharedLibrary(
            basedir + name,
            sources,
            CPPPATH = includes + [env['CPPPATH']],
            LIBPATH = libpath,
            LIBS = libs,
            SHLIBPREFIX=shlibprefix
            )

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

def AddJavaLibrary(name, basedir, srcdir):#, sourceList, includes, libpath=[], libs=[]):
    import shutil

    jarname = name + '.jar'
    jarfile = basedir + '/' + jarname

    # Compiles
    java_home = 'external/java/jvm/'
    #java_headers = os.path.join(java_home, 'include')
    #java_libs = os.path.join(java_home, 'lib')

    # Adds javac and jar to PATH
    env = Environment(tools = ['javac', 'jar'])
    env.AppendENVPath('PATH', java_home + '/bin')

    env['JAVA_HOME'] = java_home
    #env['JNI_CPPPATH'] = java_headers
    #env['JNI_LIBPATH'] = java_libs
    #env['JAVACFLAGS'] = ''

    env['JARFLAGS'] = '-Mcf'    # Default "cf". "M" = Do not add a manifest file.

    path = os.path.join(basedir, srcdir)

    buildJar = env.Jar(target = jarfile,
        source = path,
        JARCHDIR = basedir)

    buildClasses = env.Java(basedir, path)

    # Packs classes and plugin config file into jar.
    env.Default(buildClasses)
    env.Default(buildJar)

def removeAll(basedir, regexp):
	import glob

	files=glob.glob(basedir + regexp)
	for i in range(len(files)):
		os.remove(files[i])

def AddImageJPlugin(name, pluginDir, outDir):
    import shutil

    sourceDir = pluginDir+"/src/"
    resourcesDir = sourceDir+"/resources/"
    libsDir = pluginDir+"/libs/"
    macrosDir = pluginDir+"/macros/"
    buildDir = pluginDir+"/build/"

    # Builds jar files list...
    libsStr='external/imagej/ij.jar:external/imagej/plugins/XmippJavaInterface.jar'
    if os.path.exists(libsDir) and len(os.listdir(libsDir)) > 0:
	# Copies libraries to ImageJ plugins dir.
	for f in os.listdir(libsDir):
		lib_item = os.path.join(libsDir, f)
		if os.path.isfile(lib_item):
        		shutil.copy(lib_item, outDir)
			libsStr = libsStr + ':' + lib_item

    # Clears "buildDir"
    if os.path.exists(buildDir):
	shutil.rmtree(buildDir)

    # Copies 'plugins.config' to build dir...
    os.mkdir(buildDir)
    shutil.copy(sourceDir + 'plugins.config', buildDir)
    # ...and resources (icons and stuff), if any
    if os.path.exists(resourcesDir):
	    shutil.copytree(resourcesDir, buildDir+'resources/')

    # Compiles
    java_home = 'external/java/jvm/'
    java_headers = os.path.join(java_home, 'include')
    java_libs = os.path.join(java_home, 'lib')

    # Adds javac and jar to PATH
    env = Environment(tools = ['javac', 'jar'])
    env.AppendENVPath('PATH', java_home + '/bin')

    env['JAVA_HOME'] = java_home
    env['JNI_CPPPATH'] = java_headers
    env['JNI_LIBPATH'] = java_libs
    env['JAVACFLAGS'] = '-classpath ' + libsStr +\
           os.pathsep.join(env['JAVACLASSPATH'])

    env['JARFLAGS'] = '-Mcf'    # Default "cf". "M" = Do not add a manifest file.
    buildJar=env.Jar(target=outDir + '/' + name + '.jar',
        source = buildDir,
        JARCHDIR = buildDir)

    env['ENV']['LANG'] = 'en_GB.UTF-8'
    buildClasses=env.Java(buildDir,sourceDir)

    # Packs classes and plugin config file into jar.
    env.Default(buildClasses)
    env.Default(buildJar)

    # Copies macros to ImageJ/macros folder (if any).
    outMacrosDir = outDir + '/../macros/'
    if os.path.exists(macrosDir) and len(os.listdir(macrosDir)) > 0:
	for f in os.listdir(macrosDir):
		macro_item = os.path.join(macrosDir, f)
		if os.path.isfile(macro_item):
        		shutil.copy(macro_item, os.path.join(outDir, os.pardir) + "/macros")

# Copies ImageJ external plugins (3rd party)
def AddImageJExternalPlugins(pluginsDir, outDir):
    Execute("rsync -av " + os.path.join(pluginsDir, '* ') + outDir + ' --exclude=".*/"')

def AddSQLiteLibrary():
    libprefix = os.path.join(env['prefix'], 'lib')
    numJobs=env.GetOption('num_jobs')

    name1='libsqlite3'
    name1la='libsqlite3.la'
    if int(env['static']):
        name1+=".a"
    else:
        if env['PLATFORM'] == 'darwin':
            name1+=".dylib"
        else:
            name1+=".so"

    toBuild=[SQliteDir+'/.libs/'+name1, SQliteDir+'/.libs/'+name1la]
    toCopy=[name1, name1la]
    if not int(env['static']):
        if not env['PLATFORM'] == 'darwin':
            toBuild+=[SQliteDir+'/.libs/'+name1+".0"]
            toCopy+=[name1+".0"]
    lib1 = env.Command(toBuild, SQliteDir+"/sqlite3.c",
        "cd "+SQliteDir+" ; make clean > /dev/null ; make " +\
        " > ../../build/sqlite_make.log; "+\
        "chmod 755 sqlite3; mkdir -p ../../bin/; rm -rf ../../bin/xmipp_sqlite3; "+ \
	    "cp sqlite3 ../../bin/xmipp_sqlite3")
    alias = env.Alias(toCopy, lib1)
    install = env.Install(libprefix, source=toBuild)
    env.Alias(toCopy, install)
    env.Default(alias)

def AddFFTWLibrary():
    libprefix = os.path.join(env['prefix'], 'lib')
    numJobs=env.GetOption('num_jobs')

    name1='libfftw3'
    name2='libfftw3_threads'
    name1la='libfftw3.la'
    name2la='libfftw3_threads.la'
    if int(env['static']):
        name1+=".a"
        name2+=".a"
    else:
        if env['PLATFORM'] == 'darwin':
            name1+=".dylib"
            name2+=".dylib"
        else:
            name1+=".so"
            name2+=".so"

    toBuild=[FFTWDir+'/.libs/'+name1, FFTWDir+'/.libs/'+name1la,
             FFTWDir+'/threads/.libs/'+name2, FFTWDir+'/threads/.libs/'+name2la]
    toCopy=[name1, name2, name1la, name2la]

    if not int(env['static']):
        if not env['PLATFORM'] == 'darwin':
            toBuild+=[FFTWDir+'/.libs/'+name1+".3",
                      FFTWDir+'/threads/.libs/'+name2+".3"]
            toCopy+=[name1+".3",name2+".3"]
        else:
            toBuild+=[FFTWDir+'/.libs/'+name1,
                      FFTWDir+'/threads/.libs/'+name2]
            toCopy+=[name1,name2]
    lib1 = env.Command(toBuild, FFTWDir+"/kernel/assert.c",
        "cd "+FFTWDir+" ; make clean > /dev/null ; make "+\
        " > ../../build/fftw_make.log ; make install >> ../../build/fftw_make.log")
    alias = env.Alias(toCopy, lib1)
    install = env.Install(libprefix, source=toBuild)
    env.Alias(toCopy, install)
    env.Default(alias)

def AddTIFFLibrary():
    libprefix = os.path.join(env['prefix'], 'lib')
    numJobs=env.GetOption('num_jobs')

    name1='libtiff'
    name1la='libtiff.la'
    if int(env['static']):
        name1+=".a"
    else:
        if env['PLATFORM'] == 'darwin':
            name1+=".dylib"
        else:
            name1+=".so"

    toBuild=[TIFFDir+'/libtiff/.libs/'+name1, TIFFDir+'/libtiff/.libs/'+name1la]
    toCopy=[name1, name1la]

    if not int(env['static']):
        if not env['PLATFORM'] == 'darwin':
            toBuild+=[TIFFDir+'/libtiff/.libs/'+name1+".3"]
            toCopy+=[name1+".3"]
        else:
            toBuild+=[TIFFDir+'/libtiff/.libs/'+name1]
            toCopy+=[name1]
    lib1 = env.Command(toBuild, TIFFDir+"/libtiff/tif_flush.c",
        "cd "+TIFFDir+" ; make clean > /dev/null ; make " +\
        " > ../../build/tiff_make.log ; make install >> ../../build/tiff_make.log")
    alias = env.Alias(toCopy, lib1)
    install = env.Install(libprefix, source=toBuild)
    env.Alias(toCopy, install)
    env.Default(alias)

# --- Libraries

# SQLite
AddSQLiteLibrary()

# FFTW
AddFFTWLibrary()

# TIFF
AddTIFFLibrary()

# Bilib
BilibSources = Glob('external/bilib/sources', '*.cc', [])

# INRIA
INRIASources = Glob('external/inria', '*.cc', [])

# Condor
CondorSources = Glob('external/condor', '*.cpp', [])

AddLibrary('XmippExternal', 'external',
   INRIASources + BilibSources + CondorSources,
   ['bilib', 'bilib/headers', 'bilib/types'])

# XmippData
DataSources = Glob('libraries/data','*.cpp',[])
AddLibrary('XmippData', 'libraries/data', DataSources, ['#'],
           ['lib'],['XmippExternal']+FFTWLibs+TIFFLibs+SQLiteLibs)

#Xmipp Python Extension
PyExtSources = Glob('libraries/bindings/python', '*.cpp', [])
import distutils.sysconfig
AddLibrary('xmipp', 'libraries/bindings/python', PyExtSources,
           ['#libraries',"#", distutils.sysconfig.get_python_inc()],
           ['lib'],['XmippData'],'')

# Reconstruction
ReconsSources = [
    'adjust_ctf.cpp',
    'adjust_volume_grey_levels.cpp',
    'align2d.cpp',
    'align_tilt_pairs.cpp',
    'angular_assign_for_tilt_series.cpp',
    'angular_assign_for_tomogram.cpp',
    'angular_commonline.cpp',
    'angular_continuous_assign.cpp',
    'angular_discrete_assign.cpp',
    'angular_distance.cpp',
    'angular_neighbourhood.cpp',
    'angular_projection_matching.cpp',
    'angular_class_average.cpp',
    'angular_project_library.cpp',
    'art_crystal.cpp',
    'basic_art.cpp',
    'common_lines.cpp',
    'convert_pdb2vol.cpp',
    'convert_vol2pseudo.cpp',
    'correct_bfactor.cpp',
    'create_projection_library.cpp',
    'ctf_correct_amplitude3d.cpp',
    'ctf_correct_idr.cpp',
    'ctf_estimate_from_micrograph.cpp',
    'ctf_group.cpp',
    'denoise.cpp',
    'detect_missing_wedge.cpp',
##    'detect_structures.cpp',
    'directions.cpp',
    'enhance_contrast.cpp',
    'filter_projections.cpp',
    'fourier_filter.cpp',
    'make_spectra.cpp',
    'micrograph_phase_flipping.cpp',
    'micrograph_downsample.cpp',
    'ml_align2d.cpp',
###    'ml_align3d.cpp',
##    'mlf_align2d.cpp',
    'ml_refine3d.cpp',
    'ml_tomo.cpp',
    'nma_alignment.cpp',
#    'phantom_create_micrograph.cpp',
    'phantom_create_random.cpp',
    'phantom_simulate_microscope.cpp',
    'precompute_sampling.cpp',
    'program_extension.cpp',
    'project.cpp',
    'project_crystal.cpp',
    'project_XR.cpp',
    'projection_real_shears.cpp',
    'projectTomography.cpp',
    'psd_enhance.cpp',
    'psd_sort.cpp',
    'radon.cpp',
    'range_adjust.cpp',
    'recons_misc.cpp',
    'reconstruct_art.cpp',
    'reconstruct_art_pseudo.cpp',
    'reconstruct_fourier.cpp',
    'reconstruct_wbp.cpp',
    'refinement.cpp',
    'resolution_ssnr.cpp',
    'series_remove_fluctuations.cpp',
    'sparma.cpp',
    'symmetrize.cpp',
    'tomo_align_dual_tilt_series.cpp',
    'virus_vertex.cpp',
    'volume_segment.cpp',
    'xray_import.cpp'
]

AddLibrary('XmippRecons', 'libraries/reconstruction', ReconsSources,
           ['#libraries', '#external', '#'],['lib'],['XmippExternal','XmippData','pthread'])

# Classification
ClassificationSources = Glob('libraries/classification', '*.cpp', [])
AddLibrary('XmippClassif', 'libraries/classification', ClassificationSources,
    ['#libraries',  '#'],['lib'],['XmippExternal','XmippData'])

# XmippParallel
if int(env['mpi']):
    ParallelSources = Glob('libraries/parallel', '*.cpp', []);
    AddMPILibrary("XmippParallel", 'libraries/parallel', ParallelSources, ["#", "#libraries", "#external"],
              ['lib'],['XmippExternal','XmippData','XmippRecons','XmippClassif']+FFTWLibs+TIFFLibs+SQLiteLibs)

# Interface
InterfaceSources = Glob('libraries/interface', '*.cpp', [])
AddLibrary('XmippInterface', 'libraries/interface', InterfaceSources,
    ['#libraries', '#external', '#'],['lib'],['XmippExternal','XmippData','pthread'])

# Recons Interface
#AddLibrary('XmippRecons_Interface', '#libraries/reconstruction',
#           ReconsInterfaceSources, ['#libraries', '#external', '#'],['lib'],['XmippExternal','XmippData','XmippRecons','XmippInterface'])

# ImageJ plugins.
# Installs jvm
if int(env['java']):
    print 'Installing JVM...'
    JAVA_HOME = 'external/java/jvm'
    os.system("external/java/install_jvm.sh")
    os.system("rm external/imagej/plugins/* -rf")
    os.system("rm external/imagej/macros/* -rf")
    JavaInterfaceSources = Glob('libraries/bindings/java', '*.cpp', [])
    AddLibrary('XmippJavaInterface', 'libraries/bindings/java', JavaInterfaceSources,
    ['#libraries', '#external', '#', env['JNI_CPPPATH'],env['JNI_CPPPATH']+"/linux"],['lib'],
    ['XmippData','pthread'])

    # Xmipp interface is needed by plugins.
    AddJavaLibrary('XmippJavaInterface', 'libraries/bindings/java', 'xmipp')#, ['#'],
    # Copies jar file to ImageJ plugins folder (plugins below will look for it there).
    copyJar = env.InstallAs(target = 'external/imagej/plugins/XmippJavaInterface.jar',
              source = 'libraries/bindings/java/XmippJavaInterface.jar')
    env.Default(copyJar)

    # ImageJ plugins.
    AddImageJPlugin('Xmipp_IO', 'libraries/graphicsj/Xmipp_IO', 'external/imagej/plugins')
    AddImageJPlugin('Xmipp_Projections_Explorer', 'libraries/graphicsj/Xmipp_Projections_Explorer', 'external/imagej/plugins')
    AddImageJPlugin('Xmipp_Browser', 'libraries/graphicsj/Xmipp_Browser', 'external/imagej/plugins')
###    AddImageJPlugin('Xmipp_Tomo', 'libraries/graphicsj/Xmipp_Tomo', 'external/imagej/plugins')

    # Other ImageJ plugins without sources.
    AddImageJExternalPlugins('libraries/graphicsj/plugins', 'external/imagej/plugins')

# --- Programs

# Src (apps)

AddXmippProgram('angular_assign_for_tilt_series', ['XmippRecons'])
AddXmippProgram('angular_assign_for_tomogram', ['XmippRecons'])
AddXmippProgram('angular_class_average', ['XmippRecons'])
AddXmippProgram('angular_commonline', ['XmippRecons'])
AddXmippProgram('angular_continuous_assign', ['XmippRecons'])
AddXmippProgram('angular_discrete_assign', ['XmippRecons'])
AddXmippProgram('angular_distance', ['XmippRecons'])
AddXmippProgram('angular_distribution_show', ['XmippInterface'])
AddXmippProgram('angular_neighbourhood', ['XmippRecons'])
AddXmippProgram('angular_projection_matching', ['XmippRecons'])
AddXmippProgram('angular_project_library', ['XmippRecons'])
AddXmippProgram('apropos', ['XmippInterface'])
AddXmippProgram('average')
AddXmippProgram('classify_analyze_cluster', ['XmippClassif'])
AddXmippProgram('classify_batch_som', ['XmippClassif'])
AddXmippProgram('classify_fcmeans', ['XmippClassif'])
AddXmippProgram('classify_fkcn', ['XmippClassif'])
AddXmippProgram('classify_fsom',  ['XmippClassif'])
AddXmippProgram('classify_kcmeans', ['XmippClassif'])
AddXmippProgram('classify_kerdensom', ['XmippClassif'])
AddXmippProgram('classify_pca', ['XmippClassif'])
AddXmippProgram('classify_project_pca', ['XmippClassif'])
AddXmippProgram('classify_sammon_projection', ['XmippClassif'])
AddXmippProgram('classify_som',['XmippClassif'])
#AddXmippProgram('convert_angle')
AddXmippProgram('convert_data2descr', ['XmippClassif'])
AddXmippProgram('convert_data2img', ['XmippClassif'])
AddXmippProgram('convert_data2pdb', ['XmippClassif'])
AddXmippProgram('convert_img2data')
AddXmippProgram('convert_pdb2vol', ['XmippRecons','XmippInterface'])
AddXmippProgram('convert_vol2data')
AddXmippProgram('convert_vol2pseudo', ['XmippRecons'])
AddXmippProgram('convert_voxels22blobs', ['XmippRecons'])
AddXmippProgram('correct_bfactor', ['XmippRecons'])
AddXmippProgram('correlation')
AddXmippProgram('ctf_correct_amplitude3d', ['XmippRecons'])
AddXmippProgram('ctf_correct_idr', ['XmippRecons'])
AddXmippProgram('ctf_create_ctfdat', ['XmippRecons'])
AddXmippProgram('ctf_estimate_from_micrograph', ['XmippRecons'])
AddXmippProgram('ctf_estimate_from_psd', ['XmippRecons'])
AddXmippProgram('ctf_profile')
AddXmippProgram('ctf_group', ['XmippRecons'])
AddXmippProgram('common_lines', ['XmippRecons'])
AddXmippProgram('denoise', ['XmippRecons'])
AddXmippProgram('detect_missing_wedge', ['XmippRecons'])
#AddXmippProgram('detect_structures', ['XmippRecons'])
AddXmippProgram('enhance_contrast', ['XmippRecons'])
AddXmippProgram('filter')
AddXmippProgram('filter_projections', ['XmippRecons'])
AddXmippProgram('find_center2d')
AddXmippProgram('find_center3d')
AddXmippProgram('fourier_filter', ['XmippRecons'])
AddXmippProgram('histogram')
AddXmippProgram('image_align', ['XmippRecons'])
AddXmippProgram('image_align_tilt_pairs', ['XmippRecons'])
AddXmippProgram('image_convert')
AddXmippProgram('image_header')
AddXmippProgram('image_statistics')
AddXmippProgram('make_spectra', ['XmippRecons'])
AddXmippProgram('mask')
AddXmippProgram('mean_shift')
AddXmippProgram('metadata_histogram')
AddXmippProgram('metadata_import')
AddXmippProgram('metadata_split')
AddXmippProgram('metadata_utilities')
AddXmippProgram('micrograph_downsample', ['XmippRecons'])
AddXmippProgram('micrograph_phase_flipping',['XmippRecons'])
AddXmippProgram('micrograph_scissor'),
AddXmippProgram('mirror')
AddXmippProgram('ml_align2d', ['XmippRecons'])
###AddXmippProgram('mlf_align2d', ['XmippRecons'])
AddXmippProgram('ml_refine3d', ['XmippRecons'])
###AddXmippProgram('mlf_refine3d', ['XmippRecons'])
AddXmippProgram('ml_tomo', ['XmippRecons'])
AddXmippProgram('morphology')
AddXmippProgram('mrc_create_metadata')
AddXmippProgram('nma_alignment', ['XmippRecons'])
AddXmippProgram('operate')
AddXmippProgram('pdb_dictionary', ['XmippRecons','XmippClassif','XmippInterface'])
AddXmippProgram('pdb_project_on_dictionary', ['XmippRecons','XmippClassif'])
AddXmippProgram('phantom_create', ['XmippRecons'])
#AddXmippProgram('phantom_create_micrograph', ['XmippRecons'])
AddXmippProgram('phantom_create_random', ['XmippRecons'])
AddXmippProgram('phantom_project', ['XmippRecons','XmippInterface'])
AddXmippProgram('phantom_simulate_microscope', ['XmippRecons'])
AddXmippProgram('phantom_transform', ['XmippRecons','XmippInterface'])
AddXmippProgram('projection_real_shears', ['XmippRecons'])
AddXmippProgram('psd_enhance', ['XmippRecons'])
AddXmippProgram('psd_sort', ['XmippRecons'])
AddXmippProgram('range_adjust', ['XmippRecons'])
#Sjors: note that crystal stuff in ART is not working yet....
AddXmippProgram('reconstruct_art', ['XmippRecons'])
AddXmippProgram('reconstruct_art_pseudo', ['XmippRecons'])
AddXmippProgram('reconstruct_wbp', ['XmippRecons'])
AddXmippProgram('reconstruct_fourier', ['XmippRecons'])
AddXmippProgram('resolution_fsc')
AddXmippProgram('resolution_ssnr', ['XmippRecons'])
AddXmippProgram('rotate')
AddXmippProgram('scale')
AddXmippProgram('scale_pyramid')
AddXmippProgram('separate_objects')
AddXmippProgram('series_remove_fluctuations', ['XmippRecons'])
AddXmippProgram('shift')
AddXmippProgram('sort_by_statistics', ['XmippClassif'])
AddXmippProgram('spider_rename', ['XmippInterface'])
AddXmippProgram('spider_translate', ['XmippInterface'])
AddXmippProgram('spider_extract_angles', ['XmippInterface'])
AddXmippProgram('spider_generate_count', ['XmippInterface'])
AddXmippProgram('symmetrize', ['XmippRecons'])
AddXmippProgram('threshold')
AddXmippProgram('transform_add_noise')
AddXmippProgram('transform_adjust_volume_grey_levels', ['XmippRecons'])
AddXmippProgram('transform_center_image')
AddXmippProgram('transform_geometry')
AddXmippProgram('transform_normalize')
AddXmippProgram('transform_window')
AddXmippProgram('try_symmetry')
#AddXmippProgram('test_program')
#AddXmippProgram('test_sql')
AddXmippProgram('template_threads')
AddXmippProgram('tomo_align_dual_tilt_series', ['XmippRecons'])
AddXmippProgram('tomo_project', ['XmippRecons'])
AddXmippProgram('virus_vertex', ['XmippRecons'])
AddXmippProgram('volume_align')
AddXmippProgram('volume_segment', ['XmippRecons'])
AddXmippProgram('xray_import', ['XmippRecons'])
AddXmippProgram('xray_psf_create')
AddXmippProgram('xray_project', ['XmippRecons'])

# --- Scripts

# Batches (apps)
#
AddBatch('metadata_selfile_create', 'applications/scripts/metadata_selfile_create','.py')
#AddBatch('metadata_operate', 'applications/scripts/metadata_operate','.py')
AddBatch('classify_CL2D_core_analysis', 'applications/scripts/classify_CL2D_core_analysis')
AddBatch('convert_img2jpg','applications/scripts/convert_img2jpg')
AddBatch('convert_lst2sel', 'applications/scripts/convert_lst2sel')
AddBatch('convert_pdb2descr', 'applications/scripts/convert_pdb2descr')
AddBatch('extract_sidechain_from_pdb',
    'applications/scripts/extract_sidechain_from_pdb', '.pl')
AddBatch('convert_vol2jpg','applications/scripts/convert_vol2jpg')
AddBatch('convert_pdb2surface', 'applications/scripts/convert_pdb2surface')
AddBatch('protocols', 'applications/scripts/protocols')
AddBatch('gui', 'applications/scripts/protocols')
AddBatch('showj', 'applications/scripts/showj','.sh')
AddBatch('projections_explorerj', 'applications/scripts/projections_explorerj','.sh')
AddBatch('visualize_preprocessing_micrographj', 'applications/scripts/visualize_preprocessing_micrograph','.sh')
AddBatch('browserj', 'applications/scripts/browserj','.sh')
# AddBatch('convert_tia2raw', 'applications/programs/convert_tia2raw')
AddBatch('move_along_NMAmode', 'applications/scripts/move_along_NMAmode','.pl')

# Protocols
AddProtocol('arg.py', 'applications/scripts/protocols')
AddProtocol('apply_bfactor.py', 'applications/scripts/protocols')
AddProtocol('xmipp_config.py', 'applications/scripts/protocols')
AddProtocol('ctfdat.py', 'applications/scripts/protocols')
AddProtocol('launch_job.py', 'applications/scripts/protocols')
AddProtocol('log.py', 'applications/scripts/protocols')
AddProtocol('not_implemented.py', 'applications/scripts/protocols')
AddProtocol('rename_files.py', 'applications/scripts/protocols')
AddProtocol('spider_header.py', 'applications/scripts/protocols')
AddProtocol('utils_xmipp.py', 'applications/scripts/protocols')
AddProtocol('metadataUtils.py', 'applications/scripts/protocols')
AddProtocol('visualization.py', 'applications/scripts/protocols')
AddProtocol('visualize_kerdensom.py', 'applications/scripts/protocols')
AddProtocol('visualize_ml2d.py', 'applications/scripts/protocols')
AddProtocol('visualize_cl2d.py', 'applications/scripts/protocols')
AddProtocol('visualize_ml3d.py', 'applications/scripts/protocols')
AddProtocol('visualize_multires.py', 'applications/scripts/protocols')
AddProtocol('visualize_preprocess_micrographs.py', 'applications/scripts/protocols')
AddProtocol('visualize_preprocess_particles.py', 'applications/scripts/protocols')
AddProtocol('visualize_projmatch.py', 'applications/scripts/protocols')
AddProtocol('visualize_rct.py', 'applications/scripts/protocols')
AddProtocol('visualize_rotspectra.py', 'applications/scripts/protocols')
AddProtocol('which.py', 'applications/scripts/protocols')

AddProtocol('protocol_gui.py', 'applications/scripts/protocols')
AddProtocol('protocol_align2d.py', 'applications/scripts/protocols')
AddProtocol('protocol_backup.py', 'applications/scripts/protocols')
AddProtocol('protocol_cl2d.py', 'applications/scripts/protocols')
AddProtocol('protocol_commonlines.py', 'applications/scripts/protocols')
AddProtocol('protocol_kerdensom.py', 'applications/scripts/protocols')
AddProtocol('protocol_ml2d.py', 'applications/scripts/protocols')
AddProtocol('protocol_ml3d.py', 'applications/scripts/protocols')
AddProtocol('protocol__mltomo.py', 'applications/scripts/protocols')
AddProtocol('protocol_multires.py', 'applications/scripts/protocols')
AddProtocol('protocol_particle_pick.py', 'applications/scripts/protocols')
AddProtocol('protocol_preprocess_micrographs.py', 'applications/scripts/protocols')
AddProtocol('protocol_preprocess_particles.py', 'applications/scripts/protocols')
AddProtocol('protocol_projmatch.py', 'applications/scripts/protocols')
AddProtocol('protocol_rct.py', 'applications/scripts/protocols')
AddProtocol('protocol_rotspectra.py', 'applications/scripts/protocols')
AddProtocol('protocol_setup.py', 'applications/scripts/protocols')

# MPI
if int(env['mpi']):
    AddXmippMPIProgram('mpi_angular_class_average', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_projection_matching', ['XmippRecons'])
    AddXmippMPIProgram('mpi_angular_project_library', ['XmippRecons'])
    AddXmippMPIProgram('mpi_classify_CL2D', ['XmippRecons'])
    AddXmippMPIProgram('mpi_common_lines', ['XmippRecons'])
#    AddXmippMPIProgram('mpi_ctf_correct_idr', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_align2d', ['XmippRecons'])
#    # AddXmippMPIProgram('mpi_ml_tomo', ['XmippRecons'])
#    AddXmippMPIProgram('mpi_mlf_align2d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_ml_refine3d', ['XmippRecons'])
#    AddXmippMPIProgram('mpi_mlf_refine3d', ['XmippRecons'])
    AddXmippMPIProgram('mpi_nma_alignment', ['XmippRecons'])
    AddXmippMPIProgram('mpi_projection_real_shears', ['XmippRecons'])
    AddXmippMPIProgram('mpi_xray_project', ['XmippRecons'])
#    AddXmippMPIProgram('mpi_reconstruct_art', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_wbp', ['XmippRecons'])
    AddXmippMPIProgram('mpi_reconstruct_fourier', ['XmippRecons'])
    AddXmippMPIProgram('mpi_run', ['XmippRecons'])
    AddXmippMPIProgram('mpi_sort_images', ['XmippRecons'])
#    AddXmippMPIProgram('template_threads', ['XmippRecons'])
#    AddXmippMPIProgram('template_mpi', ['XmippRecons'])
# QT
if int(env['gui']):
    envQT = env.Clone()

    if int(env['QT4']):
        # FIXME see SConstruct
        env['QTDIR']=''
        env['QT_LIB']=''

        envQT.Tool('qt4')
        envQT.EnableQt4Modules(['QtCore', 'QtGui', 'Qt3Support'], debug=False)

        # Fix for moc and #ifdefs (qt3 uses MOC_SKIP_*)
        envQT['QT4_MOCFROMHFLAGS'] += ['-DQT3_SUPPORT']
        envQT['QT4_MOCFROMCXXFLAGS'] += ['-DQT3_SUPPORT']

    else:
        envQT.Tool('qt')

        # QT_AUTOSCAN does not work because .h and .cpp are not in the same dir
        # envQT.SetDefault(QT_AUTOSCAN = 1)

        # Once again, just in case, Copy() does not work too well
        envQT.Replace(QT_LIB = env['QT_LIB'])

    def AddQtProgram(name, basedir, sources_pattern = '*.cpp', skip_list = [],
        mocs = [], includes = [], libpath =[], libs = [], cxxflags = [],
        linkflags = []):

        # setup
        basedir = AddLastSlash(basedir)
        fullname = env['prepend'] + name
        binprefix =  os.path.join(env['prefix'], 'bin')

        extra = []

        if int(env['QT4']):
            for i in mocs:
                extra.append(envQT.Moc4(basedir + i))
        else:
            for i in mocs:
                extra.append(envQT.Moc(basedir + i))

        sources = Glob(basedir, sources_pattern, skip_list)

        program = envQT.Program(
            basedir + env['prepend'] + name,
            sources + extra,
            CPPPATH = envQT['CPPPATH'] + includes + [env['CPPPATH']],
            LIBPATH = envQT['LIBPATH'] + libpath + [env['LIBPATH']],
            LIBS = envQT['LIBS'] + libs + [env['LIBS']]+TIFFLibs,
            CXXFLAGS = cxxflags + [env['CXXFLAGS']],
            LINKFLAGS = linkflags + [env['LINKFLAGS']],
            LINK = env['LINKERFORPROGRAMS']
            )

        # alias
        alias = env.Alias(fullname, program)
        install = env.Install(binprefix, program)
        env.Alias(fullname, install)
        env.Default(alias)

    # FIXME an AddQtLibrary function does not worth the cost, right?
    graphics_name = 'XmippGraphics'
    graphics_basedir = AddLastSlash('libraries/graphics')

    graphics_sources = Glob(graphics_basedir, '*.cpp', [])
    graphics_cpppath = envQT['CPPPATH'] + ['libraries', '#']

    graphics_objects = []
    for i in graphics_sources:
        graphics_objects.append(i)

    if int(env['static']):
        graphics = envQT.StaticLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )
    else:
        graphics = envQT.SharedLibrary(
            graphics_basedir + graphics_name,
            graphics_objects,
            CPPPATH = graphics_cpppath
            )

    graphics_alias = env.Alias(graphics_name, graphics)
    graphics_install = env.Install(os.path.join(env['prefix'], 'lib'),
        graphics)
    env.Alias(graphics_name, graphics_install)
    env.Default(graphics_alias)

    # Add a program integrated in the Xmipp structure
    def AddXmippQtProgram(name, mocs=[], libs=[]):
        finalLibPath = ['lib']
        finalIncludePath = ['libraries','#']
        finalLibs = ['XmippData', 'XmippExternal','XmippGraphics',
            'XmippRecons', 'XmippClassif']+FFTWLibs+SQLiteLibs+libs
        for i in range(len(libs)):
           if libs[i] == 'XmippInterface':
    	      finalLibPath += ['libraries/interface']
           elif libs[i] == 'XmippRecons_Interface':
    	      finalLibPath += ['libraries/interface']
              finalLibs += ['XmippInterface']
        AddQtProgram(name, 'applications/programs/' + name, '*.cpp', [], mocs,
    	    finalIncludePath, finalLibPath, finalLibs, [], [])

    AddXmippQtProgram('edit')
    AddXmippQtProgram('ctf_view', [], ['XmippRecons'])
    AddXmippQtProgram('micrograph_mark', ['popup_menu_mark.h'])
    AddXmippQtProgram('show', [], ['XmippClassif', 'XmippRecons'])
    AddXmippQtProgram('mask_design', [], ['XmippClassif'])

if int(env['matlab']):
    import os

    def AddMatlabBinding(name):
        print 'compiling Matlab wrapper for ' + name
        command = env['MATLAB_DIR'] + '/bin/mex -O -outdir libraries/bindings/matlab -I. -Ilibraries/data -Ilibraries -Llib -Ilibraries/reconstruction -lXmippRecons -lXmippData -lXmippExternal libraries/bindings/matlab/tom_xmipp_' + name + '_wrapper.cpp'
        output = os.popen(command).read()
        if len(output) > 0:
            print output

    bindings = ['adjust_ctf','align2d','ctf_correct_phase',
        'mask','mirror','morphology','normalize','psd_enhance',
        'resolution','rotate','scale','scale_pyramid','volume_segment']

    for i in range(len(bindings)):
       AddMatlabBinding(bindings[i])

# Clean
# Configuration or cleaning
if env.GetOption('clean'):
    print '* Cleaning  ...'
    os.system("( cd external/fftw-3.2.2    ; make clean >& /dev/null )");
    os.system("( cd external/sqlite-3.6.23 ; make clean >& /dev/null )");

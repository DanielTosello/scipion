/***************************************************************************
 *
 * Authors:     Debora Gil
 *              Roberto Marabini
 *
 * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or   
 * (at your option) any later version.                                 
 *                                                                     
 * This program is distributed in the hope that it will be useful,     
 * but WITHOUT ANY WARRANTY; without even the implied warranty of      
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       
 * GNU General Public License for more details.                        
 *                                                                     
 * You should have received a copy of the GNU General Public License   
 * along with this program; if not, write to the Free Software         
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA            
 * 02111-1307  USA                                                     
 *                                                                     
 *  All comments concerning this program package may be sent to the    
 *  e-mail address 'xmipp@cnb.uam.es'                                  
 ***************************************************************************/
/*****************************************************************************/
/* Experimental Lattice                                                      */
/*****************************************************************************/

#ifndef _XMIPP_CCLATTICE_IO_HH
#define _XMIPP_CCLATTICE_IO_HH

#include <vector>
#include <XmippData/xmippFuncs.hh>
#include <XmippData/xmippMatrices2D.hh>
#include <XmippData/xmippGeometry.hh>

/**@name Correlation Lattice I/O */
//@{
/** Correlation Lattice I/O.
    This is a class to read/write Corelation files as produced by the MRC's program
    quadserach. 
    \begin{verbatim}
         1
         2
         3
         4
         5
         2000        2000        1000        1000   58.19258       25.64419
    25.15103      -56.71311            -120         120        -120         120
    56789
     0.000     0.000            0.00
     0.000     0.000            0.00
     0.000     0.000            0.00
     0.000     0.000            0.00
     0.000     0.000            0.00
     0.000     0.000            0.00
     0.000     0.000            0.00
     0.000     0.000            0.00
    \end{verbatim}
    
    Each line after the fifth gives de position of a correlation maxima 
    */
    
    
/////////////////////////////// DATA TYPES //////////////////////////////

   
class CCLattice_IO {


public:

   /* Lattice Param. */
   /** Crystal  dimensions */
   int dim[2];
    /** Search origing in MRC coordinates */
   float O[2];
   /** a vector */
   matrix1D <double> a;
   /** b vector */
   matrix1D <double> b;
   /** Index Ranges for a vector **/
   int max_i,min_i;
   /** Index Ranges for b vector **/
   int max_j,min_j;
    /** Croscorrelation maximun */
   double cc_max;
     
   /** Vectors to store optimal X and Y position plus croos correlation  peaks */
  //Peaks Coord.
	vector <float> MRC_Xcoord;
	vector <float> MRC_Ycoord;
  //Cross Correlation
	vector <float> MRC_CCcoheficiente;
  
 /** THRESHOLD OF CROSS-CORRELATION PEAK HEIGHT CALCULATED AS;
       max of croscorrelation * FACTOR (READ FROM UNIT 5)*/
   double cc_peak_factor; 

////////////////////////////////  FUNCTIONS //////////////////////////
  
public:

////////////////////////////  Constructors 
   CCLattice_IO();

//////////////////////////// I/O functions
   
/** Read an aph file generated by the MRC program mmbox.
    first line is saved as comment in the header. 5 matrices are created 
    containing the magnitude and phase (spots_abs abd spots_arg), the IQs (IQ),      the background (background) and finally the CTF related stuff (CTF).
    */
   void read(const FileName &fn);

};
/* Show parameters --------------------------------------------------------- */
   ostream & operator << (ostream &o, const CCLattice_IO &prm) {
   o << "astar vector              :   " << prm.a << endl
     << "bstar vector              :   " << prm.b << endl
     << "Cristal_dim               :   " << prm.dim[0] << " "
                                         << prm.dim[1] <<endl
     << "Cristal_Search_Origen     :   " << prm.O[0] << " "
                                         << prm.O[1] << endl
     ;
     
     return o;
   } 
//@}

#endif

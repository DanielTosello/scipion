# vi:syntax=python

Import('env')

# Required for custom functions
import os

def AddMatchingFiles((pattern, blacklist, sources), directory, files):
    ''' Callback, adds all matching files in dir '''
    import fnmatch
    for file in fnmatch.filter(files, pattern):
        if file not in blacklist:
           # DBG print 'Adding ' + os.path.join(directory, file)
           sources.append(os.path.join(directory, file))

def Glob(dir, pattern, blacklist):
    ''' Custom made globbing '''
    import os
    sources = []
    os.path.walk(dir, AddMatchingFiles, (pattern, blacklist, sources))
    return sources

def AddLastSlash(string):
    ''' Low trick for correct parsing of paths '''
    if string[len(string)-1] != '/':
        string = string + '/'
    return string

def AddBatch(name, basedir, extension = ''):
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    binprefix = os.path.join(env['prefix'], 'bin')

    # action
    command = env.Command(os.path.join(basedir, fullname),
        os.path.join(basedir, 'batch_' + name + extension), [Copy('$TARGET',
        '$SOURCE'), Chmod('$TARGET', 0755)])

    # alias
    alias = env.Alias(fullname, command)
    install = env.Install(binprefix, command)
    env.Alias(fullname, install)
    env.Default(alias)

# FIXME default parameters' order
def AddProgram(name, basedir, sources_pattern = '*.cc', skip_list = [],
    includes = [], libpath = [], libs = [], cxxflags = [], linkflags = []):
    ''' add a new program to the build list '''
    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME Shouldn't env[] variables be honored?
    includes += env['CPPPATH']
    libpath += env['LIBPATH']
    libs += env['LIBS']
    cxxflags += env['CXXFLAGS']
    linkflags += env['LINKFLAGS']

    # action
    program = env.Program(os.path.join(basedir, fullname), sources,
        CPPPATH = includes, LIBPATH = libpath, LIBS = libs, CXXFLAGS = cxxflags,
        LINKFLAGS = linkflags)

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

def AddMPIProgram(name, basedir, sources_pattern = '*.cc', skip_list = [],
    includes = [], libpath = [], libs = [], cxxflags = [], linkflags = []):

    # setup
    basedir = AddLastSlash(basedir)
    fullname = env['prepend'] + name
    sources = Glob(basedir, sources_pattern, skip_list)
    binprefix = os.path.join(env['prefix'], 'bin')

    # FIXME Shouldn't env[] variables be honored?
    includes += env['CPPPATH']
    libpath += env['LIBPATH']
    libs += env['LIBS']
    cxxflags += env['CXXFLAGS']
    linkflags += env['LINKFLAGS']

    # action
    program = env.Program(os.path.join(basedir, fullname), sources,
        CC = env['MPI_CC'], CXX = env['MPI_CXX'], CPPPATH = includes +
        [env['MPI_INCLUDE']], LIBPATH = libpath + [env['MPI_LIBDIR']], LIBS =
        libs + [env['MPI_LIB']], CXXFLAGS = cxxflags, LINKFLAGS = linkflags)

    # alias
    alias = env.Alias(fullname, program)
    install = env.Install(binprefix, program)
    env.Alias(fullname, install)
    env.Default(alias)

# COSS wanted an explicit list...
def AddLibrary(name, basedir, sources, includes):

    # setup
    basedir = AddLastSlash(basedir)
    libprefix = os.path.join(env['prefix'], 'lib')
    for x in sources:
        sources[sources.index(x)] = basedir + x

    # FIXME Shouldn't env[] variables be honored?
    includes += env['CPPPATH']

    # separate local and global includes
    for x in includes:
        if x[0] != '#':
            includes[includes.index(x)] = basedir + x

    # action
    # FIXME Exclusive may not be what users want
    if int(env['static']):
        library = env.StaticLibrary(basedir + name, sources, CPPPATH=includes)
    else:
        library = env.SharedLibrary(basedir + name, sources, CPPPATH=includes)

    # alias
    alias = env.Alias(name, library)
    install = env.Install(libprefix, library)
    env.Alias(name, install)
    env.Default(alias)

# --- Libraries

# XmippData
DataSources = [
    'Src/NumericalRecipes.cc',
    'Src/xmippFuncs.cc',
    'Src/xmippArgs.cc',
    'Src/xmippMatrices1D.cc',
    'Src/xmippMatrices2D.cc',
    'Src/xmippMatrices3D.cc',
    'Src/xmippSelFiles.cc',
    'Src/xmippHistograms.cc',
    'Src/xmippHeader.cc',
    'Src/xmippImages.cc',
    'Src/xmippVolumes.cc',
    'Src/xmippDocFiles.cc',
    'Src/xmippGeometry.cc',
    'Src/xmippProjection.cc',
    'Src/xmippProgs.cc',
    'Src/xmippMasks.cc',
    'Src/xmippMicrograph.cc',
    'Src/xmippFilters.cc',
    'Src/xmippMorphology.cc',
    'Src/xmippRotationalSpectrum.cc',
    'Programs/Src/Prog_downsample.cc',
    'Programs/Src/Prog_segment.cc',
    'Programs/Src/Prog_denoising.cc',
    'Programs/Src/Prog_test_cluster.cc',
    'Programs/Src/Prog_normalize.cc',
    'Programs/Src/Prog_range_adjust.cc',
    'Programs/Src/Prog_make_spectra.cc',
    'Src/xmippWavelets.cc',
    'Src/xmippFFT.cc',
    'Src/xmippTomogram.cc',
    'Src/DESolver.cc',
    'Src/xmippDelTriang.cc',
    'Bilib/sources/changebasis.cc',
    'Bilib/sources/convert.cc',
    'Bilib/sources/dft.cc',
    'Bilib/sources/dht.cc',
    'Bilib/sources/findroot.cc',
    'Bilib/sources/firconvolve.cc',
    'Bilib/sources/flip.cc',
    'Bilib/sources/fold.cc',
    'Bilib/sources/fourierconvolve.cc',
    'Bilib/sources/geometry.cc',
    'Bilib/sources/getpoles.cc',
    'Bilib/sources/getput.cc',
    'Bilib/sources/getputd.cc',
    'Bilib/sources/gradient.cc',
    'Bilib/sources/histogram.cc',
    'Bilib/sources/iirconvolve.cc',
    'Bilib/sources/interpolate.cc',
    'Bilib/sources/kernel.cc',
    'Bilib/sources/kerneldiff1.cc',
    'Bilib/sources/kerneldiff2.cc',
    'Bilib/sources/kerneldiff.cc',
    'Bilib/sources/kernelintegrate.cc',
    'Bilib/sources/linearalgebra.cc',
    'Bilib/sources/minmax.cc',
    'Bilib/sources/morphology.cc',
    'Bilib/sources/movingaverage.cc',
    'Bilib/sources/polynomial.cc',
    'Bilib/sources/positivepower.cc',
    'Bilib/sources/pyramidfilters.cc',
    'Bilib/sources/pyramidtools.cc',
    'Bilib/sources/round.cc',
    'Bilib/sources/swap.cc',
    'Bilib/sources/timestamp.cc',
    'Bilib/sources/traceline.cc',
    'Bilib/sources/window.cc',
    'Bilib/sources/messagedisplay.cc',
    'Bilib/sources/wavelet.cc',
    'Bilib/sources/waveletfiltersfract.cc',
    'Bilib/sources/waveletfilters.cc',
    'Bilib/sources/wavelettools.cc']

AddLibrary('XmippData', 'Lib/XmippData', DataSources, ['#Lib',
    'Bilib/headers', 'Bilib/types', 'Bilib'])

# Reconstruction
ReconsSources = [
    'Src/grids.cc',
    'Src/blobs.cc',
    'Src/splines.cc',
    'Src/symmetries.cc',
    'Src/phantom.cc',
    'Src/projection.cc',
    'Src/volume_FOMs.cc',
    'Src/volume_labelling.cc',
    'Src/radon.cc',
    'Src/directions.cc',
    'Src/basis.cc',
    'Programs/Src/Prog_project.cc',
    'Programs/Src/Prog_evaluate.cc',
    'Programs/Src/Prog_evaluate_FSCs.cc',
    'Programs/Src/recons_misc.cc',
    'Programs/Src/Prog_project_crystal.cc',
    'Programs/Src/Prog_surface.cc',
    'Programs/Src/Prog_euler.cc',
    'Programs/Src/Prog_draw_surface.cc',
    'Programs/Src/Prog_symmetrize.cc',
    'Programs/Src/Prog_Angular_Distance.cc',
    'Programs/Src/Prog_Align2d.cc',
    'Programs/Src/Prog_Projection_Neighbourhood.cc',
    'Programs/Src/Prog_Centilt.cc',
    'Src/CTF.cc',
    'Src/refinement.cc',
    'Programs/Src/Prog_FourierFilter.cc',
    'Programs/Src/Prog_IDR_art.cc',
    'Programs/Src/Prog_CorrectPhase.cc',
    'Programs/Src/Prog_SpAR.cc',
    'Programs/Src/Prog_art_crystal.cc',
    'Programs/Src/Prog_SpARMA.cc',
    'Programs/Src/Prog_random_phantom.cc',
    'Programs/Src/Prog_microscope.cc',
    'Programs/Src/Prog_adjust_CTF.cc',
    'Programs/Src/Prog_adjust_volume.cc',
    'Programs/Src/Prog_assign_CTF.cc',
    'Programs/Src/Prog_art.cc',
    'Programs/Src/Basic_art.cc',
    'Programs/Src/Prog_SSNR.cc',
    'Programs/Src/Prog_Angular_Predict.cc',
    'Programs/Src/Prog_Angular_Predict_continuous.cc',
    'Programs/Src/Prog_Angular_Predict_Tomography.cc',
    'Programs/Src/Prog_MLalign2D.cc',
    'Programs/Src/Prog_Refine3d.cc',
    'Programs/Src/Prog_break_sym.cc',
    'Programs/Src/Prog_WBP.cc',
    'Programs/Src/Prog_projection_matching.cc',
    'Programs/Src/Prog_Enhance_PSD.cc',
    'Programs/Src/Prog_PDBPhantom.cc']

ReconsInterfaceSources = [
    'Programs/Src/Prog_Spots2RealSpace2D.cc',
    'Src/recons_spider.cc',
    'Programs/Src/Prog_Unbend.cc',
    'Src/ImUmbend.cc',
    'Programs/Src/Prog_recons_test.cc']

ReconsINRIASources = ['Programs/Src/Prog_adjust_surface.cc']

# Common unused sources for the three libraries
Recons_unused = ['Gibbs.cc', 'Prog_projection_matching_crystal.cc',
    'Prog_Spots2RealSpace3D.cc']

# Recons
AddLibrary('XmippRecons', 'Lib/Reconstruction', ReconsSources, ['#Lib'])

# ReconsInterface
AddLibrary('XmippRecons_Interface', 'Lib/Reconstruction',
    ReconsInterfaceSources, ['#Lib'])

# ReconsINRIA
AddLibrary('XmippReconsINRIA', 'Lib/Reconstruction', ReconsINRIASources,
    ['#Lib'])

# Classification
ClassificationSources = [
    'Src/xmippCTVectors.cc',
    'Src/xmippCodeBook.cc',
    'Src/xmippFuzzyCodeBook.cc',
    'Src/xmippDistances.cc',
    'Src/xmippSammon.cc',
    'Src/xmippFCMeans.cc',
    'Src/xmippMap.cc',
    'Src/xmippSOM.cc',
    'Src/xmippFKCN.cc',
    'Src/xmippFuzzySOM.cc',
    'Src/xmippKerDenSOM.cc',
    'Src/xmippBatchSOM.cc',
    'Src/xmippUmatrix.cc',
    'Src/xmippPlanes.cc',
    'Src/xmippTStudentKerDenSOM.cc',
    'Src/xmippGaussianKerDenSOM.cc',
    'Src/xmippPC.cc',
    'Src/xmippRBF.cc',
    'Src/xmippRM.cc']

AddLibrary('XmippClassif', 'Lib/Classification', ClassificationSources,
    ['#Lib'])

# Interface
InterfaceSources = [
    'Src/xmippAPH.cc',
    'Src/xmippSpider.cc',
    'Src/xmippVirus.cc',
    'Src/xmippCrisp.cc',
    'Src/xmippVrml.cc',
    'Src/xmippOpenDX.cc',
    'Src/xmippOpenDXang.cc',
    'Src/xmippJDL.cc',
    'Src/xmippAPH3D.cc',
    'Src/xmippAPHorigmerg.cc',
    'Src/xmippCCLattice_IO.cc',
    'Src/xmippCCP4.cc',
    'Src/xmippEM.cc']

AddLibrary('XmippInterface', 'Lib/XmippInterface', InterfaceSources, ['#Lib'])

# InterfaceINRIA
InterfaceINRIASources = ['Src/xmippINRIA.cc']

AddLibrary('XmippInterfaceINRIA', 'Lib/XmippInterface', InterfaceINRIASources,
    ['#Lib'])

# OldXmipp
OldXmippSources = [
    'cabecero.cc',
    'varios.cc',
    'varios2.cc',
    'varios3.cc',
    'dimension.cc',
    'floatnat.cc',
    'iocabecero.cc',
    'usages.cc',
    'fft.cc',
    'fftmod.cc',
    'fftn.cc',
    'allfft.cc',
    'filtros.cc',
    'specmod.cc']

AddLibrary('OldXmipp', 'Lib/OldXmipp', OldXmippSources, ['#Lib'])

# INRIA
INRIASources = [
    'Src/convert.cc',
    'Src/curvature.cc',
    'Src/extrema.cc',
    'Src/recbuffer.cc',
    'Src/recline.cc']

AddLibrary('INRIA', 'Other_packages/LibINRIA', INRIASources, [])

# --- Programs

# MakeSpectra
AddProgram('makespectra', 'Applications/OldXmipp/MakeSpectra', '*.cc', [],
    ['Lib', 'LibOldXmipp'], ['Lib/XmippData', 'Lib/OldXmipp'], ['XmippData',
    'OldXmipp'], [], [])

# FindSCenter
AddProgram('find_center2d', 'Applications/OldXmipp/FindSCenter', '*.cc', [],
    ['Lib'], ['Lib/XmippData', 'Lib/OldXmipp'], ['XmippData', 'OldXmipp'], [],
    [])

# Src (apps)

# 2DInterpolation
AddProgram('2Dinterpolation', 'Applications/Src/2DInterpolation', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# 3DInterpolation
AddProgram('3Dinterpolation', 'Applications/Src/3DInterpolation', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Adapt_for_Spider
AddProgram('adapt_for_spider', 'Applications/Src/Adapt_for_Spider', '*.cc',
    [], ['Lib'], ['Lib/XmippInterface', 'Lib/XmippData'], ['XmippInterface',
    'XmippData'])

# Add_noise
AddProgram('add_noise', 'Applications/Src/Add_noise', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Adjust_CTF
AddProgram('adjust_CTF', 'Applications/Src/Adjust_CTF', '*.cc', [], ['Lib'],
    ['Lib/XmippData', 'Lib/Reconstruction'],
    ['XmippRecons', 'XmippData'])

# Adjust_surface
AddProgram('adjust_surface', 'Applications/Src/Adjust_surface', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippReconsINRIA', 'XmippRecons', 'XmippData'])

# Adjust_volume
AddProgram('adjust_volume_grey_levels', 'Applications/Src/Adjust_volume', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Align2D
AddProgram('align2d', 'Applications/Src/Align2D', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Align3D
AddProgram('align_volumes', 'Applications/Src/Align3D', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Ang_distribution
AddProgram('angular_distribution_show', 'Applications/Src/Ang_distribution',
    '*.cc', [], ['Lib'], ['Lib/XmippInterface', 'Lib/XmippData'],
    ['XmippInterface', 'XmippData'])

# Angular_distance
AddProgram('angular_distance', 'Applications/Src/Angular_distance', '*.cc',
    [], ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Angular_predict
AddProgram('angular_discrete_assign', 'Applications/Src/Angular_predict', '*.cc',
    [], ['Lib'], ['Lib/Reconstruction', 'Lib/Classification', 'Lib/XmippData'],
    ['XmippRecons', 'XmippClassif', 'XmippData'])

# Angular_predict_continuous
AddProgram('angular_continuous_assign',
    'Applications/Src/Angular_predict_continuous', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/Classification', 'Lib/XmippData'],
    ['XmippRecons', 'XmippClassif', 'XmippData'])

# Angular_predict_tomography
AddProgram('angular_assign_from_tomogram',
    'Applications/Src/Angular_predict_tomography', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/Classification', 'Lib/XmippData'],
    ['XmippRecons', 'XmippClassif', 'XmippData'])

# Angular_refinement
AddProgram('angular_refinement', 'Applications/Src/Angular_refinement',
    '*.cc', [], ['Lib'], ['Lib/XmippInterface', 'Lib/XmippData'],
    ['XmippInterface', 'XmippData'])

# ApplyGeo
AddProgram('header_apply', 'Applications/Src/ApplyGeo', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# AppendDocFile
AddProgram('docfile_append', 'Applications/Src/AppendDocFile', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Are_different
AddProgram('are_different', 'Applications/Src/Are_different', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Art
AddProgram('reconstruct_art', 'Applications/Src/Art', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Assign_angles
AddProgram('assign_angles', 'Applications/Src/Assign_angles', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Assign_CTF
AddProgram('ctf_estimate_from_micrograph', 'Applications/Src/Assign_CTF', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Assign_multiple_CTFs
AddProgram('assign_multiple_CTFs', 'Applications/Src/Assign_multiple_CTFs',
    '*.cc', [], ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData',
    'Lib/XmippInterface'], ['XmippRecons', 'XmippData', 'XmippInterface'])

# BatchSOM
# FIXME -Wno-deprecated
AddProgram('classify_batch_som', 'Applications/Src/BatchSOM', '*.cc', [],
    ['Lib'], ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif',
    'XmippData'], ['-Wno-deprecated'])

# Break_sym
AddProgram('break_sym', 'Applications/Src/Break_sym', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Centilt
AddProgram('align_tilt_pairs', 'Applications/Src/Centilt', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# CodeStatis
# FIXME -Wno-deprecated
AddProgram('codestatis', 'Applications/Src/CodeStatis', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'], ['-Wno-deprecated'])

# Combine_stats
AddProgram('combine_stats', 'Applications/Src/Combine_stats', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Compare_Selfiles
AddProgram('selfile_compare', 'Applications/Src/Compare_Selfiles', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# CorrectPhase
AddProgram('ctf_correct_phase', 'Applications/Src/CorrectPhase', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Correlation
AddProgram('correlation', 'Applications/Src/Correlation', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData', 'Lib/XmippInterface'],
    ['XmippRecons', 'XmippData', 'XmippInterface'])

# CpSel
AddProgram('selfile_copy', 'Applications/Src/CpSel', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Create_phantom
AddProgram('phantom_create', 'Applications/Src/Create_phantom', '*.cc', [],
    ['Lib'], ['Lib/XmippData', 'Lib/Reconstruction'],
    ['XmippData', 'XmippRecons'])

# Create_surface
# FIXME XmippInterface is required, although it was not present in autoools
AddProgram('create_surface', 'Applications/Src/Create_surface', '*.cc', [],
    ['Lib'], ['Lib/XmippData'],
    ['XmippData', 'XmippRecons', 'XmippInterface'])

# Integration
# FIXME XmippInterface is required, although it was not present in autoools
AddProgram('Integration', 'Applications/Src/Integration', '*.cc', [],
    ['Lib'], ['Lib/XmippData'],
    ['XmippData'])

# CTF_profile
AddProgram('ctf_profile', 'Applications/Src/CTF_profile', '*.cc', [],
    ['Lib'], ['Lib/XmippData', 'Lib/Reconstruction'],
    ['XmippData', 'XmippRecons'])

# Data2Img
AddProgram('convert_data2img', 'Applications/Src/Data2Img', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'])

# Data2Vol
AddProgram('convert_data2vol', 'Applications/Src/Data2Vol', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'])

# deconvoluteCTF
AddProgram('deconvoluteCTF', 'Applications/Src/deconvoluteCTF', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Deform
AddProgram('crystal_shear', 'Applications/Src/Deform', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData', 'Lib/XmippInterface'],
    ['XmippRecons', 'XmippData', 'XmippInterface'])

# Denoising
AddProgram('denoise', 'Applications/Src/Denoising', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Denoising_micrograph
AddProgram('micrograph_denoise', 'Applications/Src/Denoising_micrograph',
    '*.cc', [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# DocFile_Histogram
AddProgram('docfile_histogram', 'Applications/Src/DocFile_Histogram', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# DownSample
AddProgram('micrograph_downsample', 'Applications/Src/DownSample', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# FIXME This hack is required for program Mark
if int(env['gui']):
    # object file needed by two targets
    if int(env['static']):
        obj_DownSample = StaticObject('Applications/Src/DownSample/xvsmooth.cc')
    else:
        obj_DownSample = SharedObject('Applications/Src/DownSample/xvsmooth.cc')

# Draw_surface
AddProgram('draw_surface', 'Applications/Src/Draw_surface', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData', 'Lib/XmippInterface'],
    ['XmippRecons', 'XmippData', 'XmippInterface'])

# EM2Angles
AddProgram('EM2Angles', 'Applications/Src/EM2Angles', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData', 'Lib/XmippInterface'],
    ['XmippRecons', 'XmippRecons_Interface', 'XmippData', 'XmippInterface'])

# Enhance_PSD
AddProgram('psd_enhance', 'Applications/Src/Enhance_PSD', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Euler
AddProgram('euler', 'Applications/Src/Euler', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Evaluate
AddProgram('foms_evaluate', 'Applications/Src/Evaluate', '*.cc', ['adjust.cc'],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Evaluate_FSCs
AddProgram('evaluate_FSCs', 'Applications/Src/Evaluate_FSCs', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Exp_Shift_Computation
AddProgram('exp_shift_computation', 'Applications/Src/Exp_Shift_Computation',
    '*.cc', [], ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction',
    'Lib/XmippData'], ['XmippInterface', 'XmippRecons', 'XmippRecons_Interface',
    'XmippData'])

# FCMeans
AddProgram('classify_fcmeans', 'Applications/Src/FCMeans', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'])

# FindCenter3D
AddProgram('find_center3D', 'Applications/Src/FindCenter3D', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# FKCN
AddProgram('classify_fkcn', 'Applications/Src/FKCN', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'])

# Flip
AddProgram('mirror', 'Applications/Src/Flip', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# FourierFilter
AddProgram('fourier_filter', 'Applications/Src/FourierFilter', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# FSOM
# FIXME -Wno-deprecated
AddProgram('classify_fsom', 'Applications/Src/FSOM', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'],
    ['-Wno-deprecated'])

# Headerinfo
AddProgram('headerinfo', 'Applications/Src/Headerinfo', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Histogram
AddProgram('histogram', 'Applications/Src/Histogram', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# IDR_ART
AddProgram('idr', 'Applications/Src/IDR_ART', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Img2Data
AddProgram('convert_img2data', 'Applications/Src/Img2Data', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Infogeo
AddProgram('header_print', 'Applications/Src/Infogeo', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# KCMeans
# FIXME -Wno-deprecated
AddProgram('classify_kcmeans', 'Applications/Src/KCMeans', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'],
    ['-Wno-deprecated'])

# KerDenSOM
# FIXME -Wno-deprecated
AddProgram('classify_kerdensom', 'Applications/Src/KerDenSOM', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'],
    ['-Wno-deprecated'])

# Lattice_vectors
AddProgram('crystal_lattice_vectors', 'Applications/Src/Lattice_vectors', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# MakeSpectra
AddProgram('make_spectra', 'Applications/Src/MakeSpectra', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Mask
AddProgram('mask', 'Applications/Src/Mask', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Markhan
AddProgram('markhan', 'Applications/Src/Markhan', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Microscope
AddProgram('phantom_simulate_microscope', 'Applications/Src/Microscope', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# MLalign2D
AddProgram('ml_align2d', 'Applications/Src/MLalign2D', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# MLalign2D_combine
AddProgram('ml_align2d_combine', 'Applications/Src/MLalign2D_combine', '*.cc',
    [], ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# MLrefine3D
AddProgram('ml_refine3d', 'Applications/Src/MLrefine3D', '*.cc',
    [], ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Morphology
AddProgram('morphology', 'Applications/Src/Morphology', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# MvSel
AddProgram('selfile_move', 'Applications/Src/MvSel', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Normalize
AddProgram('normalize', 'Applications/Src/Normalize', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Operate
AddProgram('operate', 'Applications/Src/Operate', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# PCA
AddProgram('classify_pca', 'Applications/Src/PCA', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'])

# PDBPhantom
AddProgram('convert_pdb2vol', 'Applications/Src/PDBPhantom', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Phantom_transform
AddProgram('phantom_transform', 'Applications/Src/Phantom_transform', '*.cc',
    [], ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Project
AddProgram('project', 'Applications/Src/Project', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Projection_Neighbourhood
AddProgram('angular_neighbourhood',
    'Applications/Src/Projection_Neighbourhood', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Projection_matching
AddProgram('angular_projectin_matching',
    'Applications/Src/Projection_matching',
    '*.cc', [], ['Lib'], ['Lib/Reconstruction',
    'Lib/XmippData'], ['XmippRecons', 'XmippData'])

# ProjectPCA
AddProgram('classify_project_pca', 'Applications/Src/ProjectPCA', '*.cc', [], ['Lib'],
    ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif', 'XmippData'])

# Pyramid
AddProgram('scale_pyramid', 'Applications/Src/Pyramid', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Radon_Transform
AddProgram('radon_transform', 'Applications/Src/Radon_Transform',
    '*.cc', [], ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction',
    'Lib/XmippData'], ['XmippInterface', 'XmippRecons', 'XmippData'])

# RandomMapping
AddProgram('random_mapping', 'Applications/Src/RandomMapping', '*.cc', [],
    ['Lib'], ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif',
    'XmippData'])

# Random_phantom
AddProgram('phantom_create_random', 'Applications/Src/Random_phantom',
    '*.cc', [], ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction',
    'Lib/XmippData'], ['XmippInterface', 'XmippRecons', 'XmippData'])

# Range_adjust
AddProgram('range_adjust', 'Applications/Src/Range_adjust', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Raw22spi
AddProgram('convert_raw22spi', 'Applications/Src/Raw22spi', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Recons_test
AddProgram('recons_test', 'Applications/Src/Recons_test',
    '*.cc', [], ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction',
    'Lib/XmippData'], ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons',
    'XmippData'])

# Reverse_endian
AddProgram('reverse_endian', 'Applications/Src/Reverse_endian', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Resolution
AddProgram('resolution_fsc', 'Applications/Src/Resolution', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# RmSel
AddProgram('selfile_delete', 'Applications/Src/RmSel', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Rotate
AddProgram('rotate', 'Applications/Src/Rotate', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# RotateDescr
AddProgram('rotate_descr', 'Applications/Src/RotateDescr',
    '*.cc', [], ['Lib'], ['Lib/Reconstruction',
    'Lib/XmippData'], ['XmippRecons', 'XmippData'])

# Sammon
AddProgram('classify_sammon_projection', 'Applications/Src/Sammon', '*.cc', [],
    ['Lib'], ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif',
    'XmippData'])

# Sample_size
AddProgram('sample_size', 'Applications/Src/Sample_size', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Scale
AddProgram('scale', 'Applications/Src/Scale', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Scissor
AddProgram('micrograph_scissor', 'Applications/Src/Scissor', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Segment
AddProgram('volume_segment', 'Applications/Src/Segment', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Select_Images
AddProgram('selfile_select', 'Applications/Src/Select_Images', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# SelStats
AddProgram('selfile_statistics', 'Applications/Src/SelStats', '*.cc', [],
    ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Separate_Objects
AddProgram('separate_objects', 'Applications/Src/Separate_Objects', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Shift
AddProgram('shift', 'Applications/Src/Shift', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Skew
AddProgram('skew', 'Applications/Src/Skew', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# SOM
# FIXME -Wno-deprecated
AddProgram('classify_som', 'Applications/Src/SOM', '*.cc', [],
    ['Lib'], ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif',
    'XmippData'], ['-Wno-deprecated'])

# Sort_junk
AddProgram('sort_junk', 'Applications/Src/Sort_junk', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Split_selfile
AddProgram('selfile_split', 'Applications/Src/Split_selfile', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# SpAR
AddProgram('spar', 'Applications/Src/SpAR', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# SpARMA
AddProgram('spARMA', 'Applications/Src/SpARMA', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Spi22em
AddProgram('spi22em', 'Applications/Src/Spi22em', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData'])

# Spider22CCP4
AddProgram('convert_spi22ccp4', 'Applications/Src/Spider22CCP4', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData'])

# Spots2RealSpace2D
# FIXME -Wno-deprecated
AddProgram('crystal_aph2img', 'Applications/Src/Spots2RealSpace2D', '*.cc',
    [], ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData'],
    ['-Wno-deprecated'])

# SSNR
AddProgram('resolution_ssnr', 'Applications/Src/SSNR', '*.cc', [], ['Lib'],
    ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Statis
AddProgram('average', 'Applications/Src/Statis', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Surface
AddProgram('surface', 'Applications/Src/Surface', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Symmetrize
AddProgram('symmetrize', 'Applications/Src/Symmetrize', '*.cc', [], ['Lib'],
    ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Threshold
AddProgram('threshold', 'Applications/Src/Threshold', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# ToPDB
AddProgram('convert_data2pdb', 'Applications/Src/ToPDB', '*.cc', [],
    ['Lib'], ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif',
    'XmippData'])

# ToPhantom
AddProgram('convert_data2descr', 'Applications/Src/ToPhantom', '*.cc', [],
    ['Lib'], ['Lib/Classification', 'Lib/XmippData'], ['XmippClassif',
    'XmippData'])

# Unbend
AddProgram('unbend', 'Applications/Src/Unbend', '*.cc',
    [], ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons_Interface', 'XmippInterface', 'XmippRecons', 'XmippData'])

# Visualize_FFT
AddProgram('fourier_tranform', 'Applications/Src/Visualize_FFT', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Vol2Data
AddProgram('convert_vol2data', 'Applications/Src/Vol2Data', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# VolSampler
AddProgram('convert_vol2pseudo', 'Applications/Src/VolSampler', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# Voxels22Blobs
AddProgram('convert_voxels22blobs', 'Applications/Src/Voxels22Blobs', '*.cc', [],
    ['Lib'], ['Lib/XmippInterface', 'Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippInterface', 'XmippRecons', 'XmippData'])

# Wbp
AddProgram('reconstruct_wbp', 'Applications/Src/Wbp', '*.cc', [],
    ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'],
    ['XmippRecons', 'XmippData'])

# Window
AddProgram('window', 'Applications/Src/Window', '*.cc', [], ['Lib'],
    ['Lib/XmippData'], ['XmippData'])

# Window_micrograph
AddProgram('micrograph_window', 'Applications/Src/Window_micrograph', '*.cc',
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

# --- Scripts

# Batches (apps)
# NOTE PDBsidechain is in the only one in perl
AddBatch('selfile_create', 'Applications/Batches/Do_Selfile')
AddBatch('convert_pdb2descr', 'Applications/Batches/PDB2descr')
AddBatch('extract_sidechain_from_pdb', 'Applications/Batches/PDBsidechain', '.pl')
AddBatch('convert_pdb2surface', 'Applications/Batches/Pdb2surface')

# MPI
if int(env['mpi']):

    # MPIArt
    AddMPIProgram('mpi_art', 'Applications/Src/MPIArt', '*.cc', [], ['Lib'],
        ['Lib/Reconstruction', 'Lib/XmippData'],
        ['XmippRecons', 'XmippData'])

    # MPI_Angular_Predict
    AddMPIProgram('mpi_angular_predict', 'Applications/Src/MPI_Angular_Predict', '*.cc', [], ['Lib'],
        ['Lib/Reconstruction', 'Lib/XmippData'],
        ['XmippRecons', 'XmippData'])

    # MPI_Angular_Predict_Continuous
    AddMPIProgram('mpi_angular_predict_continuous', 'Applications/Src/MPI_Angular_Predict_Continuous', '*.cc', [], ['Lib'],
        ['Lib/Reconstruction', 'Lib/XmippData'],
        ['XmippRecons', 'XmippData'])

    # MPI_WBP
    AddMPIProgram('mpi_wbp', 'Applications/Src/MPI_WBP', '*.cc', [], ['Lib'],
        ['Lib/Reconstruction', 'Lib/XmippData'], ['XmippRecons', 'XmippData'])

    # MPI_MLalign2D
    AddMPIProgram('mpi_ml_align2d', 'Applications/Src/MPI_MLalign2D', '*.cc', [],
        ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'], ['XmippRecons',
        'XmippData'])

    # MPI_MLrefine3D
    AddMPIProgram('mpi_ml_refine3d', 'Applications/Src/MPI_MLrefine3D', '*.cc',
        [], ['Lib'], ['Lib/Reconstruction', 'Lib/XmippData'], ['XmippRecons',
        'XmippData'])

    # MPI_Projection_matching
    AddMPIProgram('mpi_angular_projection_matching',
        'Applications/Src/MPI_Projection_matching', '*.cc', [], ['Lib'],
        ['Lib/Reconstruction', 'Lib/XmippData'], ['XmippRecons', 'XmippData'])

# TIFF
# Tiff2Raw
if int(env['tiff']):
    AddProgram('convert_tiff2raw', 'Applications/Src/Tiff2Raw', '*.cc', [], ['Lib'],
        [], ['tiff'])

# QT
if int(env['gui']):
    envQT = env.Copy()
    envQT.Tool('qt')

    # Once again, just in case, Copy() does not work too well
    envQT.Replace(QT_LIB = env['QT_LIB'])

    # QT_AUTOSCAN does not work because .hh and .cc are not in the same dir
    envQT.SetDefault(QT_AUTOSCAN = 0)

    def AddQtProgram(name, basedir, sources_pattern = '*.cc', skip_list = [],
        mocs = [], includes = [], libpath =[], libs = [], cxxflags = [],
        linkflags = []):

        # setup
        basedir = AddLastSlash(basedir)
        fullname = env['prepend'] + name
        binprefix =  os.path.join(env['prefix'], 'bin')

        # FIXME Shouldn't env[] variables be honored?
        includes += env['CPPPATH']
        libpath += env['LIBPATH']
        libs += env['LIBS']
        cxxflags += env['CXXFLAGS']
        linkflags += env['LINKFLAGS']

        extra = []
        for i in mocs:
            extra.append(envQT.Moc(basedir + i))

        sources = Glob(basedir, sources_pattern, skip_list)

        program = envQT.Program(basedir + env['prepend'] + name, sources +
            extra, CPPPATH = envQT['CPPPATH'] + includes, LIBPATH =
            envQT['LIBPATH'] + libpath, LIBS = envQT['LIBS'] + libs, CXXFLAGS =
            cxxflags, LINKFLAGS = linkflags)

        # alias
        alias = env.Alias(fullname, program)
        install = env.Install(binprefix, program)
        env.Alias(fullname, install)
        env.Default(alias)

    # XmippGraphics
    # FIXME an AddQtLibrary function does not worth the cost, right?
    graphics_name = 'XmippGraphics'
    graphics_basedir = AddLastSlash('Lib/XmippGraphics')

    # FIXME Yes, it is UGLY but it works...
    graphics_mocs = []
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showTools.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'show2D.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showTable.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showSel.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showVol.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showSpectra.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showSOM.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showSpectraSOM.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showAssignCTF.hh'))
    graphics_mocs.append(envQT.Moc(graphics_basedir + 'showPlotter.hh'))

    # NOTE Our glob scans everything, *including* the generated files
    graphics_blacklist  = [
    'moc_showTools.cc',
    'moc_show2D.cc',
    'moc_showTable.cc',
    'moc_showSel.cc',
    'moc_showVol.cc',
    'moc_showSpectra.cc',
    'moc_showSOM.cc',
    'moc_showSpectraSOM.cc',
    'moc_showAssignCTF.cc',
    'moc_showPlotter.cc'
    ]
    graphics_sources = Glob(graphics_basedir, '*.cc', graphics_blacklist)
    graphics_cpppath = envQT['CPPPATH'] + ['Lib']
    graphics_objects = []
    for i in graphics_sources:
        graphics_objects.append(i)
    if int(env['static']):
        graphics = envQT.StaticLibrary(graphics_basedir + graphics_name,
            graphics_sources, CPPPATH = graphics_cpppath)
    else:
        graphics = envQT.SharedLibrary(graphics_basedir + graphics_name,
            graphics_objects + graphics_mocs , CPPPATH = graphics_cpppath)

    graphics_alias = env.Alias(graphics_name, graphics)
    graphics_install = env.Install(os.path.join(env['prefix'], 'lib'),
graphics)
    env.Alias(graphics_name, graphics_install)
    env.Default(graphics_alias)

    # Edit
    AddQtProgram('edit', 'Applications/Src/Edit', '*.cc', ['moc_textedit.cc'],
    [], ['Lib'], ['Lib/XmippData'], ['XmippData'])

    # CTF Viewer
    AddQtProgram('ctf_view', 'Applications/Src/CTFViewer', '*.cc',
    ['moc_ctfviewer_module.cc'], [], ['Lib'], ['Lib/XmippData',
    'Lib/XmippGraphics', 'Lib/Classification', 'Lib/Reconstruction'],
    ['XmippData', 'XmippGraphics', 'XmippClassif', 'XmippRecons'])

    # Mark
    # FIXME obj_DownSample is required. cannot use AddQtProgram
    mark_blacklist = [
    'moc_QtAutoMenu.cc',
    'moc_QtColorLabel.cc',
    'moc_QtDialogFamilies.cc',
    'moc_QtDialogProperties.cc',
    'moc_QtFileMenu.cc',
    'moc_QtFilter.cc',
    'moc_QtFilterMenu.cc',
    'moc_QtFiltersController.cc',
    'moc_QtImage.cc',
    'moc_QtImageMicrograph.cc',
    'moc_QtImageOverviewMicrograph.cc',
    'moc_QtMainWidgetMark.cc',
    'moc_QtPopupMenuMark.cc',
    'moc_QtWidgetMicrograph.cc',
    'moc_QtWidgetPSD.cc'
    ]
    mark_basedir = AddLastSlash('Applications/Src/Mark')

    mark_mocs = []
    mark_mocs.append(envQT.Moc(mark_basedir + 'QtPopupMenuMark.hh'))
    mark_sources = Glob(mark_basedir, '*.cc', mark_blacklist)
    mark_cpppath = envQT['CPPPATH'] + ['Lib']
    mark_libpath = envQT['LIBPATH'] + ['Lib/XmippInterface', 'Lib/XmippGraphics'
        , 'Lib/Reconstruction', 'Lib/Classification', 'Lib/XmippData']
    mark_libs = envQT['LIBS'] + ['XmippInterface', 'XmippGraphics',
        'XmippRecons', 'XmippClassif', 'XmippData']
    mark_prog = envQT.Program(mark_basedir + env['prepend'] + 'micrograph_mark',
        mark_sources + mark_mocs +
        obj_DownSample, CPPPATH = mark_cpppath,
        LIBPATH = mark_libpath, LIBS = mark_libs)
    mark_alias = env.Alias(env['prepend'] + 'micrograph_mark', mark_prog)
    mark_install = env.Install(os.path.join(env['prefix'],
        'bin'), mark_prog)
    env.Alias(env['prepend'] + 'micrograph_mark', mark_install)
    env.Default(mark_alias)

    # Show
    AddQtProgram('show', 'Applications/Src/Show', '*.cc', [], [], ['Lib'],
        ['Lib/Classification', 'Lib/XmippGraphics', 'Lib/Reconstruction',
        'Lib/XmippData'], ['XmippClassif', 'XmippGraphics', 'XmippRecons',
        'XmippData'])

    # XMask
    AddQtProgram('design_mask', 'Applications/Src/XMask', '*.cc', ['moc_maskimg.cc'],
        [], ['Lib'], ['Lib/XmippData', 'Lib/Classification'], ['XmippData',
        'XmippClassif'])

